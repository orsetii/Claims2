using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Claims2.DataLayer.Models
{
    public partial class ClaimsContext : DbContext
    {
        public ClaimsContext()
        {
        }

        public ClaimsContext(DbContextOptions<ClaimsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ADocTemplate> ADocTemplates { get; set; } = null!;
        public virtual DbSet<ADocTemplate1> ADocTemplates1 { get; set; } = null!;
        public virtual DbSet<ADocTemplatesBackup> ADocTemplatesBackups { get; set; } = null!;
        public virtual DbSet<APotentialIssue> APotentialIssues { get; set; } = null!;
        public virtual DbSet<APotentialIssueType> APotentialIssueTypes { get; set; } = null!;
        public virtual DbSet<AboutToGoLiveClaimOutcomesJan> AboutToGoLiveClaimOutcomesJans { get; set; } = null!;
        public virtual DbSet<Access> Accesses { get; set; } = null!;
        public virtual DbSet<Account> Accounts { get; set; } = null!;
        public virtual DbSet<AccountAcustomisation> AccountAcustomisations { get; set; } = null!;
        public virtual DbSet<AccountShownCommodity> AccountShownCommodities { get; set; } = null!;
        public virtual DbSet<AccountVcustomisation> AccountVcustomisations { get; set; } = null!;
        public virtual DbSet<AccountsAvivainvoicesQueue> AccountsAvivainvoicesQueues { get; set; } = null!;
        public virtual DbSet<Accrued> Accrueds { get; set; } = null!;
        public virtual DbSet<Accrued20140406Err> Accrued20140406Errs { get; set; } = null!;
        public virtual DbSet<Accrued20140510Err> Accrued20140510Errs { get; set; } = null!;
        public virtual DbSet<Accrued20141702> Accrued20141702s { get; set; } = null!;
        public virtual DbSet<AccruedPdh> AccruedPdhs { get; set; } = null!;
        public virtual DbSet<AccruedTemp> AccruedTemps { get; set; } = null!;
        public virtual DbSet<Action> Actions { get; set; } = null!;
        public virtual DbSet<Action1> Actions1 { get; set; } = null!;
        public virtual DbSet<ActionHistory> ActionHistories { get; set; } = null!;
        public virtual DbSet<ActionHistory1> ActionHistories1 { get; set; } = null!;
        public virtual DbSet<ActionInsuranceCompanySpecific> ActionInsuranceCompanySpecifics { get; set; } = null!;
        public virtual DbSet<ActionProfile> ActionProfiles { get; set; } = null!;
        public virtual DbSet<ActionProfileDetail> ActionProfileDetails { get; set; } = null!;
        public virtual DbSet<ActionScope> ActionScopes { get; set; } = null!;
        public virtual DbSet<ActionTree> ActionTrees { get; set; } = null!;
        public virtual DbSet<ActionTreeCommodity> ActionTreeCommodities { get; set; } = null!;
        public virtual DbSet<AdmiralCode> AdmiralCodes { get; set; } = null!;
        public virtual DbSet<AgeasBordereau> AgeasBordereaus { get; set; } = null!;
        public virtual DbSet<AgeasName> AgeasNames { get; set; } = null!;
        public virtual DbSet<Agent> Agents { get; set; } = null!;
        public virtual DbSet<AllBikes3> AllBikes3s { get; set; } = null!;
        public virtual DbSet<AllianzAssignment> AllianzAssignments { get; set; } = null!;
        public virtual DbSet<AllianzBorderauPaymentsDue> AllianzBorderauPaymentsDues { get; set; } = null!;
        public virtual DbSet<AllianzClaim> AllianzClaims { get; set; } = null!;
        public virtual DbSet<AllianzDevice> AllianzDevices { get; set; } = null!;
        public virtual DbSet<AllianzProduct> AllianzProducts { get; set; } = null!;
        public virtual DbSet<AlternativeOutcome> AlternativeOutcomes { get; set; } = null!;
        public virtual DbSet<AlternativeOutcomeDetail> AlternativeOutcomeDetails { get; set; } = null!;
        public virtual DbSet<AmazonGiftCard> AmazonGiftCards { get; set; } = null!;
        public virtual DbSet<AppSupplier> AppSuppliers { get; set; } = null!;
        public virtual DbSet<Archive> Archives { get; set; } = null!;
        public virtual DbSet<AssignClaim> AssignClaims { get; set; } = null!;
        public virtual DbSet<AssignClaim123> AssignClaim123s { get; set; } = null!;
        public virtual DbSet<Attribute> Attributes { get; set; } = null!;
        public virtual DbSet<AttributeCategory> AttributeCategories { get; set; } = null!;
        public virtual DbSet<AttributeValue> AttributeValues { get; set; } = null!;
        public virtual DbSet<AutoAssignment> AutoAssignments { get; set; } = null!;
        public virtual DbSet<AutoAssignmentResult> AutoAssignmentResults { get; set; } = null!;
        public virtual DbSet<AutoPriceChecked> AutoPriceCheckeds { get; set; } = null!;
        public virtual DbSet<AutoPriceChnote> AutoPriceChnotes { get; set; } = null!;
        public virtual DbSet<AutoPriceFee> AutoPriceFees { get; set; } = null!;
        public virtual DbSet<AutoPriceMarkUp> AutoPriceMarkUps { get; set; } = null!;
        public virtual DbSet<AutoPriceMaster> AutoPriceMasters { get; set; } = null!;
        public virtual DbSet<AutoPriceNote> AutoPriceNotes { get; set; } = null!;
        public virtual DbSet<AutoSendCompany> AutoSendCompanies { get; set; } = null!;
        public virtual DbSet<Autoinsrut2> Autoinsrut2s { get; set; } = null!;
        public virtual DbSet<Autoinstruict1> Autoinstruict1s { get; set; } = null!;
        public virtual DbSet<AvivainvoicesQueue> AvivainvoicesQueues { get; set; } = null!;
        public virtual DbSet<AvivainvoicesSent> AvivainvoicesSents { get; set; } = null!;
        public virtual DbSet<AxaBastionreport> AxaBastionreports { get; set; } = null!;
        public virtual DbSet<Backup> Backups { get; set; } = null!;
        public virtual DbSet<BackupItemAttribute> BackupItemAttributes { get; set; } = null!;
        public virtual DbSet<BackupSupplierProductLinkOperation> BackupSupplierProductLinkOperations { get; set; } = null!;
        public virtual DbSet<BadWord> BadWords { get; set; } = null!;
        public virtual DbSet<Bak2304Attribute> Bak2304Attributes { get; set; } = null!;
        public virtual DbSet<Bak2304AttributeValue> Bak2304AttributeValues { get; set; } = null!;
        public virtual DbSet<Bak2304Brand> Bak2304Brands { get; set; } = null!;
        public virtual DbSet<Bak2304Category> Bak2304Categories { get; set; } = null!;
        public virtual DbSet<Bak2304Family> Bak2304Families { get; set; } = null!;
        public virtual DbSet<Bak2304FamilyAttribute> Bak2304FamilyAttributes { get; set; } = null!;
        public virtual DbSet<Bak2304Product> Bak2304Products { get; set; } = null!;
        public virtual DbSet<Bak2304ProductAttributeValue> Bak2304ProductAttributeValues { get; set; } = null!;
        public virtual DbSet<BankTranType> BankTranTypes { get; set; } = null!;
        public virtual DbSet<BasicDatum> BasicData { get; set; } = null!;
        public virtual DbSet<BastionBuzzword> BastionBuzzwords { get; set; } = null!;
        public virtual DbSet<BastionClaimOutcome> BastionClaimOutcomes { get; set; } = null!;
        public virtual DbSet<BastionCloseReason> BastionCloseReasons { get; set; } = null!;
        public virtual DbSet<BastionDevice> BastionDevices { get; set; } = null!;
        public virtual DbSet<BastionDeviceValue> BastionDeviceValues { get; set; } = null!;
        public virtual DbSet<BastionError> BastionErrors { get; set; } = null!;
        public virtual DbSet<BastionExcess> BastionExcesses { get; set; } = null!;
        public virtual DbSet<BastionImei> BastionImeis { get; set; } = null!;
        public virtual DbSet<BastionLog> BastionLogs { get; set; } = null!;
        public virtual DbSet<BastionPolicyFeed> BastionPolicyFeeds { get; set; } = null!;
        public virtual DbSet<BastionPolicyFeedTemp> BastionPolicyFeedTemps { get; set; } = null!;
        public virtual DbSet<BastionPolicyMi> BastionPolicyMis { get; set; } = null!;
        public virtual DbSet<BastionPop> BastionPops { get; set; } = null!;
        public virtual DbSet<BastionProgress> BastionProgresses { get; set; } = null!;
        public virtual DbSet<BastionRepairUpdate> BastionRepairUpdates { get; set; } = null!;
        public virtual DbSet<BastionSberequest> BastionSberequests { get; set; } = null!;
        public virtual DbSet<BastionTrojanRequest> BastionTrojanRequests { get; set; } = null!;
        public virtual DbSet<BatchPosting> BatchPostings { get; set; } = null!;
        public virtual DbSet<BiDescCount> BiDescCounts { get; set; } = null!;
        public virtual DbSet<BiDescCount150> BiDescCount150s { get; set; } = null!;
        public virtual DbSet<BiHiDesc> BiHiDescs { get; set; } = null!;
        public virtual DbSet<Bimonthly> Bimonthlies { get; set; } = null!;
        public virtual DbSet<BlCreditor> BlCreditors { get; set; } = null!;
        public virtual DbSet<BlPaid> BlPaids { get; set; } = null!;
        public virtual DbSet<BlUnpaid> BlUnpaids { get; set; } = null!;
        public virtual DbSet<BonusCalculated> BonusCalculateds { get; set; } = null!;
        public virtual DbSet<BonusCalculatedBackup> BonusCalculatedBackups { get; set; } = null!;
        public virtual DbSet<BonusEvent> BonusEvents { get; set; } = null!;
        public virtual DbSet<BonusGpByClaim> BonusGpByClaims { get; set; } = null!;
        public virtual DbSet<BonusGpByClaimBackup> BonusGpByClaimBackups { get; set; } = null!;
        public virtual DbSet<BonusOverride> BonusOverrides { get; set; } = null!;
        public virtual DbSet<BonusRate> BonusRates { get; set; } = null!;
        public virtual DbSet<BookingOnUpdate> BookingOnUpdates { get; set; } = null!;
        public virtual DbSet<BordereauCode> BordereauCodes { get; set; } = null!;
        public virtual DbSet<BordereauSetting> BordereauSettings { get; set; } = null!;
        public virtual DbSet<Brand> Brands { get; set; } = null!;
        public virtual DbSet<BrandBanding> BrandBandings { get; set; } = null!;
        public virtual DbSet<CActionType> CActionTypes { get; set; } = null!;
        public virtual DbSet<CComplaint> CComplaints { get; set; } = null!;
        public virtual DbSet<CComplaintAction> CComplaintActions { get; set; } = null!;
        public virtual DbSet<CComplaintCategory> CComplaintCategories { get; set; } = null!;
        public virtual DbSet<CComplaintStatus> CComplaintStatuses { get; set; } = null!;
        public virtual DbSet<CComplaintStatusHistory> CComplaintStatusHistories { get; set; } = null!;
        public virtual DbSet<CCompliment> CCompliments { get; set; } = null!;
        public virtual DbSet<CDeliveryInspCompany> CDeliveryInspCompanies { get; set; } = null!;
        public virtual DbSet<CDeliveryOrder> CDeliveryOrders { get; set; } = null!;
        public virtual DbSet<CDeliveryServiceCode> CDeliveryServiceCodes { get; set; } = null!;
        public virtual DbSet<Call> Calls { get; set; } = null!;
        public virtual DbSet<CallProfile> CallProfiles { get; set; } = null!;
        public virtual DbSet<CallReason> CallReasons { get; set; } = null!;
        public virtual DbSet<CallType> CallTypes { get; set; } = null!;
        public virtual DbSet<Caller> Callers { get; set; } = null!;
        public virtual DbSet<CallsDpa> CallsDpas { get; set; } = null!;
        public virtual DbSet<CancelPo> CancelPos { get; set; } = null!;
        public virtual DbSet<CarpetrightVoucher> CarpetrightVouchers { get; set; } = null!;
        public virtual DbSet<CarpetrightVouchersInfo> CarpetrightVouchersInfos { get; set; } = null!;
        public virtual DbSet<CashSettlement> CashSettlements { get; set; } = null!;
        public virtual DbSet<CashSettlementClaim> CashSettlementClaims { get; set; } = null!;
        public virtual DbSet<CashSettlementReason> CashSettlementReasons { get; set; } = null!;
        public virtual DbSet<Cat> Cats { get; set; } = null!;
        public virtual DbSet<CatItem> CatItems { get; set; } = null!;
        public virtual DbSet<Category> Categories { get; set; } = null!;
        public virtual DbSet<Category1> Categories1 { get; set; } = null!;
        public virtual DbSet<Cause> Causes { get; set; } = null!;
        public virtual DbSet<CauseType> CauseTypes { get; set; } = null!;
        public virtual DbSet<Change> Changes { get; set; } = null!;
        public virtual DbSet<ChangesPreApril2> ChangesPreApril2s { get; set; } = null!;
        public virtual DbSet<ChangesPreapril> ChangesPreaprils { get; set; } = null!;
        public virtual DbSet<ChangesPreaug> ChangesPreaugs { get; set; } = null!;
        public virtual DbSet<ChangesPredec> ChangesPredecs { get; set; } = null!;
        public virtual DbSet<ChangesPredec2> ChangesPredec2s { get; set; } = null!;
        public virtual DbSet<ChangesPrefeb> ChangesPrefebs { get; set; } = null!;
        public virtual DbSet<ChangesPrejuly> ChangesPrejulies { get; set; } = null!;
        public virtual DbSet<ChangesPrejune> ChangesPrejunes { get; set; } = null!;
        public virtual DbSet<ChangesPremarch> ChangesPremarches { get; set; } = null!;
        public virtual DbSet<ChangesPremay> ChangesPremays { get; set; } = null!;
        public virtual DbSet<ChangesPrenov> ChangesPrenovs { get; set; } = null!;
        public virtual DbSet<ChangesPreoct> ChangesPreocts { get; set; } = null!;
        public virtual DbSet<ChangesPreoct2> ChangesPreoct2s { get; set; } = null!;
        public virtual DbSet<ChangesPresept> ChangesPresepts { get; set; } = null!;
        public virtual DbSet<ChangesPresept2> ChangesPresept2s { get; set; } = null!;
        public virtual DbSet<ChangesPresept3> ChangesPresept3s { get; set; } = null!;
        public virtual DbSet<Changesbulkfeb> Changesbulkfebs { get; set; } = null!;
        public virtual DbSet<Changesdecbulk> Changesdecbulks { get; set; } = null!;
        public virtual DbSet<Changesoct11> Changesoct11s { get; set; } = null!;
        public virtual DbSet<Changesprenov11> Changesprenov11s { get; set; } = null!;
        public virtual DbSet<Changesq> Changesqs { get; set; } = null!;
        public virtual DbSet<CheckTest> CheckTests { get; set; } = null!;
        public virtual DbSet<Checkissue> Checkissues { get; set; } = null!;
        public virtual DbSet<Checkorder> Checkorders { get; set; } = null!;
        public virtual DbSet<Checkrepaired> Checkrepaireds { get; set; } = null!;
        public virtual DbSet<Checkresponse> Checkresponses { get; set; } = null!;
        public virtual DbSet<Checkstatus> Checkstatuses { get; set; } = null!;
        public virtual DbSet<Checkview> Checkviews { get; set; } = null!;
        public virtual DbSet<ChnageBetterment> ChnageBetterments { get; set; } = null!;
        public virtual DbSet<Claim> Claims { get; set; } = null!;
        public virtual DbSet<Claim1> Claims1 { get; set; } = null!;
        public virtual DbSet<ClaimActionOutcome> ClaimActionOutcomes { get; set; } = null!;
        public virtual DbSet<ClaimComplaint> ClaimComplaints { get; set; } = null!;
        public virtual DbSet<ClaimDatum> ClaimData { get; set; } = null!;
        public virtual DbSet<ClaimEvent> ClaimEvents { get; set; } = null!;
        public virtual DbSet<ClaimFinance> ClaimFinances { get; set; } = null!;
        public virtual DbSet<ClaimItem> ClaimItems { get; set; } = null!;
        public virtual DbSet<ClaimItem1> ClaimItems1 { get; set; } = null!;
        public virtual DbSet<ClaimItem2> ClaimItems2 { get; set; } = null!;
        public virtual DbSet<ClaimItemBackup> ClaimItemBackups { get; set; } = null!;
        public virtual DbSet<ClaimItemGemGroup> ClaimItemGemGroups { get; set; } = null!;
        public virtual DbSet<ClaimItemMetal> ClaimItemMetals { get; set; } = null!;
        public virtual DbSet<ClaimItemValue> ClaimItemValues { get; set; } = null!;
        public virtual DbSet<ClaimItemValue1> ClaimItemValues1 { get; set; } = null!;
        public virtual DbSet<ClaimLessThanExcess> ClaimLessThanExcesses { get; set; } = null!;
        public virtual DbSet<ClaimLocked> ClaimLockeds { get; set; } = null!;
        public virtual DbSet<ClaimOrder> ClaimOrders { get; set; } = null!;
        public virtual DbSet<ClaimOrderOutcome> ClaimOrderOutcomes { get; set; } = null!;
        public virtual DbSet<ClaimOrderRelatedFitting> ClaimOrderRelatedFittings { get; set; } = null!;
        public virtual DbSet<ClaimProfit> ClaimProfits { get; set; } = null!;
        public virtual DbSet<ClaimStatus> ClaimStatuses { get; set; } = null!;
        public virtual DbSet<ClaimStatus1> ClaimStatuses1 { get; set; } = null!;
        public virtual DbSet<ClaimStatusSequence> ClaimStatusSequences { get; set; } = null!;
        public virtual DbSet<ClaimStatusType> ClaimStatusTypes { get; set; } = null!;
        public virtual DbSet<ClaimType> ClaimTypes { get; set; } = null!;
        public virtual DbSet<ClaimValue> ClaimValues { get; set; } = null!;
        public virtual DbSet<Claimant> Claimants { get; set; } = null!;
        public virtual DbSet<ClaimedItem> ClaimedItems { get; set; } = null!;
        public virtual DbSet<ClaimsToKeep> ClaimsToKeeps { get; set; } = null!;
        public virtual DbSet<ClientRegion> ClientRegions { get; set; } = null!;
        public virtual DbSet<CloseClaimLogTest> CloseClaimLogTests { get; set; } = null!;
        public virtual DbSet<CloseRemainingClaim> CloseRemainingClaims { get; set; } = null!;
        public virtual DbSet<Closed> Closeds { get; set; } = null!;
        public virtual DbSet<Cnetattribute> Cnetattributes { get; set; } = null!;
        public virtual DbSet<CnetattributeCategory> CnetattributeCategories { get; set; } = null!;
        public virtual DbSet<CnetattributeValue> CnetattributeValues { get; set; } = null!;
        public virtual DbSet<Cnetbrand> Cnetbrands { get; set; } = null!;
        public virtual DbSet<CnetbrandBanding> CnetbrandBandings { get; set; } = null!;
        public virtual DbSet<Cnetcategory> Cnetcategories { get; set; } = null!;
        public virtual DbSet<Cnetfamily> Cnetfamilies { get; set; } = null!;
        public virtual DbSet<Cnetfamily2> Cnetfamily2s { get; set; } = null!;
        public virtual DbSet<CnetfamilyAttribute> CnetfamilyAttributes { get; set; } = null!;
        public virtual DbSet<Cnetproduct> Cnetproducts { get; set; } = null!;
        public virtual DbSet<CnetproductAttributeValue> CnetproductAttributeValues { get; set; } = null!;
        public virtual DbSet<CnetsupplierProductLinkOperation> CnetsupplierProductLinkOperations { get; set; } = null!;
        public virtual DbSet<CommentReason> CommentReasons { get; set; } = null!;
        public virtual DbSet<CompanyDetail> CompanyDetails { get; set; } = null!;
        public virtual DbSet<Complaint> Complaints { get; set; } = null!;
        public virtual DbSet<ComplaintCommentsHistory> ComplaintCommentsHistories { get; set; } = null!;
        public virtual DbSet<ComplaintDatum> ComplaintData { get; set; } = null!;
        public virtual DbSet<ComplaintStatus> ComplaintStatuses { get; set; } = null!;
        public virtual DbSet<ComplaintStatusHistory> ComplaintStatusHistories { get; set; } = null!;
        public virtual DbSet<CountCategory> CountCategories { get; set; } = null!;
        public virtual DbSet<Country> Countries { get; set; } = null!;
        public virtual DbSet<Criterion> Criteria { get; set; } = null!;
        public virtual DbSet<CsvBatch> CsvBatches { get; set; } = null!;
        public virtual DbSet<CsvUploadedCashSettlement> CsvUploadedCashSettlements { get; set; } = null!;
        public virtual DbSet<CsvUploadedDpdHeader> CsvUploadedDpdHeaders { get; set; } = null!;
        public virtual DbSet<CsvUploadedDpdInvoice> CsvUploadedDpdInvoices { get; set; } = null!;
        public virtual DbSet<CsvUploadedFile> CsvUploadedFiles { get; set; } = null!;
        public virtual DbSet<CsvUploadedJournalEntry> CsvUploadedJournalEntries { get; set; } = null!;
        public virtual DbSet<CsvUploadedNfuBanking> CsvUploadedNfuBankings { get; set; } = null!;
        public virtual DbSet<CsvUploadedStockDelivered> CsvUploadedStockDelivereds { get; set; } = null!;
        public virtual DbSet<CsvUploadedSupplierInvoice> CsvUploadedSupplierInvoices { get; set; } = null!;
        public virtual DbSet<CurrentPrice> CurrentPrices { get; set; } = null!;
        public virtual DbSet<Customer> Customers { get; set; } = null!;
        public virtual DbSet<CustomerAttitude> CustomerAttitudes { get; set; } = null!;
        public virtual DbSet<CustomerInvoice> CustomerInvoices { get; set; } = null!;
        public virtual DbSet<CustomerPortalLoginToken> CustomerPortalLoginTokens { get; set; } = null!;
        public virtual DbSet<Cycle> Cycles { get; set; } = null!;
        public virtual DbSet<CycleBot> CycleBots { get; set; } = null!;
        public virtual DbSet<CycleBrand> CycleBrands { get; set; } = null!;
        public virtual DbSet<CycleImport> CycleImports { get; set; } = null!;
        public virtual DbSet<CycleValue> CycleValues { get; set; } = null!;
        public virtual DbSet<DataAlert> DataAlerts { get; set; } = null!;
        public virtual DbSet<DataDump> DataDumps { get; set; } = null!;
        public virtual DbSet<DataDumpClosed> DataDumpCloseds { get; set; } = null!;
        public virtual DbSet<DataDumpNew> DataDumpNews { get; set; } = null!;
        public virtual DbSet<DataDumpStripped> DataDumpStrippeds { get; set; } = null!;
        public virtual DbSet<DataProvider> DataProviders { get; set; } = null!;
        public virtual DbSet<DcBestDefinedProduct> DcBestDefinedProducts { get; set; } = null!;
        public virtual DbSet<DcDuplicateAv> DcDuplicateAvs { get; set; } = null!;
        public virtual DbSet<DcDuplicatePav> DcDuplicatePavs { get; set; } = null!;
        public virtual DbSet<DeliveryAdvice> DeliveryAdvices { get; set; } = null!;
        public virtual DbSet<DeliveryAdviceItem> DeliveryAdviceItems { get; set; } = null!;
        public virtual DbSet<DeliveryCompany> DeliveryCompanies { get; set; } = null!;
        public virtual DbSet<DevADocTemplate> DevADocTemplates { get; set; } = null!;
        public virtual DbSet<DevInsuranceClaim> DevInsuranceClaims { get; set; } = null!;
        public virtual DbSet<DiamondCombination> DiamondCombinations { get; set; } = null!;
        public virtual DbSet<DiamondCost> DiamondCosts { get; set; } = null!;
        public virtual DbSet<DiamondImport> DiamondImports { get; set; } = null!;
        public virtual DbSet<DiamondQuality> DiamondQualities { get; set; } = null!;
        public virtual DbSet<DispatchedOrder> DispatchedOrders { get; set; } = null!;
        public virtual DbSet<Dlgorder> Dlgorders { get; set; } = null!;
        public virtual DbSet<DocImport> DocImports { get; set; } = null!;
        public virtual DbSet<DocImportLossAdjuster> DocImportLossAdjusters { get; set; } = null!;
        public virtual DbSet<DocImportSetup> DocImportSetups { get; set; } = null!;
        public virtual DbSet<Document> Documents { get; set; } = null!;
        public virtual DbSet<DocumentHistory> DocumentHistories { get; set; } = null!;
        public virtual DbSet<DocumentLink> DocumentLinks { get; set; } = null!;
        public virtual DbSet<DocumentTag> DocumentTags { get; set; } = null!;
        public virtual DbSet<DocumentTemplate> DocumentTemplates { get; set; } = null!;
        public virtual DbSet<Dpa> Dpas { get; set; } = null!;
        public virtual DbSet<DpdParcelEventCode> DpdParcelEventCodes { get; set; } = null!;
        public virtual DbSet<DpdeventTracking> DpdeventTrackings { get; set; } = null!;
        public virtual DbSet<DuckCreekAccount> DuckCreekAccounts { get; set; } = null!;
        public virtual DbSet<DuckCreekLog> DuckCreekLogs { get; set; } = null!;
        public virtual DbSet<Ean> Eans { get; set; } = null!;
        public virtual DbSet<EditHistory> EditHistories { get; set; } = null!;
        public virtual DbSet<Email> Emails { get; set; } = null!;
        public virtual DbSet<EmailAttachment> EmailAttachments { get; set; } = null!;
        public virtual DbSet<EmailScrap> EmailScraps { get; set; } = null!;
        public virtual DbSet<EmailSetting> EmailSettings { get; set; } = null!;
        public virtual DbSet<Error> Errors { get; set; } = null!;
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; } = null!;
        public virtual DbSet<EsureSurveyResult> EsureSurveyResults { get; set; } = null!;
        public virtual DbSet<ExampleSla66> ExampleSla66s { get; set; } = null!;
        public virtual DbSet<ExchangeRate> ExchangeRates { get; set; } = null!;
        public virtual DbSet<Exclude> Excludes { get; set; } = null!;
        public virtual DbSet<ExtendedFamily> ExtendedFamilies { get; set; } = null!;
        public virtual DbSet<ExtendedFamilyAttributeValue> ExtendedFamilyAttributeValues { get; set; } = null!;
        public virtual DbSet<ExternalProduct> ExternalProducts { get; set; } = null!;
        public virtual DbSet<Family> Families { get; set; } = null!;
        public virtual DbSet<FamilyAttribute> FamilyAttributes { get; set; } = null!;
        public virtual DbSet<Fee> Fees { get; set; } = null!;
        public virtual DbSet<FeeAttributeValue> FeeAttributeValues { get; set; } = null!;
        public virtual DbSet<FeeCategory> FeeCategories { get; set; } = null!;
        public virtual DbSet<FeeCategoryProduct> FeeCategoryProducts { get; set; } = null!;
        public virtual DbSet<FeeFnolvalue> FeeFnolvalues { get; set; } = null!;
        public virtual DbSet<FeeInsuranceCompany> FeeInsuranceCompanies { get; set; } = null!;
        public virtual DbSet<FeeProductType> FeeProductTypes { get; set; } = null!;
        public virtual DbSet<FeeType> FeeTypes { get; set; } = null!;
        public virtual DbSet<FinanceType> FinanceTypes { get; set; } = null!;
        public virtual DbSet<Findsupplier> Findsuppliers { get; set; } = null!;
        public virtual DbSet<Fitter> Fitters { get; set; } = null!;
        public virtual DbSet<FitterPricing> FitterPricings { get; set; } = null!;
        public virtual DbSet<FittingCost> FittingCosts { get; set; } = null!;
        public virtual DbSet<FlagUpdate> FlagUpdates { get; set; } = null!;
        public virtual DbSet<Flooring> Floorings { get; set; } = null!;
        public virtual DbSet<FlooringAiimage> FlooringAiimages { get; set; } = null!;
        public virtual DbSet<FlooringAndFurnitureBot> FlooringAndFurnitureBots { get; set; } = null!;
        public virtual DbSet<FlooringCategory> FlooringCategories { get; set; } = null!;
        public virtual DbSet<FlooringColour> FlooringColours { get; set; } = null!;
        public virtual DbSet<FlooringSupplier> FlooringSuppliers { get; set; } = null!;
        public virtual DbSet<Fnolsource> Fnolsources { get; set; } = null!;
        public virtual DbSet<Frmonthly> Frmonthlies { get; set; } = null!;
        public virtual DbSet<GemCaratMapping> GemCaratMappings { get; set; } = null!;
        public virtual DbSet<GemCaratMappingBackup> GemCaratMappingBackups { get; set; } = null!;
        public virtual DbSet<GemClarity> GemClarities { get; set; } = null!;
        public virtual DbSet<GemCost> GemCosts { get; set; } = null!;
        public virtual DbSet<GemMargin> GemMargins { get; set; } = null!;
        public virtual DbSet<GemValMapping> GemValMappings { get; set; } = null!;
        public virtual DbSet<GenBetter> GenBetters { get; set; } = null!;
        public virtual DbSet<GenCarriage> GenCarriages { get; set; } = null!;
        public virtual DbSet<GenCredit> GenCredits { get; set; } = null!;
        public virtual DbSet<GenExcess> GenExcesses { get; set; } = null!;
        public virtual DbSet<GenInspect> GenInspects { get; set; } = null!;
        public virtual DbSet<GenRepair> GenRepairs { get; set; } = null!;
        public virtual DbSet<GenReplace> GenReplaces { get; set; } = null!;
        public virtual DbSet<GenReplaceTest> GenReplaceTests { get; set; } = null!;
        public virtual DbSet<GenSageTotal> GenSageTotals { get; set; } = null!;
        public virtual DbSet<GenaccBetter> GenaccBetters { get; set; } = null!;
        public virtual DbSet<GenaccCarriage> GenaccCarriages { get; set; } = null!;
        public virtual DbSet<GenaccCredit> GenaccCredits { get; set; } = null!;
        public virtual DbSet<GenaccExcess> GenaccExcesses { get; set; } = null!;
        public virtual DbSet<GenaccInspect> GenaccInspects { get; set; } = null!;
        public virtual DbSet<GenaccRepair> GenaccRepairs { get; set; } = null!;
        public virtual DbSet<GenaccReplace> GenaccReplaces { get; set; } = null!;
        public virtual DbSet<GenaccSageTotal> GenaccSageTotals { get; set; } = null!;
        public virtual DbSet<GenfixBetter> GenfixBetters { get; set; } = null!;
        public virtual DbSet<GenfixCarriage> GenfixCarriages { get; set; } = null!;
        public virtual DbSet<GenfixCredit> GenfixCredits { get; set; } = null!;
        public virtual DbSet<GenfixExcess> GenfixExcesses { get; set; } = null!;
        public virtual DbSet<GenfixInspect> GenfixInspects { get; set; } = null!;
        public virtual DbSet<GenfixRepair> GenfixRepairs { get; set; } = null!;
        public virtual DbSet<GenfixReplace> GenfixReplaces { get; set; } = null!;
        public virtual DbSet<GenfixSagetotal> GenfixSagetotals { get; set; } = null!;
        public virtual DbSet<GoodWord> GoodWords { get; set; } = null!;
        public virtual DbSet<GpDetail> GpDetails { get; set; } = null!;
        public virtual DbSet<GpDetailNew> GpDetailNews { get; set; } = null!;
        public virtual DbSet<GpDetailOld> GpDetailOlds { get; set; } = null!;
        public virtual DbSet<GrossNonItem> GrossNonItems { get; set; } = null!;
        public virtual DbSet<Group> Groups { get; set; } = null!;
        public virtual DbSet<HealthCheckSalesLedger> HealthCheckSalesLedgers { get; set; } = null!;
        public virtual DbSet<HealthCheckSupplierDatum> HealthCheckSupplierData { get; set; } = null!;
        public virtual DbSet<HeathCheckPurchaseLedger> HeathCheckPurchaseLedgers { get; set; } = null!;
        public virtual DbSet<HeathLambertCheck> HeathLambertChecks { get; set; } = null!;
        public virtual DbSet<Heatlambertchnage> Heatlambertchnages { get; set; } = null!;
        public virtual DbSet<HistoricalGemCost> HistoricalGemCosts { get; set; } = null!;
        public virtual DbSet<HistoricalMetalCost> HistoricalMetalCosts { get; set; } = null!;
        public virtual DbSet<History> Histories { get; set; } = null!;
        public virtual DbSet<History1> Histories1 { get; set; } = null!;
        public virtual DbSet<Holiday> Holidays { get; set; } = null!;
        public virtual DbSet<Holiday1> Holidays1 { get; set; } = null!;
        public virtual DbSet<IEventType> IEventTypes { get; set; } = null!;
        public virtual DbSet<IEventType1> IEventTypes1 { get; set; } = null!;
        public virtual DbSet<IInspectOutcome> IInspectOutcomes { get; set; } = null!;
        public virtual DbSet<IInspection> IInspections { get; set; } = null!;
        public virtual DbSet<IStatusSlHistory> IStatusSlHistories { get; set; } = null!;
        public virtual DbSet<IStatusSlHistory1> IStatusSlHistories1 { get; set; } = null!;
        public virtual DbSet<IStatusSlNextAction> IStatusSlNextActions { get; set; } = null!;
        public virtual DbSet<IStatusSlNextAction1> IStatusSlNextActions1 { get; set; } = null!;
        public virtual DbSet<IStatusSlPath> IStatusSlPaths { get; set; } = null!;
        public virtual DbSet<IStatusSlPath1> IStatusSlPaths1 { get; set; } = null!;
        public virtual DbSet<IStatusSlType> IStatusSlTypes { get; set; } = null!;
        public virtual DbSet<IStatusSlType1> IStatusSlTypes1 { get; set; } = null!;
        public virtual DbSet<ImportSetting> ImportSettings { get; set; } = null!;
        public virtual DbSet<ImportSuppProduct> ImportSuppProducts { get; set; } = null!;
        public virtual DbSet<InflationRate> InflationRates { get; set; } = null!;
        public virtual DbSet<Inspection> Inspections { get; set; } = null!;
        public virtual DbSet<InspectionHistory> InspectionHistories { get; set; } = null!;
        public virtual DbSet<InspectionImage> InspectionImages { get; set; } = null!;
        public virtual DbSet<InspectionStatus> InspectionStatuses { get; set; } = null!;
        public virtual DbSet<InspectionType> InspectionTypes { get; set; } = null!;
        public virtual DbSet<Inspections20140406Err> Inspections20140406Errs { get; set; } = null!;
        public virtual DbSet<Inspections20140510Err> Inspections20140510Errs { get; set; } = null!;
        public virtual DbSet<Inspections20141702> Inspections20141702s { get; set; } = null!;
        public virtual DbSet<InspectionsPdh> InspectionsPdhs { get; set; } = null!;
        public virtual DbSet<InspectionsTemp> InspectionsTemps { get; set; } = null!;
        public virtual DbSet<Instruction> Instructions { get; set; } = null!;
        public virtual DbSet<InstructionItem> InstructionItems { get; set; } = null!;
        public virtual DbSet<InstructionItem1> InstructionItems1 { get; set; } = null!;
        public virtual DbSet<InstructionItemValue> InstructionItemValues { get; set; } = null!;
        public virtual DbSet<InsuranceClaim> InsuranceClaims { get; set; } = null!;
        public virtual DbSet<InsuranceClaim1> InsuranceClaims1 { get; set; } = null!;
        public virtual DbSet<InsuranceClaimCommentsHistory> InsuranceClaimCommentsHistories { get; set; } = null!;
        public virtual DbSet<InsuranceClaimDocument> InsuranceClaimDocuments { get; set; } = null!;
        public virtual DbSet<InsuranceClaimStatus> InsuranceClaimStatuses { get; set; } = null!;
        public virtual DbSet<InsuranceClaimStatusHistory> InsuranceClaimStatusHistories { get; set; } = null!;
        public virtual DbSet<InsuranceCompany> InsuranceCompanies { get; set; } = null!;
        public virtual DbSet<InsuranceCompanyType> InsuranceCompanyTypes { get; set; } = null!;
        public virtual DbSet<InsurancePricing> InsurancePricings { get; set; } = null!;
        public virtual DbSet<InsurancePricingType> InsurancePricingTypes { get; set; } = null!;
        public virtual DbSet<Invoice> Invoices { get; set; } = null!;
        public virtual DbSet<Invoice1> Invoices1 { get; set; } = null!;
        public virtual DbSet<InvoiceDetailFinance> InvoiceDetailFinances { get; set; } = null!;
        public virtual DbSet<InvoiceException> InvoiceExceptions { get; set; } = null!;
        public virtual DbSet<InvoiceItem> InvoiceItems { get; set; } = null!;
        public virtual DbSet<InvoiceProduct> InvoiceProducts { get; set; } = null!;
        public virtual DbSet<Item> Items { get; set; } = null!;
        public virtual DbSet<Item1> Items1 { get; set; } = null!;
        public virtual DbSet<ItemActionHistory> ItemActionHistories { get; set; } = null!;
        public virtual DbSet<ItemAttribute> ItemAttributes { get; set; } = null!;
        public virtual DbSet<ItemAttribute1> ItemAttributes1 { get; set; } = null!;
        public virtual DbSet<ItemDeliveredLog> ItemDeliveredLogs { get; set; } = null!;
        public virtual DbSet<ItemFinance> ItemFinances { get; set; } = null!;
        public virtual DbSet<ItemInspection> ItemInspections { get; set; } = null!;
        public virtual DbSet<ItemInvoiced> ItemInvoiceds { get; set; } = null!;
        public virtual DbSet<ItemOutcome> ItemOutcomes { get; set; } = null!;
        public virtual DbSet<ItemPart> ItemParts { get; set; } = null!;
        public virtual DbSet<ItemPhaseHistory> ItemPhaseHistories { get; set; } = null!;
        public virtual DbSet<ItemProperty> ItemProperties { get; set; } = null!;
        public virtual DbSet<ItemRepair> ItemRepairs { get; set; } = null!;
        public virtual DbSet<ItemReportStat> ItemReportStats { get; set; } = null!;
        public virtual DbSet<ItemStatus> ItemStatuses { get; set; } = null!;
        public virtual DbSet<ItemStatusHistory> ItemStatusHistories { get; set; } = null!;
        public virtual DbSet<ItemStatusHistory1> ItemStatusHistories1 { get; set; } = null!;
        public virtual DbSet<ItemTaskHistory> ItemTaskHistories { get; set; } = null!;
        public virtual DbSet<ItemTaskHistory1> ItemTaskHistories1 { get; set; } = null!;
        public virtual DbSet<ItemType> ItemTypes { get; set; } = null!;
        public virtual DbSet<ItemTypeAttribute> ItemTypeAttributes { get; set; } = null!;
        public virtual DbSet<JdstransactionLog> JdstransactionLogs { get; set; } = null!;
        public virtual DbSet<JdsvalidatedItem> JdsvalidatedItems { get; set; } = null!;
        public virtual DbSet<JewelleryBot> JewelleryBots { get; set; } = null!;
        public virtual DbSet<KeithCahnhgeinsurnceco> KeithCahnhgeinsurncecos { get; set; } = null!;
        public virtual DbSet<KeithCheckInvoice> KeithCheckInvoices { get; set; } = null!;
        public virtual DbSet<LaAlert> LaAlerts { get; set; } = null!;
        public virtual DbSet<LaAlertSublevel> LaAlertSublevels { get; set; } = null!;
        public virtual DbSet<LaGroupMember> LaGroupMembers { get; set; } = null!;
        public virtual DbSet<LaGroupName> LaGroupNames { get; set; } = null!;
        public virtual DbSet<LaLagroup> LaLagroups { get; set; } = null!;
        public virtual DbSet<Lagroup> Lagroups { get; set; } = null!;
        public virtual DbSet<LastClosedStatus> LastClosedStatuses { get; set; } = null!;
        public virtual DbSet<LastFewJanuaryClaimsWithoutOutcomesToGoLive> LastFewJanuaryClaimsWithoutOutcomesToGoLives { get; set; } = null!;
        public virtual DbSet<LatePo> LatePos { get; set; } = null!;
        public virtual DbSet<Lbguser> Lbgusers { get; set; } = null!;
        public virtual DbSet<LgBordereau> LgBordereaus { get; set; } = null!;
        public virtual DbSet<LittleJotter> LittleJotters { get; set; } = null!;
        public virtual DbSet<Log> Logs { get; set; } = null!;
        public virtual DbSet<LoginAttempt> LoginAttempts { get; set; } = null!;
        public virtual DbSet<LoginHistory> LoginHistories { get; set; } = null!;
        public virtual DbSet<LossAdjuster> LossAdjusters { get; set; } = null!;
        public virtual DbSet<LossAdjusterUpdate> LossAdjusterUpdates { get; set; } = null!;
        public virtual DbSet<Markup> Markups { get; set; } = null!;
        public virtual DbSet<MazumaOrderImei> MazumaOrderImeis { get; set; } = null!;
        public virtual DbSet<Menu> Menus { get; set; } = null!;
        public virtual DbSet<Message> Messages { get; set; } = null!;
        public virtual DbSet<Message1> Messages1 { get; set; } = null!;
        public virtual DbSet<Message2> Messages2 { get; set; } = null!;
        public virtual DbSet<MessageImage> MessageImages { get; set; } = null!;
        public virtual DbSet<MessageOutcome> MessageOutcomes { get; set; } = null!;
        public virtual DbSet<MessageProduct> MessageProducts { get; set; } = null!;
        public virtual DbSet<MessageProductRoom> MessageProductRooms { get; set; } = null!;
        public virtual DbSet<MessageType> MessageTypes { get; set; } = null!;
        public virtual DbSet<MetalCaratValue> MetalCaratValues { get; set; } = null!;
        public virtual DbSet<Missingclaimsstatus1> Missingclaimsstatus1s { get; set; } = null!;
        public virtual DbSet<Monthly> Monthlies { get; set; } = null!;
        public virtual DbSet<Monthly20140406Err> Monthly20140406Errs { get; set; } = null!;
        public virtual DbSet<Monthly20140510Err> Monthly20140510Errs { get; set; } = null!;
        public virtual DbSet<Monthly20141702> Monthly20141702s { get; set; } = null!;
        public virtual DbSet<MonthlyDelete> MonthlyDeletes { get; set; } = null!;
        public virtual DbSet<MonthlyNewClaim> MonthlyNewClaims { get; set; } = null!;
        public virtual DbSet<MonthlyOld> MonthlyOlds { get; set; } = null!;
        public virtual DbSet<MonthlyOld2> MonthlyOld2s { get; set; } = null!;
        public virtual DbSet<MonthlyOldversion> MonthlyOldversions { get; set; } = null!;
        public virtual DbSet<MonthlyPdh> MonthlyPdhs { get; set; } = null!;
        public virtual DbSet<MonthlySteve> MonthlySteves { get; set; } = null!;
        public virtual DbSet<MonthlyTemp> MonthlyTemps { get; set; } = null!;
        public virtual DbSet<Mpn> Mpns { get; set; } = null!;
        public virtual DbSet<NMiClaim> NMiClaims { get; set; } = null!;
        public virtual DbSet<NMiClaimStatus> NMiClaimStatuses { get; set; } = null!;
        public virtual DbSet<NMiSage> NMiSages { get; set; } = null!;
        public virtual DbSet<NSla58> NSla58s { get; set; } = null!;
        public virtual DbSet<NSla581> NSla581s { get; set; } = null!;
        public virtual DbSet<NSla582> NSla582s { get; set; } = null!;
        public virtual DbSet<NSla591> NSla591s { get; set; } = null!;
        public virtual DbSet<NSla592> NSla592s { get; set; } = null!;
        public virtual DbSet<NSla60> NSla60s { get; set; } = null!;
        public virtual DbSet<NSla61> NSla61s { get; set; } = null!;
        public virtual DbSet<NSla62> NSla62s { get; set; } = null!;
        public virtual DbSet<NSla631> NSla631s { get; set; } = null!;
        public virtual DbSet<NSla632> NSla632s { get; set; } = null!;
        public virtual DbSet<NSla64> NSla64s { get; set; } = null!;
        public virtual DbSet<NSla66> NSla66s { get; set; } = null!;
        public virtual DbSet<NSla671> NSla671s { get; set; } = null!;
        public virtual DbSet<NTblCall> NTblCalls { get; set; } = null!;
        public virtual DbSet<NTblCallProfile> NTblCallProfiles { get; set; } = null!;
        public virtual DbSet<NTblCallReason> NTblCallReasons { get; set; } = null!;
        public virtual DbSet<NTblCallType> NTblCallTypes { get; set; } = null!;
        public virtual DbSet<NTblCaller> NTblCallers { get; set; } = null!;
        public virtual DbSet<NTblCustomerAttitude> NTblCustomerAttitudes { get; set; } = null!;
        public virtual DbSet<NTblDpa> NTblDpas { get; set; } = null!;
        public virtual DbSet<NTblHoliday> NTblHolidays { get; set; } = null!;
        public virtual DbSet<NTblMessage> NTblMessages { get; set; } = null!;
        public virtual DbSet<NTblMessageOutcome> NTblMessageOutcomes { get; set; } = null!;
        public virtual DbSet<NTblMessageType> NTblMessageTypes { get; set; } = null!;
        public virtual DbSet<NTblPortalAssoc> NTblPortalAssocs { get; set; } = null!;
        public virtual DbSet<NTblTitle> NTblTitles { get; set; } = null!;
        public virtual DbSet<NTblcriterion> NTblcriteria { get; set; } = null!;
        public virtual DbSet<NViewInspection> NViewInspections { get; set; } = null!;
        public virtual DbSet<NcTblBiCallFlow> NcTblBiCallFlows { get; set; } = null!;
        public virtual DbSet<NcTblBiCallFlowStage> NcTblBiCallFlowStages { get; set; } = null!;
        public virtual DbSet<NcTblBiCallFlowType> NcTblBiCallFlowTypes { get; set; } = null!;
        public virtual DbSet<NcTblBiDescription> NcTblBiDescriptions { get; set; } = null!;
        public virtual DbSet<NcTblBiOption> NcTblBiOptions { get; set; } = null!;
        public virtual DbSet<NcTblBiResponse> NcTblBiResponses { get; set; } = null!;
        public virtual DbSet<NcTblBiType> NcTblBiTypes { get; set; } = null!;
        public virtual DbSet<NcTblCBiCallFlow> NcTblCBiCallFlows { get; set; } = null!;
        public virtual DbSet<NcTblCBiCallFlowStage> NcTblCBiCallFlowStages { get; set; } = null!;
        public virtual DbSet<NcTblCBiCallFlowType> NcTblCBiCallFlowTypes { get; set; } = null!;
        public virtual DbSet<NcTblCBiDescription> NcTblCBiDescriptions { get; set; } = null!;
        public virtual DbSet<NcTblCBiOption> NcTblCBiOptions { get; set; } = null!;
        public virtual DbSet<NcTblCBiResponse> NcTblCBiResponses { get; set; } = null!;
        public virtual DbSet<NcTblCBiType> NcTblCBiTypes { get; set; } = null!;
        public virtual DbSet<NeilBvalidationStat> NeilBvalidationStats { get; set; } = null!;
        public virtual DbSet<NewFormat> NewFormats { get; set; } = null!;
        public virtual DbSet<NewGrossItem> NewGrossItems { get; set; } = null!;
        public virtual DbSet<NewValue> NewValues { get; set; } = null!;
        public virtual DbSet<NewmiDateClosed> NewmiDateCloseds { get; set; } = null!;
        public virtual DbSet<NextAction> NextActions { get; set; } = null!;
        public virtual DbSet<NextRefNo> NextRefNos { get; set; } = null!;
        public virtual DbSet<NfuBordereau> NfuBordereaus { get; set; } = null!;
        public virtual DbSet<NfuInv> NfuInvs { get; set; } = null!;
        public virtual DbSet<NfuType> NfuTypes { get; set; } = null!;
        public virtual DbSet<NfuagencyDetail> NfuagencyDetails { get; set; } = null!;
        public virtual DbSet<Nfumagency> Nfumagencies { get; set; } = null!;
        public virtual DbSet<NfumagencyType> NfumagencyTypes { get; set; } = null!;
        public virtual DbSet<NfumclaimAgency> NfumclaimAgencies { get; set; } = null!;
        public virtual DbSet<NfummissingItemDetail> NfummissingItemDetails { get; set; } = null!;
        public virtual DbSet<Nfumregion> Nfumregions { get; set; } = null!;
        public virtual DbSet<Nfuupdate> Nfuupdates { get; set; } = null!;
        public virtual DbSet<NlAccount> NlAccounts { get; set; } = null!;
        public virtual DbSet<NlDefault> NlDefaults { get; set; } = null!;
        public virtual DbSet<NlMonthly> NlMonthlies { get; set; } = null!;
        public virtual DbSet<NlStructure> NlStructures { get; set; } = null!;
        public virtual DbSet<NmiDummy> NmiDummies { get; set; } = null!;
        public virtual DbSet<Notification> Notifications { get; set; } = null!;
        public virtual DbSet<NovemberCleansed> NovemberCleanseds { get; set; } = null!;
        public virtual DbSet<NtblInstruction> NtblInstructions { get; set; } = null!;
        public virtual DbSet<NtblPortalUser> NtblPortalUsers { get; set; } = null!;
        public virtual DbSet<Number> Numbers { get; set; } = null!;
        public virtual DbSet<OldADocTemplate> OldADocTemplates { get; set; } = null!;
        public virtual DbSet<OldAPotentialIssue> OldAPotentialIssues { get; set; } = null!;
        public virtual DbSet<OldAPotentialIssueType> OldAPotentialIssueTypes { get; set; } = null!;
        public virtual DbSet<OldCActionType> OldCActionTypes { get; set; } = null!;
        public virtual DbSet<OldCComplaint> OldCComplaints { get; set; } = null!;
        public virtual DbSet<OldCComplaintAction> OldCComplaintActions { get; set; } = null!;
        public virtual DbSet<OldCComplaintCategory> OldCComplaintCategories { get; set; } = null!;
        public virtual DbSet<OldCComplaintStatus> OldCComplaintStatuses { get; set; } = null!;
        public virtual DbSet<OldCComplaintStatusHistory> OldCComplaintStatusHistories { get; set; } = null!;
        public virtual DbSet<OldCCompliment> OldCCompliments { get; set; } = null!;
        public virtual DbSet<OldCDeliveryInspCompany> OldCDeliveryInspCompanies { get; set; } = null!;
        public virtual DbSet<OldCDeliveryOrder> OldCDeliveryOrders { get; set; } = null!;
        public virtual DbSet<OldCDeliveryServiceCode> OldCDeliveryServiceCodes { get; set; } = null!;
        public virtual DbSet<OldIEventType> OldIEventTypes { get; set; } = null!;
        public virtual DbSet<OldIStatusSlHistory> OldIStatusSlHistories { get; set; } = null!;
        public virtual DbSet<OldIStatusSlNextAction> OldIStatusSlNextActions { get; set; } = null!;
        public virtual DbSet<OldIStatusSlPath> OldIStatusSlPaths { get; set; } = null!;
        public virtual DbSet<OldIStatusSlType> OldIStatusSlTypes { get; set; } = null!;
        public virtual DbSet<OldLaAlert> OldLaAlerts { get; set; } = null!;
        public virtual DbSet<OldLaAlertSublevel> OldLaAlertSublevels { get; set; } = null!;
        public virtual DbSet<OldMiBimonthly> OldMiBimonthlies { get; set; } = null!;
        public virtual DbSet<OldMiCategory> OldMiCategories { get; set; } = null!;
        public virtual DbSet<OldMiCause> OldMiCauses { get; set; } = null!;
        public virtual DbSet<OldMiChange> OldMiChanges { get; set; } = null!;
        public virtual DbSet<OldMiClaim> OldMiClaims { get; set; } = null!;
        public virtual DbSet<OldMiRepDesc> OldMiRepDescs { get; set; } = null!;
        public virtual DbSet<OldMiSageDatum> OldMiSageData { get; set; } = null!;
        public virtual DbSet<OldMissingclaimsstatus1> OldMissingclaimsstatus1s { get; set; } = null!;
        public virtual DbSet<OldNTblCall> OldNTblCalls { get; set; } = null!;
        public virtual DbSet<OldNTblCallProfile> OldNTblCallProfiles { get; set; } = null!;
        public virtual DbSet<OldNTblCallReason> OldNTblCallReasons { get; set; } = null!;
        public virtual DbSet<OldNTblCallType> OldNTblCallTypes { get; set; } = null!;
        public virtual DbSet<OldNTblCaller> OldNTblCallers { get; set; } = null!;
        public virtual DbSet<OldNTblCustomerAttitude> OldNTblCustomerAttitudes { get; set; } = null!;
        public virtual DbSet<OldNTblDpa> OldNTblDpas { get; set; } = null!;
        public virtual DbSet<OldNTblHoliday> OldNTblHolidays { get; set; } = null!;
        public virtual DbSet<OldNTblMessage> OldNTblMessages { get; set; } = null!;
        public virtual DbSet<OldNTblMessageOutcome> OldNTblMessageOutcomes { get; set; } = null!;
        public virtual DbSet<OldNTblMessageType> OldNTblMessageTypes { get; set; } = null!;
        public virtual DbSet<OldNTblPortalAssoc> OldNTblPortalAssocs { get; set; } = null!;
        public virtual DbSet<OldNTblTitle> OldNTblTitles { get; set; } = null!;
        public virtual DbSet<OldNTblcriterion> OldNTblcriteria { get; set; } = null!;
        public virtual DbSet<OldNtblInstruction> OldNtblInstructions { get; set; } = null!;
        public virtual DbSet<OldNtblPortalUser> OldNtblPortalUsers { get; set; } = null!;
        public virtual DbSet<OldNtblcallsDpa> OldNtblcallsDpas { get; set; } = null!;
        public virtual DbSet<OldPbcatcol> OldPbcatcols { get; set; } = null!;
        public virtual DbSet<OldPbcatedt> OldPbcatedts { get; set; } = null!;
        public virtual DbSet<OldPbcatfmt> OldPbcatfmts { get; set; } = null!;
        public virtual DbSet<OldPbcattbl> OldPbcattbls { get; set; } = null!;
        public virtual DbSet<OldPbcatvld> OldPbcatvlds { get; set; } = null!;
        public virtual DbSet<OldSAllItem> OldSAllItems { get; set; } = null!;
        public virtual DbSet<OldSDeliveryAccount> OldSDeliveryAccounts { get; set; } = null!;
        public virtual DbSet<OldSFaultRelation> OldSFaultRelations { get; set; } = null!;
        public virtual DbSet<OldSFaultType> OldSFaultTypes { get; set; } = null!;
        public virtual DbSet<OldSFixRate> OldSFixRates { get; set; } = null!;
        public virtual DbSet<OldSInsp> OldSInsps { get; set; } = null!;
        public virtual DbSet<OldSInspItem> OldSInspItems { get; set; } = null!;
        public virtual DbSet<OldSInspectedAttribute> OldSInspectedAttributes { get; set; } = null!;
        public virtual DbSet<OldSInspectionCo> OldSInspectionCos { get; set; } = null!;
        public virtual DbSet<OldSLAttrib> OldSLAttribs { get; set; } = null!;
        public virtual DbSet<OldSLFaultType> OldSLFaultTypes { get; set; } = null!;
        public virtual DbSet<OldSLSl> OldSLSls { get; set; } = null!;
        public virtual DbSet<OldSLSlAttrib> OldSLSlAttribs { get; set; } = null!;
        public virtual DbSet<OldSLSlFault> OldSLSlFaults { get; set; } = null!;
        public virtual DbSet<OldSLTl> OldSLTls { get; set; } = null!;
        public virtual DbSet<OldSLTran> OldSLTrans { get; set; } = null!;
        public virtual DbSet<OldSOutcome> OldSOutcomes { get; set; } = null!;
        public virtual DbSet<OldSPortalUser> OldSPortalUsers { get; set; } = null!;
        public virtual DbSet<OldSProduct> OldSProducts { get; set; } = null!;
        public virtual DbSet<OldSStatTran> OldSStatTrans { get; set; } = null!;
        public virtual DbSet<OldSStatus> OldSStatuses { get; set; } = null!;
        public virtual DbSet<OldStAttribVal> OldStAttribVals { get; set; } = null!;
        public virtual DbSet<OldStItemSpecification> OldStItemSpecifications { get; set; } = null!;
        public virtual DbSet<OldStLinkSuppMan> OldStLinkSuppMen { get; set; } = null!;
        public virtual DbSet<OldStManufacturer> OldStManufacturers { get; set; } = null!;
        public virtual DbSet<OldStMeetingsMan> OldStMeetingsMen { get; set; } = null!;
        public virtual DbSet<OldStMeetingsSupp> OldStMeetingsSupps { get; set; } = null!;
        public virtual DbSet<OldStSrQuantity> OldStSrQuantities { get; set; } = null!;
        public virtual DbSet<OldStStockItem> OldStStockItems { get; set; } = null!;
        public virtual DbSet<OldStStockRecord> OldStStockRecords { get; set; } = null!;
        public virtual DbSet<OldStStockTransaction> OldStStockTransactions { get; set; } = null!;
        public virtual DbSet<OldStSupplier> OldStSuppliers { get; set; } = null!;
        public virtual DbSet<OldStTransactionType> OldStTransactionTypes { get; set; } = null!;
        public virtual DbSet<OldTblAssignClaim> OldTblAssignClaims { get; set; } = null!;
        public virtual DbSet<OldTblAssignClaim123> OldTblAssignClaim123s { get; set; } = null!;
        public virtual DbSet<OldTblCashSettlement> OldTblCashSettlements { get; set; } = null!;
        public virtual DbSet<OldTblCashSettlementReason> OldTblCashSettlementReasons { get; set; } = null!;
        public virtual DbSet<OldTblCauseType> OldTblCauseTypes { get; set; } = null!;
        public virtual DbSet<OldTblClaimComplaint> OldTblClaimComplaints { get; set; } = null!;
        public virtual DbSet<OldTblClaimOrder> OldTblClaimOrders { get; set; } = null!;
        public virtual DbSet<OldTblClaimStatus> OldTblClaimStatuses { get; set; } = null!;
        public virtual DbSet<OldTblClaimStatusSequence> OldTblClaimStatusSequences { get; set; } = null!;
        public virtual DbSet<OldTblClaimType> OldTblClaimTypes { get; set; } = null!;
        public virtual DbSet<OldTblClaimedItem> OldTblClaimedItems { get; set; } = null!;
        public virtual DbSet<OldTblComplaintCommentsHistory> OldTblComplaintCommentsHistories { get; set; } = null!;
        public virtual DbSet<OldTblComplaintStatus> OldTblComplaintStatuses { get; set; } = null!;
        public virtual DbSet<OldTblComplaintStatusHistory> OldTblComplaintStatusHistories { get; set; } = null!;
        public virtual DbSet<OldTblCountry> OldTblCountries { get; set; } = null!;
        public virtual DbSet<OldTblCustomer> OldTblCustomers { get; set; } = null!;
        public virtual DbSet<OldTblCustomerInvoice> OldTblCustomerInvoices { get; set; } = null!;
        public virtual DbSet<OldTblDataProvider> OldTblDataProviders { get; set; } = null!;
        public virtual DbSet<OldTblDeliveryAdvice> OldTblDeliveryAdvices { get; set; } = null!;
        public virtual DbSet<OldTblDeliveryAdviceItem> OldTblDeliveryAdviceItems { get; set; } = null!;
        public virtual DbSet<OldTblDeliveryCompany> OldTblDeliveryCompanies { get; set; } = null!;
        public virtual DbSet<OldTblExternalProduct> OldTblExternalProducts { get; set; } = null!;
        public virtual DbSet<OldTblInspectionHistory> OldTblInspectionHistories { get; set; } = null!;
        public virtual DbSet<OldTblInspectionStatus> OldTblInspectionStatuses { get; set; } = null!;
        public virtual DbSet<OldTblInspectionType> OldTblInspectionTypes { get; set; } = null!;
        public virtual DbSet<OldTblInstructionItem> OldTblInstructionItems { get; set; } = null!;
        public virtual DbSet<OldTblInsuranceClaim> OldTblInsuranceClaims { get; set; } = null!;
        public virtual DbSet<OldTblInsuranceClaimCommentsHistory> OldTblInsuranceClaimCommentsHistories { get; set; } = null!;
        public virtual DbSet<OldTblInsuranceClaimDocument> OldTblInsuranceClaimDocuments { get; set; } = null!;
        public virtual DbSet<OldTblInsuranceClaimStatus> OldTblInsuranceClaimStatuses { get; set; } = null!;
        public virtual DbSet<OldTblInsuranceClaimStatusHistory> OldTblInsuranceClaimStatusHistories { get; set; } = null!;
        public virtual DbSet<OldTblInsuranceCompany> OldTblInsuranceCompanies { get; set; } = null!;
        public virtual DbSet<OldTblInsuranceCompanyType> OldTblInsuranceCompanyTypes { get; set; } = null!;
        public virtual DbSet<OldTblItem> OldTblItems { get; set; } = null!;
        public virtual DbSet<OldTblItemAttribute> OldTblItemAttributes { get; set; } = null!;
        public virtual DbSet<OldTblItemPart> OldTblItemParts { get; set; } = null!;
        public virtual DbSet<OldTblItemStatusHistory> OldTblItemStatusHistories { get; set; } = null!;
        public virtual DbSet<OldTblItemType> OldTblItemTypes { get; set; } = null!;
        public virtual DbSet<OldTblItemTypeAttribute> OldTblItemTypeAttributes { get; set; } = null!;
        public virtual DbSet<OldTblLossAdjuster> OldTblLossAdjusters { get; set; } = null!;
        public virtual DbSet<OldTblLossAdjusterUpdate> OldTblLossAdjusterUpdates { get; set; } = null!;
        public virtual DbSet<OldTblNumber> OldTblNumbers { get; set; } = null!;
        public virtual DbSet<OldTblProduct> OldTblProducts { get; set; } = null!;
        public virtual DbSet<OldTblProductAttributeValue> OldTblProductAttributeValues { get; set; } = null!;
        public virtual DbSet<OldTblProductBk> OldTblProductBks { get; set; } = null!;
        public virtual DbSet<OldTblProductInvoice> OldTblProductInvoices { get; set; } = null!;
        public virtual DbSet<OldTblStockCondition> OldTblStockConditions { get; set; } = null!;
        public virtual DbSet<OldTblSubCauseType> OldTblSubCauseTypes { get; set; } = null!;
        public virtual DbSet<OldTblSupplier> OldTblSuppliers { get; set; } = null!;
        public virtual DbSet<OldTblTriggeredEvent> OldTblTriggeredEvents { get; set; } = null!;
        public virtual DbSet<OldTblUser> OldTblUsers { get; set; } = null!;
        public virtual DbSet<OldTblUserLog> OldTblUserLogs { get; set; } = null!;
        public virtual DbSet<OldTblWarranty> OldTblWarranties { get; set; } = null!;
        public virtual DbSet<OldTempInspection> OldTempInspections { get; set; } = null!;
        public virtual DbSet<OldTempInsuranceClaim> OldTempInsuranceClaims { get; set; } = null!;
        public virtual DbSet<OldWClaim> OldWClaims { get; set; } = null!;
        public virtual DbSet<OldWClaimAttrib> OldWClaimAttribs { get; set; } = null!;
        public virtual DbSet<OldWClaimStatus> OldWClaimStatuses { get; set; } = null!;
        public virtual DbSet<OldWClaimStatusHistory> OldWClaimStatusHistories { get; set; } = null!;
        public virtual DbSet<OldZzTestTable> OldZzTestTables { get; set; } = null!;
        public virtual DbSet<Order> Orders { get; set; } = null!;
        public virtual DbSet<OrderAccepted> OrderAccepteds { get; set; } = null!;
        public virtual DbSet<OrderDelivered> OrderDelivereds { get; set; } = null!;
        public virtual DbSet<OrderPicked> OrderPickeds { get; set; } = null!;
        public virtual DbSet<Ordercheck> Orderchecks { get; set; } = null!;
        public virtual DbSet<Outcome> Outcomes { get; set; } = null!;
        public virtual DbSet<Outcome1> Outcomes1 { get; set; } = null!;
        public virtual DbSet<Outcome2> Outcomes2 { get; set; } = null!;
        public virtual DbSet<OutcomeAction> OutcomeActions { get; set; } = null!;
        public virtual DbSet<OutcomeCommodity> OutcomeCommodities { get; set; } = null!;
        public virtual DbSet<OutcomeInsurer> OutcomeInsurers { get; set; } = null!;
        public virtual DbSet<OutcomeSupplier> OutcomeSuppliers { get; set; } = null!;
        public virtual DbSet<OverheadSupplier> OverheadSuppliers { get; set; } = null!;
        public virtual DbSet<PageUser> PageUsers { get; set; } = null!;
        public virtual DbSet<PaidExcess> PaidExcesses { get; set; } = null!;
        public virtual DbSet<Parameter> Parameters { get; set; } = null!;
        public virtual DbSet<Parameter1> Parameters1 { get; set; } = null!;
        public virtual DbSet<Parameter20191209> Parameter20191209s { get; set; } = null!;
        public virtual DbSet<Path> Paths { get; set; } = null!;
        public virtual DbSet<PaulMiCreditNote> PaulMiCreditNotes { get; set; } = null!;
        public virtual DbSet<PaulsMi> PaulsMis { get; set; } = null!;
        public virtual DbSet<Pbcat> Pbcats { get; set; } = null!;
        public virtual DbSet<Pbcatcol> Pbcatcols { get; set; } = null!;
        public virtual DbSet<Pbcatedt> Pbcatedts { get; set; } = null!;
        public virtual DbSet<Pbcatfmt> Pbcatfmts { get; set; } = null!;
        public virtual DbSet<Pbcatvld> Pbcatvlds { get; set; } = null!;
        public virtual DbSet<PerilAnalysis> PerilAnalyses { get; set; } = null!;
        public virtual DbSet<Phase> Phases { get; set; } = null!;
        public virtual DbSet<PhaseHistory> PhaseHistories { get; set; } = null!;
        public virtual DbSet<PiMaster> PiMasters { get; set; } = null!;
        public virtual DbSet<Picture> Pictures { get; set; } = null!;
        public virtual DbSet<PoDetail> PoDetails { get; set; } = null!;
        public virtual DbSet<PoException> PoExceptions { get; set; } = null!;
        public virtual DbSet<PoExceptionType> PoExceptionTypes { get; set; } = null!;
        public virtual DbSet<PoFollowUpHistory> PoFollowUpHistories { get; set; } = null!;
        public virtual DbSet<PoHistory> PoHistories { get; set; } = null!;
        public virtual DbSet<PoLock> PoLocks { get; set; } = null!;
        public virtual DbSet<PoMaster> PoMasters { get; set; } = null!;
        public virtual DbSet<PoNewStatus> PoNewStatuses { get; set; } = null!;
        public virtual DbSet<PoPending> PoPendings { get; set; } = null!;
        public virtual DbSet<PoStatus> PoStatuses { get; set; } = null!;
        public virtual DbSet<PolicyHolder> PolicyHolders { get; set; } = null!;
        public virtual DbSet<PortalAssoc> PortalAssocs { get; set; } = null!;
        public virtual DbSet<PortalUser> PortalUsers { get; set; } = null!;
        public virtual DbSet<PostingMonth> PostingMonths { get; set; } = null!;
        public virtual DbSet<PrimeEntryDetail> PrimeEntryDetails { get; set; } = null!;
        public virtual DbSet<PrimeEntryMaster> PrimeEntryMasters { get; set; } = null!;
        public virtual DbSet<PrintQueueDocument> PrintQueueDocuments { get; set; } = null!;
        public virtual DbSet<PrintQueueHistory> PrintQueueHistories { get; set; } = null!;
        public virtual DbSet<Product> Products { get; set; } = null!;
        public virtual DbSet<Product1> Products1 { get; set; } = null!;
        public virtual DbSet<ProductAccessory> ProductAccessories { get; set; } = null!;
        public virtual DbSet<ProductAttributeValue> ProductAttributeValues { get; set; } = null!;
        public virtual DbSet<ProductAttributeValue1> ProductAttributeValues1 { get; set; } = null!;
        public virtual DbSet<ProductBk> ProductBks { get; set; } = null!;
        public virtual DbSet<ProductCode> ProductCodes { get; set; } = null!;
        public virtual DbSet<ProductInvoice> ProductInvoices { get; set; } = null!;
        public virtual DbSet<ProductLog> ProductLogs { get; set; } = null!;
        public virtual DbSet<ProductReplacementCache> ProductReplacementCaches { get; set; } = null!;
        public virtual DbSet<ProfitClaimDate> ProfitClaimDates { get; set; } = null!;
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; } = null!;
        public virtual DbSet<QBetterment> QBetterments { get; set; } = null!;
        public virtual DbSet<QBookedMonth> QBookedMonths { get; set; } = null!;
        public virtual DbSet<QBookedOnClaim> QBookedOnClaims { get; set; } = null!;
        public virtual DbSet<QByDate> QByDates { get; set; } = null!;
        public virtual DbSet<QCarriage> QCarriages { get; set; } = null!;
        public virtual DbSet<QCarriageNew> QCarriageNews { get; set; } = null!;
        public virtual DbSet<QCarryoverclaim> QCarryoverclaims { get; set; } = null!;
        public virtual DbSet<QCredit> QCredits { get; set; } = null!;
        public virtual DbSet<QCurrentInvoice> QCurrentInvoices { get; set; } = null!;
        public virtual DbSet<QDailyRep> QDailyReps { get; set; } = null!;
        public virtual DbSet<QExcess> QExcesses { get; set; } = null!;
        public virtual DbSet<QInspection> QInspections { get; set; } = null!;
        public virtual DbSet<QInvoiceMonth> QInvoiceMonths { get; set; } = null!;
        public virtual DbSet<QMonth> QMonths { get; set; } = null!;
        public virtual DbSet<QOpenClaim> QOpenClaims { get; set; } = null!;
        public virtual DbSet<QRepair> QRepairs { get; set; } = null!;
        public virtual DbSet<QReplace> QReplaces { get; set; } = null!;
        public virtual DbSet<QRollup> QRollups { get; set; } = null!;
        public virtual DbSet<QSageMonth> QSageMonths { get; set; } = null!;
        public virtual DbSet<QSageTotal> QSageTotals { get; set; } = null!;
        public virtual DbSet<QSla5> QSla5s { get; set; } = null!;
        public virtual DbSet<QSla51> QSla51s { get; set; } = null!;
        public virtual DbSet<QSla52> QSla52s { get; set; } = null!;
        public virtual DbSet<QSla7> QSla7s { get; set; } = null!;
        public virtual DbSet<QSla71> QSla71s { get; set; } = null!;
        public virtual DbSet<QSla72> QSla72s { get; set; } = null!;
        public virtual DbSet<QSla9> QSla9s { get; set; } = null!;
        public virtual DbSet<QSla91> QSla91s { get; set; } = null!;
        public virtual DbSet<QSla92> QSla92s { get; set; } = null!;
        public virtual DbSet<Rag> Rags { get; set; } = null!;
        public virtual DbSet<ReciperoCheck> ReciperoChecks { get; set; } = null!;
        public virtual DbSet<ReciperoHistory> ReciperoHistories { get; set; } = null!;
        public virtual DbSet<Removedochistory> Removedochistories { get; set; } = null!;
        public virtual DbSet<Removetestcomment> Removetestcomments { get; set; } = null!;
        public virtual DbSet<Removetesthistory> Removetesthistories { get; set; } = null!;
        public virtual DbSet<RepDesc> RepDescs { get; set; } = null!;
        public virtual DbSet<RepDescNew> RepDescNews { get; set; } = null!;
        public virtual DbSet<RepDescOld> RepDescOlds { get; set; } = null!;
        public virtual DbSet<RepairPartsCost> RepairPartsCosts { get; set; } = null!;
        public virtual DbSet<ReplacementItem> ReplacementItems { get; set; } = null!;
        public virtual DbSet<ReplacementItemsCost> ReplacementItemsCosts { get; set; } = null!;
        public virtual DbSet<Report> Reports { get; set; } = null!;
        public virtual DbSet<ReportLog> ReportLogs { get; set; } = null!;
        public virtual DbSet<ReportSetting> ReportSettings { get; set; } = null!;
        public virtual DbSet<ReportStat> ReportStats { get; set; } = null!;
        public virtual DbSet<ReportedClaimFinance> ReportedClaimFinances { get; set; } = null!;
        public virtual DbSet<ReportedItemFinance> ReportedItemFinances { get; set; } = null!;
        public virtual DbSet<Request> Requests { get; set; } = null!;
        public virtual DbSet<Riaccessory> Riaccessories { get; set; } = null!;
        public virtual DbSet<Role> Roles { get; set; } = null!;
        public virtual DbSet<Role1> Roles1 { get; set; } = null!;
        public virtual DbSet<RolePath> RolePaths { get; set; } = null!;
        public virtual DbSet<Rule> Rules { get; set; } = null!;
        public virtual DbSet<RuleValue> RuleValues { get; set; } = null!;
        public virtual DbSet<SAllItem> SAllItems { get; set; } = null!;
        public virtual DbSet<SAllItem1> SAllItems1 { get; set; } = null!;
        public virtual DbSet<SBerRatio> SBerRatios { get; set; } = null!;
        public virtual DbSet<SBerSupp> SBerSupps { get; set; } = null!;
        public virtual DbSet<SConfirmInsp> SConfirmInsps { get; set; } = null!;
        public virtual DbSet<SDeliveryAccount> SDeliveryAccounts { get; set; } = null!;
        public virtual DbSet<SFaultAnalysis> SFaultAnalyses { get; set; } = null!;
        public virtual DbSet<SFaultRelation> SFaultRelations { get; set; } = null!;
        public virtual DbSet<SFaultType> SFaultTypes { get; set; } = null!;
        public virtual DbSet<SFixRate> SFixRates { get; set; } = null!;
        public virtual DbSet<SInsp> SInsps { get; set; } = null!;
        public virtual DbSet<SInsp1> SInsps1 { get; set; } = null!;
        public virtual DbSet<SInspItem> SInspItems { get; set; } = null!;
        public virtual DbSet<SInspItem1> SInspItems1 { get; set; } = null!;
        public virtual DbSet<SInspToReportTime> SInspToReportTimes { get; set; } = null!;
        public virtual DbSet<SInspectedAttribute> SInspectedAttributes { get; set; } = null!;
        public virtual DbSet<SInspectionCo> SInspectionCos { get; set; } = null!;
        public virtual DbSet<SInspectionCo1> SInspectionCos1 { get; set; } = null!;
        public virtual DbSet<SInspectionDatum> SInspectionData { get; set; } = null!;
        public virtual DbSet<SInsuranceAll> SInsuranceAlls { get; set; } = null!;
        public virtual DbSet<SInsuranceShow> SInsuranceShows { get; set; } = null!;
        public virtual DbSet<SLAttrib> SLAttribs { get; set; } = null!;
        public virtual DbSet<SLFaultType> SLFaultTypes { get; set; } = null!;
        public virtual DbSet<SLFaultType1> SLFaultTypes1 { get; set; } = null!;
        public virtual DbSet<SLSl> SLSls { get; set; } = null!;
        public virtual DbSet<SLSl1> SLSls1 { get; set; } = null!;
        public virtual DbSet<SLSlAttrib> SLSlAttribs { get; set; } = null!;
        public virtual DbSet<SLSlFault> SLSlFaults { get; set; } = null!;
        public virtual DbSet<SLSlFault1> SLSlFaults1 { get; set; } = null!;
        public virtual DbSet<SLTl> SLTls { get; set; } = null!;
        public virtual DbSet<SLTl1> SLTls1 { get; set; } = null!;
        public virtual DbSet<SLTran> SLTrans { get; set; } = null!;
        public virtual DbSet<SOutcome> SOutcomes { get; set; } = null!;
        public virtual DbSet<SOutcome1> SOutcomes1 { get; set; } = null!;
        public virtual DbSet<SPortalUser> SPortalUsers { get; set; } = null!;
        public virtual DbSet<SProduct> SProducts { get; set; } = null!;
        public virtual DbSet<SReportInsp> SReportInsps { get; set; } = null!;
        public virtual DbSet<SStatTran> SStatTrans { get; set; } = null!;
        public virtual DbSet<SStatus> SStatuses { get; set; } = null!;
        public virtual DbSet<SStatusCount> SStatusCounts { get; set; } = null!;
        public virtual DbSet<SStatusT> SStatusTs { get; set; } = null!;
        public virtual DbSet<STimeToReportByInsp> STimeToReportByInsps { get; set; } = null!;
        public virtual DbSet<STimesAll> STimesAlls { get; set; } = null!;
        public virtual DbSet<STopstat> STopstats { get; set; } = null!;
        public virtual DbSet<STypestat> STypestats { get; set; } = null!;
        public virtual DbSet<SV1> SV1s { get; set; } = null!;
        public virtual DbSet<SViewInspection> SViewInspections { get; set; } = null!;
        public virtual DbSet<SageCode> SageCodes { get; set; } = null!;
        public virtual DbSet<SageDatum> SageData { get; set; } = null!;
        public virtual DbSet<SagePi> SagePis { get; set; } = null!;
        public virtual DbSet<SagePo> SagePos { get; set; } = null!;
        public virtual DbSet<Sagetest> Sagetests { get; set; } = null!;
        public virtual DbSet<SalesInvoiceDetail> SalesInvoiceDetails { get; set; } = null!;
        public virtual DbSet<SalesInvoiceExtra> SalesInvoiceExtras { get; set; } = null!;
        public virtual DbSet<SalesInvoiceMaster> SalesInvoiceMasters { get; set; } = null!;
        public virtual DbSet<SalesInvoicesPending> SalesInvoicesPendings { get; set; } = null!;
        public virtual DbSet<Sbebdx> Sbebdxes { get; set; } = null!;
        public virtual DbSet<Sbsftp2020> Sbsftp2020s { get; set; } = null!;
        public virtual DbSet<Scenario> Scenarios { get; set; } = null!;
        public virtual DbSet<Sector> Sectors { get; set; } = null!;
        public virtual DbSet<SelectedInstruction> SelectedInstructions { get; set; } = null!;
        public virtual DbSet<Service> Services { get; set; } = null!;
        public virtual DbSet<ServiceAttributeValue> ServiceAttributeValues { get; set; } = null!;
        public virtual DbSet<ServiceDay> ServiceDays { get; set; } = null!;
        public virtual DbSet<ServiceFnolvalue> ServiceFnolvalues { get; set; } = null!;
        public virtual DbSet<ServiceInsuranceCompany> ServiceInsuranceCompanies { get; set; } = null!;
        public virtual DbSet<ServiceProductType> ServiceProductTypes { get; set; } = null!;
        public virtual DbSet<ServiceType> ServiceTypes { get; set; } = null!;
        public virtual DbSet<Setting> Settings { get; set; } = null!;
        public virtual DbSet<Setting1> Settings1 { get; set; } = null!;
        public virtual DbSet<SimpleBrand> SimpleBrands { get; set; } = null!;
        public virtual DbSet<SlDebtor> SlDebtors { get; set; } = null!;
        public virtual DbSet<SlPaid> SlPaids { get; set; } = null!;
        public virtual DbSet<SlPaidsBackup> SlPaidsBackups { get; set; } = null!;
        public virtual DbSet<SlUnpaid> SlUnpaids { get; set; } = null!;
        public virtual DbSet<SlUnpaids20170627> SlUnpaids20170627s { get; set; } = null!;
        public virtual DbSet<SlUnpaidsBackup> SlUnpaidsBackups { get; set; } = null!;
        public virtual DbSet<StAttribVal> StAttribVals { get; set; } = null!;
        public virtual DbSet<StItemSpecification> StItemSpecifications { get; set; } = null!;
        public virtual DbSet<StLinkSuppMan> StLinkSuppMen { get; set; } = null!;
        public virtual DbSet<StManufacturer> StManufacturers { get; set; } = null!;
        public virtual DbSet<StMeetingsMan> StMeetingsMen { get; set; } = null!;
        public virtual DbSet<StMeetingsSupp> StMeetingsSupps { get; set; } = null!;
        public virtual DbSet<StSrQuantity> StSrQuantities { get; set; } = null!;
        public virtual DbSet<StStockItem> StStockItems { get; set; } = null!;
        public virtual DbSet<StStockRecord> StStockRecords { get; set; } = null!;
        public virtual DbSet<StStockTransaction> StStockTransactions { get; set; } = null!;
        public virtual DbSet<StSupplier> StSuppliers { get; set; } = null!;
        public virtual DbSet<StTransactionType> StTransactionTypes { get; set; } = null!;
        public virtual DbSet<StatusHistory> StatusHistories { get; set; } = null!;
        public virtual DbSet<SteveRvalidationView> SteveRvalidationViews { get; set; } = null!;
        public virtual DbSet<StockCodeException> StockCodeExceptions { get; set; } = null!;
        public virtual DbSet<StockCondition> StockConditions { get; set; } = null!;
        public virtual DbSet<SubCauseType> SubCauseTypes { get; set; } = null!;
        public virtual DbSet<Summit2> Summit2s { get; set; } = null!;
        public virtual DbSet<SummitRepair> SummitRepairs { get; set; } = null!;
        public virtual DbSet<SummitReplace> SummitReplaces { get; set; } = null!;
        public virtual DbSet<Summitclaim> Summitclaims { get; set; } = null!;
        public virtual DbSet<Supplier> Suppliers { get; set; } = null!;
        public virtual DbSet<Supplier1> Suppliers1 { get; set; } = null!;
        public virtual DbSet<SupplierEmail> SupplierEmails { get; set; } = null!;
        public virtual DbSet<SupplierFamilyDetail> SupplierFamilyDetails { get; set; } = null!;
        public virtual DbSet<SupplierFee> SupplierFees { get; set; } = null!;
        public virtual DbSet<SupplierProduct> SupplierProducts { get; set; } = null!;
        public virtual DbSet<SupplierProductAltBrandNaming> SupplierProductAltBrandNamings { get; set; } = null!;
        public virtual DbSet<SupplierProductLinkOperation> SupplierProductLinkOperations { get; set; } = null!;
        public virtual DbSet<SupplierProductProduct> SupplierProductProducts { get; set; } = null!;
        public virtual DbSet<SupplierProductTemp> SupplierProductTemps { get; set; } = null!;
        public virtual DbSet<SupplierService> SupplierServices { get; set; } = null!;
        public virtual DbSet<Suppliercheck> Supplierchecks { get; set; } = null!;
        public virtual DbSet<SurveyMessageSent> SurveyMessageSents { get; set; } = null!;
        public virtual DbSet<SurveyResult> SurveyResults { get; set; } = null!;
        public virtual DbSet<SymbilityLog> SymbilityLogs { get; set; } = null!;
        public virtual DbSet<TaskAssignment> TaskAssignments { get; set; } = null!;
        public virtual DbSet<TaskHistory> TaskHistories { get; set; } = null!;
        public virtual DbSet<TblCauseType> TblCauseTypes { get; set; } = null!;
        public virtual DbSet<TblClaimOrder> TblClaimOrders { get; set; } = null!;
        public virtual DbSet<TblClaimStat> TblClaimStats { get; set; } = null!;
        public virtual DbSet<TblClaimType> TblClaimTypes { get; set; } = null!;
        public virtual DbSet<TblInsuranceClaim> TblInsuranceClaims { get; set; } = null!;
        public virtual DbSet<TblInsuranceClaimCommentsHistory> TblInsuranceClaimCommentsHistories { get; set; } = null!;
        public virtual DbSet<TblItemType> TblItemTypes { get; set; } = null!;
        public virtual DbSet<TblLossAdjuster> TblLossAdjusters { get; set; } = null!;
        public virtual DbSet<TblProduct> TblProducts { get; set; } = null!;
        public virtual DbSet<TblSubCauseType> TblSubCauseTypes { get; set; } = null!;
        public virtual DbSet<TblUser> TblUsers { get; set; } = null!;
        public virtual DbSet<TempAgeasCarriage> TempAgeasCarriages { get; set; } = null!;
        public virtual DbSet<TempAgeasClaim> TempAgeasClaims { get; set; } = null!;
        public virtual DbSet<TempBracelet> TempBracelets { get; set; } = null!;
        public virtual DbSet<TempCreditor> TempCreditors { get; set; } = null!;
        public virtual DbSet<TempDebtor> TempDebtors { get; set; } = null!;
        public virtual DbSet<TempEarring> TempEarrings { get; set; } = null!;
        public virtual DbSet<TempMiChange> TempMiChanges { get; set; } = null!;
        public virtual DbSet<TempNecklace> TempNecklaces { get; set; } = null!;
        public virtual DbSet<TempNlJournal> TempNlJournals { get; set; } = null!;
        public virtual DbSet<TempProductId> TempProductIds { get; set; } = null!;
        public virtual DbSet<TempRevisedGpDate> TempRevisedGpDates { get; set; } = null!;
        public virtual DbSet<TempRing> TempRings { get; set; } = null!;
        public virtual DbSet<TempWatch> TempWatches { get; set; } = null!;
        public virtual DbSet<TemporaryParameter> TemporaryParameters { get; set; } = null!;
        public virtual DbSet<TemporaryValue> TemporaryValues { get; set; } = null!;
        public virtual DbSet<TescoBordereau> TescoBordereaus { get; set; } = null!;
        public virtual DbSet<Time> Times { get; set; } = null!;
        public virtual DbSet<Title> Titles { get; set; } = null!;
        public virtual DbSet<TqInvoice> TqInvoices { get; set; } = null!;
        public virtual DbSet<TransactionLog> TransactionLogs { get; set; } = null!;
        public virtual DbSet<TransactionLog1> TransactionLogs1 { get; set; } = null!;
        public virtual DbSet<TriageCommodity> TriageCommodities { get; set; } = null!;
        public virtual DbSet<TriageCommodity20191209> TriageCommodity20191209s { get; set; } = null!;
        public virtual DbSet<TriageOutcome> TriageOutcomes { get; set; } = null!;
        public virtual DbSet<TriggeredEvent> TriggeredEvents { get; set; } = null!;
        public virtual DbSet<UnconfirmedInstruction> UnconfirmedInstructions { get; set; } = null!;
        public virtual DbSet<Upc> Upcs { get; set; } = null!;
        public virtual DbSet<UpdateParameter> UpdateParameters { get; set; } = null!;
        public virtual DbSet<Useage> Useages { get; set; } = null!;
        public virtual DbSet<User> Users { get; set; } = null!;
        public virtual DbSet<User1> Users1 { get; set; } = null!;
        public virtual DbSet<User2> Users2 { get; set; } = null!;
        public virtual DbSet<User3> Users3 { get; set; } = null!;
        public virtual DbSet<UserAttendance> UserAttendances { get; set; } = null!;
        public virtual DbSet<UserCommodity> UserCommodities { get; set; } = null!;
        public virtual DbSet<UserComplaintCompensation> UserComplaintCompensations { get; set; } = null!;
        public virtual DbSet<UserCreditRec> UserCreditRecs { get; set; } = null!;
        public virtual DbSet<UserGroup> UserGroups { get; set; } = null!;
        public virtual DbSet<UserGroup1> UserGroups1 { get; set; } = null!;
        public virtual DbSet<UserInsuranceCompany> UserInsuranceCompanies { get; set; } = null!;
        public virtual DbSet<UserInvoiceError> UserInvoiceErrors { get; set; } = null!;
        public virtual DbSet<UserLog> UserLogs { get; set; } = null!;
        public virtual DbSet<UserOnline> UserOnlines { get; set; } = null!;
        public virtual DbSet<UserRole> UserRoles { get; set; } = null!;
        public virtual DbSet<UserRole1> UserRoles1 { get; set; } = null!;
        public virtual DbSet<UserScore> UserScores { get; set; } = null!;
        public virtual DbSet<UserSession> UserSessions { get; set; } = null!;
        public virtual DbSet<UserStatus> UserStatuses { get; set; } = null!;
        public virtual DbSet<UserTimekeeping> UserTimekeepings { get; set; } = null!;
        public virtual DbSet<UserUserGroup> UserUserGroups { get; set; } = null!;
        public virtual DbSet<UtopiaError> UtopiaErrors { get; set; } = null!;
        public virtual DbSet<UtopiaResult> UtopiaResults { get; set; } = null!;
        public virtual DbSet<ValidationClaimItemGemGroup> ValidationClaimItemGemGroups { get; set; } = null!;
        public virtual DbSet<ValidationClaimItemMetal> ValidationClaimItemMetals { get; set; } = null!;
        public virtual DbSet<ValidationClaimItemValue> ValidationClaimItemValues { get; set; } = null!;
        public virtual DbSet<ValidationOutcome> ValidationOutcomes { get; set; } = null!;
        public virtual DbSet<ValidationSavedMatch> ValidationSavedMatches { get; set; } = null!;
        public virtual DbSet<ValidationToolMenu> ValidationToolMenus { get; set; } = null!;
        public virtual DbSet<Value> Values { get; set; } = null!;
        public virtual DbSet<Value1> Values1 { get; set; } = null!;
        public virtual DbSet<Value2> Values2 { get; set; } = null!;
        public virtual DbSet<Value20191209> Value20191209s { get; set; } = null!;
        public virtual DbSet<ValueTemp> ValueTemps { get; set; } = null!;
        public virtual DbSet<Values20140406Err> Values20140406Errs { get; set; } = null!;
        public virtual DbSet<Values20140510Err> Values20140510Errs { get; set; } = null!;
        public virtual DbSet<Values20141702> Values20141702s { get; set; } = null!;
        public virtual DbSet<ValuesAcc> ValuesAccs { get; set; } = null!;
        public virtual DbSet<ValuesAcc1> ValuesAcc1s { get; set; } = null!;
        public virtual DbSet<ValuesAcc20140406Err> ValuesAcc20140406Errs { get; set; } = null!;
        public virtual DbSet<ValuesAcc20140510Err> ValuesAcc20140510Errs { get; set; } = null!;
        public virtual DbSet<ValuesAcc20141702> ValuesAcc20141702s { get; set; } = null!;
        public virtual DbSet<ValuesAccPdh> ValuesAccPdhs { get; set; } = null!;
        public virtual DbSet<ValuesOld> ValuesOlds { get; set; } = null!;
        public virtual DbSet<ValuesPdh> ValuesPdhs { get; set; } = null!;
        public virtual DbSet<VatRate> VatRates { get; set; } = null!;
        public virtual DbSet<VatReturn> VatReturns { get; set; } = null!;
        public virtual DbSet<VatType> VatTypes { get; set; } = null!;
        public virtual DbSet<View1> View1s { get; set; } = null!;
        public virtual DbSet<View11> View1s1 { get; set; } = null!;
        public virtual DbSet<VoucherCode> VoucherCodes { get; set; } = null!;
        public virtual DbSet<VwBiscore> VwBiscores { get; set; } = null!;
        public virtual DbSet<Vwdesccount> Vwdesccounts { get; set; } = null!;
        public virtual DbSet<WClaim> WClaims { get; set; } = null!;
        public virtual DbSet<WClaimAttrib> WClaimAttribs { get; set; } = null!;
        public virtual DbSet<WClaimStatus> WClaimStatuses { get; set; } = null!;
        public virtual DbSet<WClaimStatusHistory> WClaimStatusHistories { get; set; } = null!;
        public virtual DbSet<Warranty> Warranties { get; set; } = null!;
        public virtual DbSet<Weighting> Weightings { get; set; } = null!;
        public virtual DbSet<WheeliesAttributeValue> WheeliesAttributeValues { get; set; } = null!;
        public virtual DbSet<WheeliesDelta> WheeliesDeltas { get; set; } = null!;
        public virtual DbSet<WheeliesDeltas2> WheeliesDeltas2s { get; set; } = null!;
        public virtual DbSet<WheeliesExport> WheeliesExports { get; set; } = null!;
        public virtual DbSet<Wheely> Wheelies { get; set; } = null!;
        public virtual DbSet<Wip> Wips { get; set; } = null!;
        public virtual DbSet<ZStatus> ZStatuses { get; set; } = null!;
        public virtual DbSet<Zz01Issue> Zz01Issues { get; set; } = null!;
        public virtual DbSet<Zzcv1> Zzcv1s { get; set; } = null!;
        public virtual DbSet<_200119product> _200119products { get; set; } = null!;
        public virtual DbSet<_200119supplierProduct> _200119supplierProducts { get; set; } = null!;
        public virtual DbSet<_200119supplierProductProduct> _200119supplierProductProducts { get; set; } = null!;
        public virtual DbSet<_22012020attribute> _22012020attributes { get; set; } = null!;
        public virtual DbSet<_22012020attributeValue> _22012020attributeValues { get; set; } = null!;
        public virtual DbSet<_22012020brand> _22012020brands { get; set; } = null!;
        public virtual DbSet<_22012020familyAttribute> _22012020familyAttributes { get; set; } = null!;
        public virtual DbSet<_22012020supplierProduct> _22012020supplierProducts { get; set; } = null!;
        public virtual DbSet<_22012020supplierProductProduct> _22012020supplierProductProducts { get; set; } = null!;
        public virtual DbSet<_28012020productAttributeValue> _28012020productAttributeValues { get; set; } = null!;
        public virtual DbSet<_29012020family> _29012020families { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=10.10.53.32;Initial Catalog=Claims;Persist Security Info=True;User ID=sbsuser;Password=sbsuser");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ADocTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("a_doc_templates", "MI");

                entity.Property(e => e.TemplateAddress).HasColumnName("templateAddress");

                entity.Property(e => e.TemplateEventId).HasColumnName("templateEventID");

                entity.Property(e => e.TemplateId).HasColumnName("templateID");

                entity.Property(e => e.TemplateLetterhead).HasColumnName("templateLetterhead");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("templateName");

                entity.Property(e => e.TemplateRecipient).HasColumnName("templateRecipient");

                entity.Property(e => e.TemplateStructure).HasColumnName("templateStructure");

                entity.Property(e => e.TemplateText)
                    .HasColumnType("ntext")
                    .HasColumnName("templateText");
            });

            modelBuilder.Entity<ADocTemplate1>(entity =>
            {
                entity.HasKey(e => e.TemplateId);

                entity.ToTable("a_doc_templates", "Site");

                entity.Property(e => e.TemplateId).HasColumnName("templateID");

                entity.Property(e => e.FirstContact).HasColumnName("firstContact");

                entity.Property(e => e.TemplateAddress).HasColumnName("templateAddress");

                entity.Property(e => e.TemplateBottomMargin)
                    .HasColumnName("templateBottomMargin")
                    .HasDefaultValueSql("((50))");

                entity.Property(e => e.TemplateEventId).HasColumnName("templateEventID");

                entity.Property(e => e.TemplateLetterhead).HasColumnName("templateLetterhead");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("templateName");

                entity.Property(e => e.TemplateRecipient).HasColumnName("templateRecipient");

                entity.Property(e => e.TemplateStructure).HasColumnName("templateStructure");

                entity.Property(e => e.TemplateText)
                    .HasColumnType("ntext")
                    .HasColumnName("templateText");

                entity.Property(e => e.TriggeredActionId).HasColumnName("triggeredActionID");
            });

            modelBuilder.Entity<ADocTemplatesBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("a_doc_templates_backup", "Site");

                entity.Property(e => e.FirstContact).HasColumnName("firstContact");

                entity.Property(e => e.TemplateAddress).HasColumnName("templateAddress");

                entity.Property(e => e.TemplateBottomMargin).HasColumnName("templateBottomMargin");

                entity.Property(e => e.TemplateEventId).HasColumnName("templateEventID");

                entity.Property(e => e.TemplateId).HasColumnName("templateID");

                entity.Property(e => e.TemplateLetterhead).HasColumnName("templateLetterhead");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("templateName");

                entity.Property(e => e.TemplateRecipient).HasColumnName("templateRecipient");

                entity.Property(e => e.TemplateStructure).HasColumnName("templateStructure");

                entity.Property(e => e.TemplateText)
                    .HasColumnType("ntext")
                    .HasColumnName("templateText");

                entity.Property(e => e.TriggeredActionId).HasColumnName("triggeredActionID");
            });

            modelBuilder.Entity<APotentialIssue>(entity =>
            {
                entity.HasKey(e => e.PotentialIssueId);

                entity.ToTable("a_PotentialIssue", "Site");

                entity.Property(e => e.PotentialIssueId).HasColumnName("PotentialIssueID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<APotentialIssueType>(entity =>
            {
                entity.HasKey(e => e.PotentialIssueTypeId);

                entity.ToTable("a_PotentialIssueType", "Site");

                entity.Property(e => e.PotentialIssueTypeId).HasColumnName("PotentialIssueTypeID");

                entity.Property(e => e.PotentialIssueTypeName).HasMaxLength(300);
            });

            modelBuilder.Entity<AboutToGoLiveClaimOutcomesJan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aboutToGoLiveClaimOutcomesJan");

                entity.Property(e => e.ClaimId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("claim_id");

                entity.Property(e => e.Outcome)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Access>(entity =>
            {
                entity.ToTable("Access", "Validation");

                entity.Property(e => e.AccessId).HasColumnName("AccessID");

                entity.Property(e => e.DateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dns)
                    .HasMaxLength(50)
                    .HasColumnName("DNS");

                entity.Property(e => e.Ip)
                    .HasMaxLength(50)
                    .HasColumnName("IP");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("Account", "Validation");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.AccountMailAddress).HasMaxLength(50);

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.AllowedIp)
                    .HasMaxLength(50)
                    .HasColumnName("AllowedIP");

                entity.Property(e => e.AllowedIp2)
                    .HasMaxLength(50)
                    .HasColumnName("AllowedIP2");

                entity.Property(e => e.AllowedIp3)
                    .HasMaxLength(50)
                    .HasColumnName("AllowedIP3");

                entity.Property(e => e.AllowedIp4)
                    .HasMaxLength(50)
                    .HasColumnName("AllowedIP4");

                entity.Property(e => e.AuthLimit).HasColumnType("money");

                entity.Property(e => e.ConfirmationMailAddress).HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .HasMaxLength(200)
                    .HasColumnName("GUID");

                entity.Property(e => e.HasDynamicAssessment).HasDefaultValueSql("((0))");

                entity.Property(e => e.HasInstructionPortal)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HasValidationPortal)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.ShowL4lfirst).HasColumnName("ShowL4LFirst");
            });

            modelBuilder.Entity<AccountAcustomisation>(entity =>
            {
                entity.ToTable("Account_ACustomisation", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FilterType)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'None')");
            });

            modelBuilder.Entity<AccountShownCommodity>(entity =>
            {
                entity.ToTable("AccountShownCommodities", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.CommodityId).HasColumnName("CommodityID");
            });

            modelBuilder.Entity<AccountVcustomisation>(entity =>
            {
                entity.ToTable("Account_VCustomisation", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<AccountsAvivainvoicesQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Accounts.AVIVAInvoicesQueue");
            });

            modelBuilder.Entity<Accrued>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Accrued", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Accrued20140406Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Accrued_20140406_err", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Accrued20140510Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Accrued_20140510_err", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Accrued20141702>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Accrued_20141702", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<AccruedPdh>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Accrued_Pdh", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<AccruedTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Accrued_temp", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Action>(entity =>
            {
                entity.ToTable("Action", "Claim");

                entity.HasIndex(e => e.Id, "_dta_index_Action_9_1988918157__K1");

                entity.HasIndex(e => e.Id, "_dta_index_Action_9_1988918157__K1_3");

                entity.HasIndex(e => new { e.Id, e.Name }, "_dta_index_Action_9_1988918157__K1_K2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllianzAlias).HasMaxLength(200);

                entity.Property(e => e.ClaimLevel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 = Claim Level, 0 = Claim Item Level");

                entity.Property(e => e.CreatesTask)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Darequired).HasColumnName("DArequired");

                entity.Property(e => e.Deadline).HasDefaultValueSql("((1))");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.EmailTemplate).HasColumnType("ntext");

                entity.Property(e => e.ItemComplete).HasComment("No further actions for this item.");

                entity.Property(e => e.Laalias)
                    .HasMaxLength(200)
                    .HasColumnName("LAAlias");

                entity.Property(e => e.LarouteName)
                    .HasMaxLength(200)
                    .HasColumnName("LARouteName");

                entity.Property(e => e.LloydsAlias).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.PreRequisiteActionId).HasColumnName("PreRequisiteActionID");

                entity.Property(e => e.TreeId).HasColumnName("TreeID");

                entity.Property(e => e.UserControl)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'UserPrompt')");
            });

            modelBuilder.Entity<Action1>(entity =>
            {
                entity.ToTable("Action", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<ActionHistory>(entity =>
            {
                entity.ToTable("ActionHistory", "Claim");

                entity.HasIndex(e => new { e.ActionId, e.InsuranceClaimId }, "_dta_index_ActionHistory_16_7671075__K4_K2_3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.OutcomeOptionsId).HasColumnName("OutcomeOptionsID");

                entity.Property(e => e.User).HasMaxLength(50);

                entity.Property(e => e.UserControlContextId).HasColumnName("UserControlContextID");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ActionHistories)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionHistory_Action");

                entity.HasOne(d => d.InsuranceClaim)
                    .WithMany(p => p.ActionHistories)
                    .HasForeignKey(d => d.InsuranceClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionHistory_InsuranceClaim");

                entity.HasOne(d => d.OutcomeOptions)
                    .WithMany(p => p.ActionHistories)
                    .HasForeignKey(d => d.OutcomeOptionsId)
                    .HasConstraintName("FK_ActionHistory_ClaimActionOutcomes");
            });

            modelBuilder.Entity<ActionHistory1>(entity =>
            {
                entity.ToTable("ActionHistory", "Inspection");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            });

            modelBuilder.Entity<ActionInsuranceCompanySpecific>(entity =>
            {
                entity.ToTable("ActionInsuranceCompanySpecific", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ActionInsuranceCompanySpecifics)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionInsuranceCompanySpecific_Action");

                entity.HasOne(d => d.InsuranceCompany)
                    .WithMany(p => p.ActionInsuranceCompanySpecifics)
                    .HasForeignKey(d => d.InsuranceCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionInsuranceCompanySpecific_InsuranceCompany");
            });

            modelBuilder.Entity<ActionProfile>(entity =>
            {
                entity.ToTable("ActionProfile", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ActionProfiles)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionProfile_Action1");

                entity.HasOne(d => d.InsuranceCompany)
                    .WithMany(p => p.ActionProfiles)
                    .HasForeignKey(d => d.InsuranceCompanyId)
                    .HasConstraintName("FK_ActionProfile_InsuranceCompany1");
            });

            modelBuilder.Entity<ActionProfileDetail>(entity =>
            {
                entity.ToTable("ActionProfileDetails", "Claim");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Operation)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ProfileId).HasColumnName("ProfileID");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.HasOne(d => d.Parameter)
                    .WithMany(p => p.ActionProfileDetails)
                    .HasForeignKey(d => d.ParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionProfileDetails_Parameter");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.ActionProfileDetails)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_ActionProfileDetails_ActionProfile");

                entity.HasOne(d => d.ValueNavigation)
                    .WithMany(p => p.ActionProfileDetails)
                    .HasForeignKey(d => d.ValueId)
                    .HasConstraintName("FK_ActionProfileDetails_Value");
            });

            modelBuilder.Entity<ActionScope>(entity =>
            {
                entity.ToTable("ActionScope", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.CommodityId).HasColumnName("CommodityID");

                entity.Property(e => e.FaultTypeId).HasColumnName("FaultTypeID");
            });

            modelBuilder.Entity<ActionTree>(entity =>
            {
                entity.ToTable("ActionTree", "Claim");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<ActionTreeCommodity>(entity =>
            {
                entity.ToTable("ActionTreeCommodities", "Claim");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActionTreeId).HasColumnName("ActionTreeID");

                entity.Property(e => e.Fnolvalueid).HasColumnName("FNOLValueid");

                entity.HasOne(d => d.ActionTree)
                    .WithMany(p => p.ActionTreeCommodities)
                    .HasForeignKey(d => d.ActionTreeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionTreeCommodities_ActionTree");
            });

            modelBuilder.Entity<AdmiralCode>(entity =>
            {
                entity.HasKey(e => e.AcId);

                entity.ToTable("Admiral_Codes", "Accounts");

                entity.Property(e => e.AcId).HasColumnName("ac_id");

                entity.Property(e => e.Code)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.FnolValue).HasColumnName("fnol_value");
            });

            modelBuilder.Entity<AgeasBordereau>(entity =>
            {
                entity.HasKey(e => e.AbId);

                entity.ToTable("Ageas_Bordereau", "Accounts");

                entity.Property(e => e.AbId).HasColumnName("ab_id");

                entity.Property(e => e.AbBcId).HasColumnName("ab_bc_id");

                entity.Property(e => e.AbGross)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("ab_gross");

                entity.Property(e => e.AbSidId).HasColumnName("ab_sid_id");

                entity.Property(e => e.AbSimId).HasColumnName("ab_sim_id");
            });

            modelBuilder.Entity<AgeasName>(entity =>
            {
                entity.HasKey(e => e.AgNameId)
                    .HasName("AgeasName_pk")
                    .IsClustered(false);

                entity.ToTable("AgeasName", "FNOL");

                entity.Property(e => e.AgNameId).HasColumnName("ag_name_id");

                entity.Property(e => e.AgeasName1)
                    .HasMaxLength(255)
                    .HasColumnName("ageas_name_1");

                entity.Property(e => e.AgeasName2)
                    .HasMaxLength(255)
                    .HasColumnName("ageas_name_2");

                entity.Property(e => e.AgeasName3)
                    .HasMaxLength(255)
                    .HasColumnName("ageas_name_3");

                entity.Property(e => e.ValName)
                    .HasMaxLength(75)
                    .HasColumnName("val_name");
            });

            modelBuilder.Entity<Agent>(entity =>
            {
                entity.ToTable("Agent", "Inspection");

                entity.Property(e => e.AgentId).HasColumnName("AgentID");

                entity.Property(e => e.AgentName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Login).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);
            });

            modelBuilder.Entity<AllBikes3>(entity =>
            {
                entity.ToTable("all-bikes3");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Age).HasMaxLength(255);

                entity.Property(e => e.Brand).HasMaxLength(255);

                entity.Property(e => e.Chainrings).HasMaxLength(255);

                entity.Property(e => e.Chainset).HasMaxLength(255);

                entity.Property(e => e.CleanSpecBrakeset)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Brakeset");

                entity.Property(e => e.CleanSpecCassette)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Cassette");

                entity.Property(e => e.CleanSpecChainset)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Chainset");

                entity.Property(e => e.CleanSpecFrontDerailleur)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Front Derailleur");

                entity.Property(e => e.CleanSpecFrontFork)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Front Fork");

                entity.Property(e => e.CleanSpecRearDerailleur)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Rear Derailleur");

                entity.Property(e => e.CleanSpecRearShock)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Rear Shock");

                entity.Property(e => e.CleanSpecShifters)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Shifters");

                entity.Property(e => e.CleanSpecWheels)
                    .HasMaxLength(255)
                    .HasColumnName("CleanSpec__Wheels");

                entity.Property(e => e.Colours).HasMaxLength(255);

                entity.Property(e => e.Family).HasMaxLength(255);

                entity.Property(e => e.ForkTravel).HasMaxLength(255);

                entity.Property(e => e.FrameMaterial).HasMaxLength(255);

                entity.Property(e => e.FrameMaterialClean).HasMaxLength(255);

                entity.Property(e => e.FrameType).HasMaxLength(255);

                entity.Property(e => e.Gears).HasMaxLength(255);

                entity.Property(e => e.Gender).HasMaxLength(255);

                entity.Property(e => e.Geometry).HasMaxLength(255);

                entity.Property(e => e.GeometryHeadAngle)
                    .HasMaxLength(255)
                    .HasColumnName("Geometry____headAngle");

                entity.Property(e => e.GeometryReach)
                    .HasMaxLength(255)
                    .HasColumnName("Geometry____reach");

                entity.Property(e => e.GeometrySeatAngle)
                    .HasMaxLength(255)
                    .HasColumnName("Geometry____seatAngle");

                entity.Property(e => e.GeometrySize)
                    .HasMaxLength(255)
                    .HasColumnName("Geometry____size");

                entity.Property(e => e.GeometryStack)
                    .HasMaxLength(255)
                    .HasColumnName("Geometry____stack");

                entity.Property(e => e.ImagePath).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.NameWithYear).HasMaxLength(255);

                entity.Property(e => e.OriginalSpecsAdjustableBottomBracketHeight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Adjustable Bottom Bracket Height");

                entity.Property(e => e.OriginalSpecsAdjustableHeadAngle)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Adjustable Head Angle");

                entity.Property(e => e.OriginalSpecsAerobar)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Aerobar");

                entity.Property(e => e.OriginalSpecsAlsoAvailableWithCompactCrank)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Also available with Compact Crank");

                entity.Property(e => e.OriginalSpecsAlternativeCrankOption)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Alternative Crank Option");

                entity.Property(e => e.OriginalSpecsAxleSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Axle Size");

                entity.Property(e => e.OriginalSpecsBackPedalBrake)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Back pedal brake");

                entity.Property(e => e.OriginalSpecsBarEnds)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bar Ends");

                entity.Property(e => e.OriginalSpecsBarPads)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bar Pads");

                entity.Property(e => e.OriginalSpecsBasket)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Basket");

                entity.Property(e => e.OriginalSpecsBattery)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Battery");

                entity.Property(e => e.OriginalSpecsBatteryCapacity)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Battery Capacity");

                entity.Property(e => e.OriginalSpecsBatteryLockingSystem)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Battery locking system");

                entity.Property(e => e.OriginalSpecsBell)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bell");

                entity.Property(e => e.OriginalSpecsBelt)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Belt");

                entity.Property(e => e.OriginalSpecsBottleCage)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bottle Cage");

                entity.Property(e => e.OriginalSpecsBottleCageBosses)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bottle cage bosses");

                entity.Property(e => e.OriginalSpecsBottomBracket)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bottom Bracket");

                entity.Property(e => e.OriginalSpecsBottomBracketDropHeight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bottom Bracket Drop / Height");

                entity.Property(e => e.OriginalSpecsBottomBracketShellDiameter)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bottom Bracket Shell Diameter");

                entity.Property(e => e.OriginalSpecsBottomBracketSpindleLength)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bottom Bracket Spindle length");

                entity.Property(e => e.OriginalSpecsBottomBracketType)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Bottom Bracket Type");

                entity.Property(e => e.OriginalSpecsBrakeCableHousing)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Cable & Housing");

                entity.Property(e => e.OriginalSpecsBrakeCaliperFront)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Caliper Front");

                entity.Property(e => e.OriginalSpecsBrakeCaliperRear)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Caliper Rear");

                entity.Property(e => e.OriginalSpecsBrakeCalipers)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Calipers");

                entity.Property(e => e.OriginalSpecsBrakeLeverFront)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Lever Front");

                entity.Property(e => e.OriginalSpecsBrakeLeverRear)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Lever Rear");

                entity.Property(e => e.OriginalSpecsBrakeLevers)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Levers");

                entity.Property(e => e.OriginalSpecsBrakeRotor)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Rotor");

                entity.Property(e => e.OriginalSpecsBrakeType)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brake Type");

                entity.Property(e => e.OriginalSpecsBrakeset)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Brakeset");

                entity.Property(e => e.OriginalSpecsBrazeOnFittings)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Braze-on fittings");

                entity.Property(e => e.OriginalSpecsCableRouting)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Cable Routing");

                entity.Property(e => e.OriginalSpecsCablesAndHousing)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Cables and Housing");

                entity.Property(e => e.OriginalSpecsCassetteRange)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Cassette Range");

                entity.Property(e => e.OriginalSpecsCassetteRearCogs)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Cassette (Rear Cogs)");

                entity.Property(e => e.OriginalSpecsChain)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Chain");

                entity.Property(e => e.OriginalSpecsChainGuideGuard)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Chain Guide / Guard");

                entity.Property(e => e.OriginalSpecsChainTensioner)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Chain Tensioner");

                entity.Property(e => e.OriginalSpecsChainringS)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Chainring(s)");

                entity.Property(e => e.OriginalSpecsChainsetType)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Chainset Type");

                entity.Property(e => e.OriginalSpecsChainstayProtection)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Chainstay protection");

                entity.Property(e => e.OriginalSpecsChargeTime)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Charge Time");

                entity.Property(e => e.OriginalSpecsCharger)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Charger");

                entity.Property(e => e.OriginalSpecsClipSystem)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Clip System");

                entity.Property(e => e.OriginalSpecsCoatProtector)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Coat protector");

                entity.Property(e => e.OriginalSpecsComponents)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Components");

                entity.Property(e => e.OriginalSpecsControls)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Controls");

                entity.Property(e => e.OriginalSpecsCrank)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Crank");

                entity.Property(e => e.OriginalSpecsCrankChainringRecommended)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Crank / Chainring Recommended");

                entity.Property(e => e.OriginalSpecsCrankLength)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Crank Length");

                entity.Property(e => e.OriginalSpecsCrosstopLevers)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Crosstop Levers");

                entity.Property(e => e.OriginalSpecsDerailleurClampSizeFront)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Derailleur Clamp Size Front");

                entity.Property(e => e.OriginalSpecsDerailleurFront)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Derailleur Front");

                entity.Property(e => e.OriginalSpecsDerailleurFrontCableRouteType)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Derailleur Front cable route / type");

                entity.Property(e => e.OriginalSpecsDerailleurFrontMount)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Derailleur Front Mount");

                entity.Property(e => e.OriginalSpecsDerailleurRear)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Derailleur Rear");

                entity.Property(e => e.OriginalSpecsDetanglerGyro)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Detangler / Gyro");

                entity.Property(e => e.OriginalSpecsDigitalBatteryCharger)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Digital Battery Charger");

                entity.Property(e => e.OriginalSpecsDiscReadyFrame)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Disc Ready Frame");

                entity.Property(e => e.OriginalSpecsDiscReadyHubs)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Disc Ready hubs");

                entity.Property(e => e.OriginalSpecsDisplay)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Display");

                entity.Property(e => e.OriginalSpecsDistanceFromSaddleToPedal)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Distance from Saddle to Pedal");

                entity.Property(e => e.OriginalSpecsDistanceFromSeatpostToHandlebar)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Distance from Seatpost to Handlebar");

                entity.Property(e => e.OriginalSpecsDownTube)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Down Tube");

                entity.Property(e => e.OriginalSpecsDrivetrain)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Drivetrain");

                entity.Property(e => e.OriginalSpecsDropout)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Dropout");

                entity.Property(e => e.OriginalSpecsDropoutSensor)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Dropout Sensor");

                entity.Property(e => e.OriginalSpecsDynamo)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Dynamo");

                entity.Property(e => e.OriginalSpecsEngineMotorController)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Engine / Motor controller");

                entity.Property(e => e.OriginalSpecsExtras)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Extras");

                entity.Property(e => e.OriginalSpecsFenderEyelet)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Fender eyelet");

                entity.Property(e => e.OriginalSpecsFinishingKit)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Finishing kit");

                entity.Property(e => e.OriginalSpecsFloatingRearDisc)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Floating Rear Disc");

                entity.Property(e => e.OriginalSpecsFoldedSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Folded size");

                entity.Property(e => e.OriginalSpecsFoldingTime)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Folding Time");

                entity.Property(e => e.OriginalSpecsForkLockOut)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Fork Lock-out ");

                entity.Property(e => e.OriginalSpecsForkMaterial)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Fork Material");

                entity.Property(e => e.OriginalSpecsForkTravel)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Fork Travel");

                entity.Property(e => e.OriginalSpecsForkWeight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Fork Weight");

                entity.Property(e => e.OriginalSpecsForks)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Forks");

                entity.Property(e => e.OriginalSpecsForksAdjustableDamping)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Forks - Adjustable damping ");

                entity.Property(e => e.OriginalSpecsFrameCertification)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Frame Certification");

                entity.Property(e => e.OriginalSpecsFrameConstruction)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Frame construction");

                entity.Property(e => e.OriginalSpecsFrameFit)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Frame fit");

                entity.Property(e => e.OriginalSpecsFrameLock)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Frame Lock");

                entity.Property(e => e.OriginalSpecsFrameProtection)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Frame Protection");

                entity.Property(e => e.OriginalSpecsFramesetAvailable)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Frameset available");

                entity.Property(e => e.OriginalSpecsFreehubWidthRearWheel)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Freehub width (Rear Wheel)");

                entity.Property(e => e.OriginalSpecsFreewheel)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Freewheel");

                entity.Property(e => e.OriginalSpecsFrontAxleType)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Front Axle Type");

                entity.Property(e => e.OriginalSpecsFrontBrakeRotor)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Front Brake Rotor");

                entity.Property(e => e.OriginalSpecsFrontLight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Front Light");

                entity.Property(e => e.OriginalSpecsFrontRim)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Front Rim");

                entity.Property(e => e.OriginalSpecsFrontSuspension)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Front suspension");

                entity.Property(e => e.OriginalSpecsGearInches)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Gear Inches");

                entity.Property(e => e.OriginalSpecsGearRatio)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Gear ratio");

                entity.Property(e => e.OriginalSpecsGears).HasColumnName("OriginalSpecs__Gears");

                entity.Property(e => e.OriginalSpecsGearset)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Gearset");

                entity.Property(e => e.OriginalSpecsGeometry)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Geometry");

                entity.Property(e => e.OriginalSpecsGradientCapability)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Gradient Capability");

                entity.Property(e => e.OriginalSpecsGrips)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Grips");

                entity.Property(e => e.OriginalSpecsHandlePost)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Handle Post");

                entity.Property(e => e.OriginalSpecsHandlebar)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Handlebar");

                entity.Property(e => e.OriginalSpecsHandlebarQuickRelease)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Handlebar Quick Release");

                entity.Property(e => e.OriginalSpecsHeadTube)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Head Tube");

                entity.Property(e => e.OriginalSpecsHeadset)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Headset");

                entity.Property(e => e.OriginalSpecsHeadsetSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Headset Size");

                entity.Property(e => e.OriginalSpecsHeadsetSpacers)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Headset Spacers");

                entity.Property(e => e.OriginalSpecsHeadtubeAngle)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Headtube Angle");

                entity.Property(e => e.OriginalSpecsHubFront)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Hub Front");

                entity.Property(e => e.OriginalSpecsHubRear)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Hub Rear");

                entity.Property(e => e.OriginalSpecsHubs)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Hubs");

                entity.Property(e => e.OriginalSpecsHydraulicDiscBrakes)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Hydraulic Disc Brakes");

                entity.Property(e => e.OriginalSpecsHydraulicRimBrakes)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Hydraulic Rim Brakes");

                entity.Property(e => e.OriginalSpecsInnerTubes)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Inner Tubes");

                entity.Property(e => e.OriginalSpecsInsideLegLegSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Inside leg / Leg size");

                entity.Property(e => e.OriginalSpecsIscgCompatibleFrame)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__ISCG Compatible Frame");

                entity.Property(e => e.OriginalSpecsKickstand)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Kickstand");

                entity.Property(e => e.OriginalSpecsLeverSensor)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Lever Sensor");

                entity.Property(e => e.OriginalSpecsLights)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Lights");

                entity.Property(e => e.OriginalSpecsLock)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Lock");

                entity.Property(e => e.OriginalSpecsLuggageBracket)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Luggage Bracket");

                entity.Property(e => e.OriginalSpecsMaxChainringSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Max Chainring Size");

                entity.Property(e => e.OriginalSpecsMaxRiderWeight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Max Rider Weight");

                entity.Property(e => e.OriginalSpecsMaxRotorSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Max Rotor Size");

                entity.Property(e => e.OriginalSpecsMaxSpeed)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Max Speed");

                entity.Property(e => e.OriginalSpecsMechanicalDiscBrakes)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Mechanical Disc Brakes");

                entity.Property(e => e.OriginalSpecsMechanicalRimBrakes)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Mechanical Rim Brakes");

                entity.Property(e => e.OriginalSpecsModuleWeight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Module Weight");

                entity.Property(e => e.OriginalSpecsMotor)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Motor");

                entity.Property(e => e.OriginalSpecsMotorLocation)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Motor Location");

                entity.Property(e => e.OriginalSpecsMotorSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Motor Size");

                entity.Property(e => e.OriginalSpecsMudguardFenderMountRear)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Mudguard / Fender Mount Rear");

                entity.Property(e => e.OriginalSpecsMudguardsFenders)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Mudguards / Fenders");

                entity.Property(e => e.OriginalSpecsNipples)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Nipples");

                entity.Property(e => e.OriginalSpecsNotes)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Notes");

                entity.Property(e => e.OriginalSpecsOptions)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Options");

                entity.Property(e => e.OriginalSpecsPartNumber)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Part Number");

                entity.Property(e => e.OriginalSpecsPedalThread)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Pedal Thread");

                entity.Property(e => e.OriginalSpecsPedals)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Pedals");

                entity.Property(e => e.OriginalSpecsPowerOutput)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Power Output");

                entity.Property(e => e.OriginalSpecsQuickRelease)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Quick Release");

                entity.Property(e => e.OriginalSpecsQuickReleaseFrontWheel)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Quick Release Front Wheel");

                entity.Property(e => e.OriginalSpecsQuickReleaseRearWheel)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Quick Release Rear Wheel");

                entity.Property(e => e.OriginalSpecsRackPannierCarrier)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rack / Pannier carrier");

                entity.Property(e => e.OriginalSpecsRange)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Range");

                entity.Property(e => e.OriginalSpecsRearBrakeRotor)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Brake Rotor");

                entity.Property(e => e.OriginalSpecsRearDropoutWidth)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Dropout Width");

                entity.Property(e => e.OriginalSpecsRearLight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Light");

                entity.Property(e => e.OriginalSpecsRearRackEyelet)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Rack Eyelet");

                entity.Property(e => e.OriginalSpecsRearRim)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Rim");

                entity.Property(e => e.OriginalSpecsRearShock)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Shock");

                entity.Property(e => e.OriginalSpecsRearShockAdjustableDamping)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Shock Adjustable Damping");

                entity.Property(e => e.OriginalSpecsRearShockLockOut)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Shock Lock-out ");

                entity.Property(e => e.OriginalSpecsRearShockProtector)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Shock Protector");

                entity.Property(e => e.OriginalSpecsRearShockSizeEyeToEye)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear shock Size (Eye to eye)");

                entity.Property(e => e.OriginalSpecsRearShockSpringOptions)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Shock Spring Options");

                entity.Property(e => e.OriginalSpecsRearShockStroke)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Shock Stroke");

                entity.Property(e => e.OriginalSpecsRearSpacingFrame)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Spacing (Frame)");

                entity.Property(e => e.OriginalSpecsRearStays)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Stays");

                entity.Property(e => e.OriginalSpecsRearSuspension)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear suspension");

                entity.Property(e => e.OriginalSpecsRearSuspensionDesign)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Suspension Design");

                entity.Property(e => e.OriginalSpecsRearTravel)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear Travel");

                entity.Property(e => e.OriginalSpecsRearViewMirror)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rear View Mirror");

                entity.Property(e => e.OriginalSpecsRemoteSuspensionSystem)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Remote Suspension System");

                entity.Property(e => e.OriginalSpecsReplaceableDerailleurHanger)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Replaceable Derailleur Hanger");

                entity.Property(e => e.OriginalSpecsRigidForks)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rigid Forks");

                entity.Property(e => e.OriginalSpecsRimHoles).HasColumnName("OriginalSpecs__Rim Holes");

                entity.Property(e => e.OriginalSpecsRimTape)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rim Tape");

                entity.Property(e => e.OriginalSpecsRims)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Rims");

                entity.Property(e => e.OriginalSpecsSaddle)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Saddle");

                entity.Property(e => e.OriginalSpecsSeatPost)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Seat Post");

                entity.Property(e => e.OriginalSpecsSeatReleaseCollar)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Seat Release / Collar");

                entity.Property(e => e.OriginalSpecsSeatReleaseCollarDiameter)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Seat Release / Collar Diameter");

                entity.Property(e => e.OriginalSpecsSeatTubeAngle)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Seat Tube Angle");

                entity.Property(e => e.OriginalSpecsSeatpostDiameter)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Seatpost Diameter");

                entity.Property(e => e.OriginalSpecsSeatpostLength)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Seatpost Length");

                entity.Property(e => e.OriginalSpecsShifterFrontDerailleur)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Shifter Front Derailleur");

                entity.Property(e => e.OriginalSpecsShifterRearDerailleur)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Shifter Rear Derailleur");

                entity.Property(e => e.OriginalSpecsShifterS)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Shifter(s)");

                entity.Property(e => e.OriginalSpecsShockBushingsAndSpacers)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Shock Bushings and Spacers");

                entity.Property(e => e.OriginalSpecsSpokes)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Spokes");

                entity.Property(e => e.OriginalSpecsStabilisers)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Stabilisers");

                entity.Property(e => e.OriginalSpecsStandOverHeight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Stand Over Height");

                entity.Property(e => e.OriginalSpecsSteererSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Steerer Size");

                entity.Property(e => e.OriginalSpecsStem)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Stem");

                entity.Property(e => e.OriginalSpecsStuntPegs)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Stunt Pegs");

                entity.Property(e => e.OriginalSpecsSuggestedForkTravel)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Suggested Fork Travel");

                entity.Property(e => e.OriginalSpecsSuggestedRiderHeight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Suggested rider height");

                entity.Property(e => e.OriginalSpecsSwingarm)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Swingarm");

                entity.Property(e => e.OriginalSpecsTape)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Tape");

                entity.Property(e => e.OriginalSpecsTechnologies)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Technologies");

                entity.Property(e => e.OriginalSpecsThoughAxleRear)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Though Axle Rear");

                entity.Property(e => e.OriginalSpecsThroughAxleFront)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Through Axle Front");

                entity.Property(e => e.OriginalSpecsTireFront)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Tire Front");

                entity.Property(e => e.OriginalSpecsTireRear)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Tire Rear");

                entity.Property(e => e.OriginalSpecsTopTube)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Top Tube");

                entity.Property(e => e.OriginalSpecsTopTubeLength)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Top Tube Length");

                entity.Property(e => e.OriginalSpecsTraditionalMudguardMounts)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Traditional Mudguard Mounts");

                entity.Property(e => e.OriginalSpecsTransmission)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Transmission");

                entity.Property(e => e.OriginalSpecsTyreClearanceMax)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Tyre Clearance (MAX)");

                entity.Property(e => e.OriginalSpecsTyreSize)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Tyre Size");

                entity.Property(e => e.OriginalSpecsTyresFrontBack)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Tyres (Front & Back)");

                entity.Property(e => e.OriginalSpecsUpgrades)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Upgrades");

                entity.Property(e => e.OriginalSpecsUse)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Use");

                entity.Property(e => e.OriginalSpecsWaterBottle)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Water Bottle");

                entity.Property(e => e.OriginalSpecsWaterBottleBolt)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Water Bottle Bolt");

                entity.Property(e => e.OriginalSpecsWeight)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Weight");

                entity.Property(e => e.OriginalSpecsWeightLbs)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Weight (lbs)");

                entity.Property(e => e.OriginalSpecsWheelFront)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Wheel Front");

                entity.Property(e => e.OriginalSpecsWheelRear)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Wheel Rear");

                entity.Property(e => e.OriginalSpecsWheelSet)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Wheel Set");

                entity.Property(e => e.OriginalSpecsWheelSize).HasColumnName("OriginalSpecs__Wheel Size");

                entity.Property(e => e.OriginalSpecsWheels)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Wheels");

                entity.Property(e => e.OriginalSpecsWiring)
                    .HasMaxLength(255)
                    .HasColumnName("OriginalSpecs__Wiring");

                entity.Property(e => e.RangeName).HasMaxLength(255);

                entity.Property(e => e.Sizes).HasMaxLength(255);

                entity.Property(e => e.WheelSize).HasMaxLength(255);
            });

            modelBuilder.Entity<AllianzAssignment>(entity =>
            {
                entity.ToTable("AllianzAssignments", "Supplier");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AllianzClaimId)
                    .HasMaxLength(50)
                    .HasColumnName("AllianzClaimID");

                entity.Property(e => e.AssignmentId)
                    .HasMaxLength(30)
                    .HasColumnName("AssignmentID");

                entity.Property(e => e.AssignmentNumber).HasMaxLength(30);

                entity.Property(e => e.CoverageAmount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DeviceId)
                    .HasMaxLength(10)
                    .HasColumnName("DeviceID")
                    .IsFixedLength();

                entity.Property(e => e.ServiceProviderId)
                    .HasMaxLength(30)
                    .HasColumnName("ServiceProviderID");

                entity.Property(e => e.Status).HasMaxLength(20);
            });

            modelBuilder.Entity<AllianzBorderauPaymentsDue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Allianz Borderau Payments Due", "Accounts");

                entity.Property(e => e.AmountStillOutstanding).HasColumnName("Amount still outstanding");

                entity.Property(e => e.BettermentAmount).HasColumnName("Betterment amount");

                entity.Property(e => e.ClaimDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Claim date");

                entity.Property(e => e.Comments).HasMaxLength(255);

                entity.Property(e => e.ElectricalPhotographic).HasColumnName("Electrical & Photographic");

                entity.Property(e => e.FireRestorationExclLaundry).HasColumnName("Fire restoration excl laundry");

                entity.Property(e => e.FloodRestorationExclLaundry).HasColumnName("Flood restoration excl laundry");

                entity.Property(e => e.FloorCoverings).HasColumnName("Floor coverings");

                entity.Property(e => e.FrameRepair).HasColumnName("Frame Repair");

                entity.Property(e => e.FrameReplacement).HasColumnName("Frame Replacement");

                entity.Property(e => e.GarageDoors).HasColumnName("Garage doors");

                entity.Property(e => e.InsuredAddressInclPostcode)
                    .HasMaxLength(255)
                    .HasColumnName("Insured address incl postcode");

                entity.Property(e => e.InsuredName)
                    .HasMaxLength(255)
                    .HasColumnName("Insured name");

                entity.Property(e => e.InsurerClaimRef).HasColumnName("Insurer Claim ref");

                entity.Property(e => e.InsurerIECornhillDirectAllianzCornhillOrBritannic)
                    .HasMaxLength(255)
                    .HasColumnName("Insurer i#e Cornhill Direct, Allianz Cornhill or Britannic");

                entity.Property(e => e.InsurerIECornhillDirectAllianzCornhillOrBritannicNo)
                    .HasMaxLength(255)
                    .HasColumnName("Insurer i#e Cornhill Direct, Allianz Cornhill or Britannic  (No ");

                entity.Property(e => e.InterimFinalSupplementaryFinalOrRepudiation)
                    .HasMaxLength(255)
                    .HasColumnName("Interim, Final, Supplementary Final or repudiation");

                entity.Property(e => e.InvoiceNumber).HasColumnName("Invoice number");

                entity.Property(e => e.JewelleryHnwOrAsian).HasColumnName("Jewellery HNW or Asian");

                entity.Property(e => e.LocksSecuring).HasColumnName("Locks / securing");

                entity.Property(e => e.MusicalInstruments).HasColumnName("Musical instruments");

                entity.Property(e => e.OriginalInvoiceAmountInclFees).HasColumnName("Original Invoice amount (incl fees)");

                entity.Property(e => e.OtherWorks).HasColumnName("Other Works");

                entity.Property(e => e.SbsRef).HasColumnName("SBS Ref");

                entity.Property(e => e.TotalThisNeedToBeCompletedButIsTheSameAsTotalToBe).HasColumnName("Total (This need to be completed but is the same as total to be ");

                entity.Property(e => e.TotalToBePaidNetOfExcess).HasColumnName("Total to be paid net of excess");

                entity.Property(e => e.ValidationFees).HasColumnName("Validation Fees");

                entity.Property(e => e.XSAmount).HasColumnName("X/s amount");

                entity.Property(e => e.XSCollectedYNNoNeedToCompleteThisColumnJustHideAs)
                    .HasMaxLength(255)
                    .HasColumnName("X/s collected Y/N (No need to complete this column just hide as ");

                entity.Property(e => e.XSDeductedYNOrPdIfPreviouslyDeducted)
                    .HasMaxLength(255)
                    .HasColumnName("X/S Deducted Y, N or PD if previously deducted");
            });

            modelBuilder.Entity<AllianzClaim>(entity =>
            {
                entity.ToTable("AllianzClaim", "Supplier");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AllianzClaimId)
                    .HasMaxLength(10)
                    .HasColumnName("AllianzClaimID");

                entity.Property(e => e.DeviceId).HasColumnName("DeviceID");

                entity.Property(e => e.SbsclaimId).HasColumnName("SBSClaimID");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<AllianzDevice>(entity =>
            {
                entity.ToTable("AllianzDevices", "Supplier");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DeviceId)
                    .HasMaxLength(110)
                    .HasColumnName("DeviceID");

                entity.Property(e => e.Imei)
                    .HasMaxLength(50)
                    .HasColumnName("IMEI");

                entity.Property(e => e.PurchaseDate).HasColumnType("date");

                entity.Property(e => e.PurchasePrice).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.SbsclaimItemId).HasColumnName("SBSClaimItemID");
            });

            modelBuilder.Entity<AllianzProduct>(entity =>
            {
                entity.ToTable("AllianzProducts", "Supplier");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllianzDescription).HasMaxLength(70);

                entity.Property(e => e.AllianzProductCode).HasMaxLength(70);

                entity.Property(e => e.Sbsdescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBSDescription");

                entity.Property(e => e.SbsproductCode).HasColumnName("SBSProductCode");
            });

            modelBuilder.Entity<AlternativeOutcome>(entity =>
            {
                entity.HasKey(e => e.OutcomeId)
                    .HasName("PK_Validation.AlternativeOutcome");

                entity.ToTable("AlternativeOutcome", "Validation");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.OutcomeText).HasMaxLength(50);

                entity.Property(e => e.Show)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<AlternativeOutcomeDetail>(entity =>
            {
                entity.HasKey(e => e.DetailId)
                    .HasName("PK_Validation.AlternativeOutcomeDetail");

                entity.ToTable("AlternativeOutcomeDetail", "Validation");

                entity.Property(e => e.DetailId).HasColumnName("DetailID");

                entity.Property(e => e.DetailText).HasMaxLength(50);

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");
            });

            modelBuilder.Entity<AmazonGiftCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AmazonGiftCards", "Supplier");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.CardNumber).HasMaxLength(50);

                entity.Property(e => e.CreationRequestId)
                    .HasMaxLength(20)
                    .HasColumnName("CreationRequestID");

                entity.Property(e => e.CurrencyCode)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Gcid)
                    .HasMaxLength(50)
                    .HasColumnName("GCID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<AppSupplier>(entity =>
            {
                entity.ToTable("AppSupplier", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrderProtocal).HasMaxLength(10);

                entity.Property(e => e.Password).HasMaxLength(200);

                entity.Property(e => e.ServiceUrl).HasMaxLength(2000);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierName).HasMaxLength(200);

                entity.Property(e => e.Username).HasMaxLength(200);
            });

            modelBuilder.Entity<Archive>(entity =>
            {
                entity.ToTable("Archive", "MI");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Additionalgoodsordered)
                    .HasColumnType("datetime")
                    .HasColumnName("additionalgoodsordered");

                entity.Property(e => e.Assignoutcome)
                    .HasColumnType("datetime")
                    .HasColumnName("assignoutcome");

                entity.Property(e => e.Awaitingcarpetsample)
                    .HasColumnType("datetime")
                    .HasColumnName("awaitingcarpetsample");

                entity.Property(e => e.Awaitingfittingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("awaitingfittingdate");

                entity.Property(e => e.Awaitingproofofpurchase)
                    .HasColumnType("datetime")
                    .HasColumnName("awaitingproofofpurchase");

                entity.Property(e => e.Berack)
                    .HasColumnType("datetime")
                    .HasColumnName("berack");

                entity.Property(e => e.Bettermentagreed)
                    .HasColumnType("datetime")
                    .HasColumnName("bettermentagreed");

                entity.Property(e => e.Bitoolused)
                    .HasColumnType("datetime")
                    .HasColumnName("bitoolused");

                entity.Property(e => e.Cancelledduringtransit)
                    .HasColumnType("datetime")
                    .HasColumnName("cancelledduringtransit");

                entity.Property(e => e.Carpetdryingcompleted)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetdryingcompleted");

                entity.Property(e => e.Carpetdryingstarted)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetdryingstarted");

                entity.Property(e => e.Carpetfitted)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetfitted");

                entity.Property(e => e.Carpetsample)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetsample");

                entity.Property(e => e.Carpetvoucherissued)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetvoucherissued");

                entity.Property(e => e.Carpetvoucherredeemed)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetvoucherredeemed");

                entity.Property(e => e.Cashsettledbyinsurancecompany)
                    .HasColumnType("datetime")
                    .HasColumnName("cashsettledbyinsurancecompany");

                entity.Property(e => e.Cashsettledbysbs)
                    .HasColumnType("datetime")
                    .HasColumnName("cashsettledbysbs");

                entity.Property(e => e.Claimcommodity)
                    .HasMaxLength(255)
                    .HasColumnName("claimcommodity");

                entity.Property(e => e.Claimitemrepudiated)
                    .HasColumnType("datetime")
                    .HasColumnName("claimitemrepudiated");

                entity.Property(e => e.Claimitemwithdrawnbyic)
                    .HasColumnType("datetime")
                    .HasColumnName("claimitemwithdrawnbyic");

                entity.Property(e => e.Claimitemwithdrawnbyph)
                    .HasColumnType("datetime")
                    .HasColumnName("claimitemwithdrawnbyph");

                entity.Property(e => e.Claimtype)
                    .HasMaxLength(255)
                    .HasColumnName("claimtype");

                entity.Property(e => e.Claimtypedescription)
                    .HasMaxLength(255)
                    .HasColumnName("claimtypedescription");

                entity.Property(e => e.Claimvalue).HasColumnName("claimvalue");

                entity.Property(e => e.Cleaninprogress)
                    .HasColumnType("datetime")
                    .HasColumnName("cleaninprogress");

                entity.Property(e => e.Closeclaim)
                    .HasColumnType("datetime")
                    .HasColumnName("closeclaim");

                entity.Property(e => e.Closeitem)
                    .HasColumnType("datetime")
                    .HasColumnName("closeitem");

                entity.Property(e => e.CoClaimId).HasColumnName("co_claim_id");

                entity.Property(e => e.CoClaimOutcome)
                    .HasMaxLength(255)
                    .HasColumnName("co_claim_outcome");

                entity.Property(e => e.CoCommodity)
                    .HasMaxLength(255)
                    .HasColumnName("co_commodity");

                entity.Property(e => e.CoDateClosed)
                    .HasColumnType("datetime")
                    .HasColumnName("co_date_closed");

                entity.Property(e => e.CoDateOpened)
                    .HasColumnType("datetime")
                    .HasColumnName("co_date_opened");

                entity.Property(e => e.CoInsco)
                    .HasMaxLength(255)
                    .HasColumnName("co_insco");

                entity.Property(e => e.CoLaName)
                    .HasMaxLength(255)
                    .HasColumnName("co_la_name");

                entity.Property(e => e.CoLaRef)
                    .HasMaxLength(255)
                    .HasColumnName("co_la_ref");

                entity.Property(e => e.CoOutcome)
                    .HasMaxLength(255)
                    .HasColumnName("co_outcome");

                entity.Property(e => e.CoPeril)
                    .HasMaxLength(255)
                    .HasColumnName("co_peril");

                entity.Property(e => e.Customerrejectedsettlement)
                    .HasColumnType("datetime")
                    .HasColumnName("customerrejectedsettlement");

                entity.Property(e => e.Dateinspectionacknowledged)
                    .HasColumnType("datetime")
                    .HasColumnName("dateinspectionacknowledged");

                entity.Property(e => e.Daterepairread)
                    .HasColumnType("datetime")
                    .HasColumnName("daterepairread");

                entity.Property(e => e.Deadonarrival)
                    .HasColumnType("datetime")
                    .HasColumnName("deadonarrival");

                entity.Property(e => e.DpdcollectionDate)
                    .HasMaxLength(255)
                    .HasColumnName("DPDCollectionDate");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Engineerbooked)
                    .HasColumnType("datetime")
                    .HasColumnName("engineerbooked");

                entity.Property(e => e.Excesscollected)
                    .HasColumnType("datetime")
                    .HasColumnName("excesscollected");

                entity.Property(e => e.Failedrepair)
                    .HasColumnType("datetime")
                    .HasColumnName("failedrepair");

                entity.Property(e => e.Firstcontactletter)
                    .HasColumnType("datetime")
                    .HasColumnName("firstcontactletter");

                entity.Property(e => e.Gmgnid).HasColumnName("gmgnid");

                entity.Property(e => e.Goodsrecivedcalloutbooked)
                    .HasColumnType("datetime")
                    .HasColumnName("goodsrecivedcalloutbooked");

                entity.Property(e => e.Handler)
                    .HasMaxLength(255)
                    .HasColumnName("handler");

                entity.Property(e => e.Handlerreadprintedreport)
                    .HasColumnType("datetime")
                    .HasColumnName("handlerreadprintedreport");

                entity.Property(e => e.Hometelephone)
                    .HasMaxLength(255)
                    .HasColumnName("hometelephone");

                entity.Property(e => e.IiCarriageCost)
                    .HasMaxLength(255)
                    .HasColumnName("ii_carriage_cost");

                entity.Property(e => e.IiClaimorderid).HasColumnName("ii_claimorderid");

                entity.Property(e => e.IiDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_date");

                entity.Property(e => e.IiDescription)
                    .HasMaxLength(255)
                    .HasColumnName("ii_description");

                entity.Property(e => e.IiGoodsCost)
                    .HasMaxLength(255)
                    .HasColumnName("ii_goods_cost");

                entity.Property(e => e.IiGross)
                    .HasMaxLength(255)
                    .HasColumnName("ii_gross");

                entity.Property(e => e.IiInvNo)
                    .HasMaxLength(255)
                    .HasColumnName("ii_inv_no");

                entity.Property(e => e.IiNet)
                    .HasMaxLength(255)
                    .HasColumnName("ii_net");

                entity.Property(e => e.IiPoConfirmedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_po_confirmed_date");

                entity.Property(e => e.IiPoDelDateConfirmed)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_po_del_date_confirmed");

                entity.Property(e => e.IiPoDelDateEst)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_po_del_date_est");

                entity.Property(e => e.IiPoNumber)
                    .HasMaxLength(255)
                    .HasColumnName("ii_po_number");

                entity.Property(e => e.IiPoOriginalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_po_original_date");

                entity.Property(e => e.IiProductCode)
                    .HasMaxLength(255)
                    .HasColumnName("ii_product_code");

                entity.Property(e => e.IiQuantity)
                    .HasMaxLength(255)
                    .HasColumnName("ii_quantity");

                entity.Property(e => e.IiSupplier)
                    .HasMaxLength(255)
                    .HasColumnName("ii_supplier");

                entity.Property(e => e.Incorrectitemsupplied)
                    .HasColumnType("datetime")
                    .HasColumnName("incorrectitemsupplied");

                entity.Property(e => e.Inspcancelled)
                    .HasColumnType("datetime")
                    .HasColumnName("inspcancelled");

                entity.Property(e => e.Inspectionarranged)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectionarranged");

                entity.Property(e => e.Inspectioncreated)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectioncreated");

                entity.Property(e => e.Inspectionreadbyengineer)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectionreadbyengineer");

                entity.Property(e => e.Inspectionreported)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectionreported");

                entity.Property(e => e.Inspectionreportto)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectionreportto");

                entity.Property(e => e.Instructionbookedonfnol)
                    .HasColumnType("datetime")
                    .HasColumnName("instructionbookedonfnol");

                entity.Property(e => e.Instructionbookedonip)
                    .HasColumnType("datetime")
                    .HasColumnName("instructionbookedonip");

                entity.Property(e => e.Instructionbookedonipautomaticly)
                    .HasColumnType("datetime")
                    .HasColumnName("instructionbookedonipautomaticly");

                entity.Property(e => e.Instructionpickedup)
                    .HasColumnType("datetime")
                    .HasColumnName("instructionpickedup");

                entity.Property(e => e.Instructiontonotrepair)
                    .HasColumnType("datetime")
                    .HasColumnName("instructiontonotrepair");

                entity.Property(e => e.Insuredlastname)
                    .HasMaxLength(255)
                    .HasColumnName("insuredlastname");

                entity.Property(e => e.Insuredpostcode)
                    .HasMaxLength(255)
                    .HasColumnName("insuredpostcode");

                entity.Property(e => e.Invoicefinal)
                    .HasColumnType("datetime")
                    .HasColumnName("invoicefinal");

                entity.Property(e => e.Invoiceinterim)
                    .HasColumnType("datetime")
                    .HasColumnName("invoiceinterim");

                entity.Property(e => e.Itemid).HasColumnName("itemid");

                entity.Property(e => e.Itemreadytobeinvoiced)
                    .HasColumnType("datetime")
                    .HasColumnName("itemreadytobeinvoiced");

                entity.Property(e => e.Itemtype)
                    .HasMaxLength(255)
                    .HasColumnName("itemtype");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(255)
                    .HasColumnName("lareference");

                entity.Property(e => e.Make)
                    .HasMaxLength(255)
                    .HasColumnName("make");

                entity.Property(e => e.Mandatesent)
                    .HasColumnType("datetime")
                    .HasColumnName("mandatesent");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(255)
                    .HasColumnName("mobile");

                entity.Property(e => e.Model)
                    .HasMaxLength(255)
                    .HasColumnName("model");

                entity.Property(e => e.Nondelivery)
                    .HasColumnType("datetime")
                    .HasColumnName("nondelivery");

                entity.Property(e => e.Peril)
                    .HasMaxLength(255)
                    .HasColumnName("peril");

                entity.Property(e => e.Perildetail)
                    .HasMaxLength(255)
                    .HasColumnName("perildetail");

                entity.Property(e => e.Phonecontactwithpolicyholder)
                    .HasColumnType("datetime")
                    .HasColumnName("phonecontactwithpolicyholder");

                entity.Property(e => e.Policynumber)
                    .HasMaxLength(255)
                    .HasColumnName("policynumber");

                entity.Property(e => e.Purchaseorderraised)
                    .HasColumnType("datetime")
                    .HasColumnName("purchaseorderraised");

                entity.Property(e => e.Quotetoinsurance)
                    .HasColumnType("datetime")
                    .HasColumnName("quotetoinsurance");

                entity.Property(e => e.Recommendrepudiation)
                    .HasColumnType("datetime")
                    .HasColumnName("recommendrepudiation");

                entity.Property(e => e.Repairauth)
                    .HasColumnType("datetime")
                    .HasColumnName("repairauth");

                entity.Property(e => e.Repaircomplete)
                    .HasColumnType("datetime")
                    .HasColumnName("repaircomplete");

                entity.Property(e => e.Repaireditemreturned)
                    .HasColumnType("datetime")
                    .HasColumnName("repaireditemreturned");

                entity.Property(e => e.Repairfailed)
                    .HasColumnType("datetime")
                    .HasColumnName("repairfailed");

                entity.Property(e => e.Repairoffered)
                    .HasColumnType("datetime")
                    .HasColumnName("repairoffered");

                entity.Property(e => e.Repairtobecarriedout)
                    .HasColumnType("datetime")
                    .HasColumnName("repairtobecarriedout");

                entity.Property(e => e.Repairtobecarriedoutgiftware)
                    .HasColumnType("datetime")
                    .HasColumnName("repairtobecarriedoutgiftware");

                entity.Property(e => e.Repairtobecarriedoutjewellry)
                    .HasColumnType("datetime")
                    .HasColumnName("repairtobecarriedoutjewellry");

                entity.Property(e => e.Repairtobecarriedoutwatch)
                    .HasColumnType("datetime")
                    .HasColumnName("repairtobecarriedoutwatch");

                entity.Property(e => e.Replacementflooroffered)
                    .HasColumnType("datetime")
                    .HasColumnName("replacementflooroffered");

                entity.Property(e => e.Replacementgoodsordered)
                    .HasColumnType("datetime")
                    .HasColumnName("replacementgoodsordered");

                entity.Property(e => e.Smsemailtoph)
                    .HasColumnType("datetime")
                    .HasColumnName("smsemailtoph");

                entity.Property(e => e.Sourcingpartsforrepair)
                    .HasColumnType("datetime")
                    .HasColumnName("sourcingpartsforrepair");

                entity.Property(e => e.Sourcingpartsforrepairjewellry)
                    .HasColumnType("datetime")
                    .HasColumnName("sourcingpartsforrepairjewellry");

                entity.Property(e => e.Sourcingpartsormaterialforrepair)
                    .HasColumnType("datetime")
                    .HasColumnName("sourcingpartsormaterialforrepair");

                entity.Property(e => e.Suppliername)
                    .HasMaxLength(255)
                    .HasColumnName("suppliername");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .HasColumnName("username");

                entity.Property(e => e.Validationtool)
                    .HasColumnType("datetime")
                    .HasColumnName("validationtool");

                entity.Property(e => e.Variationtoinstructionic)
                    .HasColumnType("datetime")
                    .HasColumnName("variationtoinstructionic");

                entity.Property(e => e.Variationtoinstructionii)
                    .HasColumnType("datetime")
                    .HasColumnName("variationtoinstructionii");

                entity.Property(e => e.Variationtoinstructionph)
                    .HasColumnType("datetime")
                    .HasColumnName("variationtoinstructionph");

                entity.Property(e => e.Vatregistered)
                    .HasMaxLength(255)
                    .HasColumnName("vatregistered");

                entity.Property(e => e.Voucherissued)
                    .HasColumnType("datetime")
                    .HasColumnName("voucherissued");

                entity.Property(e => e.Voucheroffered)
                    .HasColumnType("datetime")
                    .HasColumnName("voucheroffered");

                entity.Property(e => e.Worktelephone)
                    .HasMaxLength(255)
                    .HasColumnName("worktelephone");
            });

            modelBuilder.Entity<AssignClaim>(entity =>
            {
                entity.ToTable("AssignClaim", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ItemNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AssignClaim123>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AssignClaim123", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ItemNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Attribute>(entity =>
            {
                entity.ToTable("Attribute", "Product");

                entity.HasIndex(e => e.FeatureId, "IXNC_Attribute_FeatureID_A319C");

                entity.HasIndex(e => new { e.FeatureId, e.LookupValue }, "IXNC_Attribute_FeatureID_LookupValue_F2599");

                entity.HasIndex(e => e.LookupValue, "IXNC_Attribute_LookupValue_D5DC6");

                entity.HasIndex(e => e.AttributeId, "_dta_index_Attribute_16_944722418__K1");

                entity.HasIndex(e => e.KeyValue, "_dta_index_Attribute_16_944722418__K12_1_6");

                entity.HasIndex(e => new { e.KeyValue, e.AttributeId }, "_dta_index_Attribute_16_944722418__K12_K1_6");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AlternateAttributeName).HasMaxLength(50);

                entity.Property(e => e.AttributeCategoryId).HasColumnName("AttributeCategoryID");

                entity.Property(e => e.AttributeName).HasMaxLength(50);

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.DefaultValueId).HasColumnName("DefaultValueID");

                entity.Property(e => e.Explanation).HasMaxLength(300);

                entity.Property(e => e.FeatureId).HasColumnName("FeatureID");

                entity.Property(e => e.Linkedattributeid).HasColumnName("linkedattributeid");

                entity.Property(e => e.Multiplier).HasDefaultValueSql("((1))");

                entity.Property(e => e.Note).HasMaxLength(200);
            });

            modelBuilder.Entity<AttributeCategory>(entity =>
            {
                entity.ToTable("AttributeCategory", "Product");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Category).HasMaxLength(100);
            });

            modelBuilder.Entity<AttributeValue>(entity =>
            {
                entity.HasKey(e => e.ValueId)
                    .HasName("PK_Product.AttributeValue_1");

                entity.ToTable("AttributeValue", "Product");

                entity.HasIndex(e => e.AttributeId, "AttributeID_Index");

                entity.HasIndex(e => e.AttributeId, "IXNC_AttributeValue_AttributeID_4CC1A");

                entity.HasIndex(e => new { e.ValueId, e.AttributeId, e.Weighting }, "_dta_index_AttributeValue_16_976722532__K1_K2_K6");

                entity.HasIndex(e => new { e.ValueId, e.Weighting }, "_dta_index_AttributeValue_16_976722532__K1_K6");

                entity.HasIndex(e => new { e.ValueId, e.Weighting, e.AttributeId }, "_dta_index_AttributeValue_16_976722532__K1_K6_K2");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.Cnetsufx)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETSUFX");

                entity.Property(e => e.VId).HasColumnName("vID");

                entity.Property(e => e.Weighting).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<AutoAssignment>(entity =>
            {
                entity.ToTable("AutoAssignment", "Role");

                entity.HasIndex(e => e.ClaimId, "IXNC_AutoAssignment_ClaimId_6F7DA");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<AutoAssignmentResult>(entity =>
            {
                entity.ToTable("AutoAssignmentResults", "Role");

                entity.HasIndex(e => new { e.Aaid, e.AssignedClaim, e.Id }, "IXNC_AutoAssignmentResults_AAId_AssignedClaim_id_5D8F4");

                entity.HasIndex(e => new { e.Aaid, e.Online, e.CommodityScore, e.StatusId }, "IXNC_AutoAssignmentResults_AAId_Online_CommodityScore_StatusId_97387");

                entity.HasIndex(e => new { e.Aaid, e.UserId }, "IXNC_AutoAssignmentResults_AAId_UserId_2C15B");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Aaid).HasColumnName("AAId");

                entity.Property(e => e.AssignedByUserId).HasColumnName("AssignedByUserID");

                entity.Property(e => e.DateAssigned).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(200);

                entity.Property(e => e.LastName).HasMaxLength(200);

                entity.HasOne(d => d.Aa)
                    .WithMany(p => p.AutoAssignmentResults)
                    .HasForeignKey(d => d.Aaid)
                    .HasConstraintName("FK_AutoAssignmentResults_AutoAssignment");

                entity.HasOne(d => d.AssignedByUser)
                    .WithMany(p => p.AutoAssignmentResultAssignedByUsers)
                    .HasForeignKey(d => d.AssignedByUserId)
                    .HasConstraintName("FK_AutoAssignmentResults_User1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AutoAssignmentResultUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AutoAssignmentResults_User");
            });

            modelBuilder.Entity<AutoPriceChecked>(entity =>
            {
                entity.HasKey(e => e.ApcId);

                entity.ToTable("AutoPrice_Checked", "Accounts");

                entity.HasIndex(e => e.ApcClaimId, "IXNC_AutoPrice_Checked_apc_claim_id_93DA1");

                entity.Property(e => e.ApcId).HasColumnName("apc_id");

                entity.Property(e => e.ApcClaimId).HasColumnName("apc_claim_id");
            });

            modelBuilder.Entity<AutoPriceChnote>(entity =>
            {
                entity.HasKey(e => e.ApchId);

                entity.ToTable("AutoPrice_CHNotes", "Accounts");

                entity.HasIndex(e => e.ApchClaimOrderId, "IXNC_AutoPrice_CHNotes_apch_ClaimOrderId_7109D");

                entity.Property(e => e.ApchId).HasColumnName("apch_id");

                entity.Property(e => e.ApchClaimId).HasColumnName("apch_claim_id");

                entity.Property(e => e.ApchClaimOrderId).HasColumnName("apch_ClaimOrderId");

                entity.Property(e => e.ApchNotes)
                    .HasMaxLength(2000)
                    .HasColumnName("apch_notes");
            });

            modelBuilder.Entity<AutoPriceFee>(entity =>
            {
                entity.HasKey(e => e.ApfId);

                entity.ToTable("AutoPrice_Fees", "Accounts");

                entity.Property(e => e.ApfId).HasColumnName("apf_id");

                entity.Property(e => e.ApfBasis)
                    .HasMaxLength(1)
                    .HasColumnName("apf_basis");

                entity.Property(e => e.ApfEffectiveFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("apf_effective_from");

                entity.Property(e => e.ApfEffectiveTo)
                    .HasColumnType("datetime")
                    .HasColumnName("apf_effective_to");

                entity.Property(e => e.ApfFixedPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apf_FixedPrice");

                entity.Property(e => e.ApfInsuranceCoId).HasColumnName("apf_Insurance_Co_Id");

                entity.Property(e => e.ApfMarkUp)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apf_MarkUp");

                entity.Property(e => e.ApfNarrative)
                    .HasMaxLength(50)
                    .HasColumnName("apf_narrative")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Variable, Fixed or Marku+fixed element (V/F/M)");

                entity.Property(e => e.ApfProductId).HasColumnName("apf_ProductId");
            });

            modelBuilder.Entity<AutoPriceMarkUp>(entity =>
            {
                entity.HasKey(e => e.ApuId);

                entity.ToTable("AutoPrice_MarkUps", "Accounts");

                entity.Property(e => e.ApuId).HasColumnName("apu_id");

                entity.Property(e => e.ApuCommodityId).HasColumnName("apu_Commodity_Id");

                entity.Property(e => e.ApuInsuranceCoId).HasColumnName("apu_Insurance_Co_Id");

                entity.Property(e => e.ApuMarkUp)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apu_MarkUp");
            });

            modelBuilder.Entity<AutoPriceMaster>(entity =>
            {
                entity.HasKey(e => e.ApmId);

                entity.ToTable("AutoPrice_Master", "Accounts");

                entity.Property(e => e.ApmId).HasColumnName("apm_id");

                entity.Property(e => e.ApmContractDoc)
                    .HasMaxLength(100)
                    .HasColumnName("apm_Contract_doc");

                entity.Property(e => e.ApmDefaultMarkUp)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apm_Default_MarkUp");

                entity.Property(e => e.ApmDeliveryDoc)
                    .HasMaxLength(100)
                    .HasColumnName("apm_Delivery_doc");

                entity.Property(e => e.ApmDeliveryStandardMax)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apm_Delivery_standard_max");

                entity.Property(e => e.ApmInsuranceCoId).HasColumnName("apm_Insurance_Co_Id");
            });

            modelBuilder.Entity<AutoPriceNote>(entity =>
            {
                entity.HasKey(e => e.ApnId);

                entity.ToTable("AutoPrice_Notes", "Accounts");

                entity.Property(e => e.ApnId).HasColumnName("apn_id");

                entity.Property(e => e.ApnAccNotes)
                    .HasMaxLength(2000)
                    .HasColumnName("apn_acc_notes");

                entity.Property(e => e.ApnChNotes)
                    .HasMaxLength(2000)
                    .HasColumnName("apn_ch_notes");

                entity.Property(e => e.ApnSidId)
                    .HasColumnName("apn_sid_id")
                    .HasComment("If null, then this relates to carriage (ref sim_id)");

                entity.Property(e => e.ApnSimId).HasColumnName("apn_sim_id");
            });

            modelBuilder.Entity<AutoSendCompany>(entity =>
            {
                entity.HasKey(e => e.AutoSendId)
                    .HasName("PK_Accounts.AutoSendCompanies");

                entity.ToTable("AutoSendCompanies", "Accounts");

                entity.Property(e => e.AutoSendId).HasColumnName("AutoSendID");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Autoinsrut2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Autoinsrut2", "nCompass");

                entity.Property(e => e.AccidentDetails).HasColumnType("ntext");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.Address4).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.ConfirmedBy).HasMaxLength(50);

                entity.Property(e => e.ConfirmedInstructionId).HasColumnName("ConfirmedInstructionID");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DelivAddress1).HasMaxLength(50);

                entity.Property(e => e.DelivAddress2).HasMaxLength(50);

                entity.Property(e => e.DelivAddress3).HasMaxLength(50);

                entity.Property(e => e.DelivAddress4).HasMaxLength(50);

                entity.Property(e => e.DelivPostCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Expr2).HasMaxLength(50);

                entity.Property(e => e.Expr3).HasMaxLength(50);

                entity.Property(e => e.Expr4).HasMaxLength(50);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FirstName2).HasMaxLength(50);

                entity.Property(e => e.Handler).HasMaxLength(50);

                entity.Property(e => e.HomePhone).HasMaxLength(50);

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.IsVatregistered).HasColumnName("IsVATRegistered");

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.LastName2).HasMaxLength(50);

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.PolicyNo).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.RefNo).HasMaxLength(50);

                entity.Property(e => e.Source).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.Title2).HasMaxLength(50);

                entity.Property(e => e.VatRegNo).HasMaxLength(50);

                entity.Property(e => e.WorkPhone).HasMaxLength(50);
            });

            modelBuilder.Entity<Autoinstruict1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Autoinstruict1", "nCompass");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1000)
                    .HasColumnName("comment");

                entity.Property(e => e.EndDateTime).HasColumnType("smalldatetime");

                entity.Property(e => e.FnolImportId).HasColumnName("FnolImportID");

                entity.Property(e => e.FnolImportSetupId).HasColumnName("FnolImportSetupID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.ProcessText).HasColumnType("ntext");

                entity.Property(e => e.SourceFile).HasMaxLength(250);

                entity.Property(e => e.StartDateTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TargetFile).HasMaxLength(250);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("userID");
            });

            modelBuilder.Entity<AvivainvoicesQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AVIVAInvoicesQueue", "Accounts");
            });

            modelBuilder.Entity<AvivainvoicesSent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AVIVAInvoicesSent", "Accounts");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.ResponseXml).HasMaxLength(2000);
            });

            modelBuilder.Entity<AxaBastionreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AxaBastionreport", "MI");

                entity.Property(e => e.AxaClaimNumber)
                    .HasMaxLength(50)
                    .HasColumnName("AXA_Claim_Number");

                entity.Property(e => e.ClaimClosedDate).HasColumnName("Claim_Closed_Date");

                entity.Property(e => e.ClaimCover)
                    .HasMaxLength(50)
                    .HasColumnName("Claim_Cover");

                entity.Property(e => e.ClaimDecision).HasColumnName("Claim_Decision");

                entity.Property(e => e.ClaimEstimateTotalCostGrossOfExcess)
                    .HasMaxLength(50)
                    .HasColumnName("Claim_Estimate_Total_Cost_Gross_of_Excess");

                entity.Property(e => e.ClaimEstimateTotalCostNetOfExcess)
                    .HasMaxLength(50)
                    .HasColumnName("Claim_Estimate_Total_Cost_Net_of_Excess");

                entity.Property(e => e.ClaimExcluded)
                    .HasMaxLength(50)
                    .HasColumnName("Claim_Excluded");

                entity.Property(e => e.ClaimNotificationDate).HasColumnName("Claim_Notification_Date");

                entity.Property(e => e.ClaimNumber).HasColumnName("Claim_Number");

                entity.Property(e => e.ClaimOccurenceDate).HasColumnName("Claim_Occurence_Date");

                entity.Property(e => e.ClaimReserve)
                    .HasMaxLength(50)
                    .HasColumnName("Claim_Reserve");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(50)
                    .HasColumnName("Claim_Type");

                entity.Property(e => e.ComplaintClaim)
                    .HasMaxLength(50)
                    .HasColumnName("Complaint_Claim");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(50)
                    .HasColumnName("Country_Code");

                entity.Property(e => e.Cur)
                    .HasMaxLength(50)
                    .HasColumnName("CUR");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_Name");

                entity.Property(e => e.CustomerSurname)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_Surname");

                entity.Property(e => e.DecisionDate).HasColumnName("Decision_Date");

                entity.Property(e => e.Deductible).HasMaxLength(50);

                entity.Property(e => e.DeliveryDate)
                    .HasMaxLength(1)
                    .HasColumnName("Delivery_Date");

                entity.Property(e => e.DetailedClaimDescriptionLimitedTo300Characters).HasColumnName("Detailed_Claim_Description_Limited_to_300_characters");

                entity.Property(e => e.EndToEndTatDays)
                    .HasMaxLength(1)
                    .HasColumnName("End_to_End_TAT_Days");

                entity.Property(e => e.ExcessCollected)
                    .HasMaxLength(50)
                    .HasColumnName("Excess_Collected");

                entity.Property(e => e.ExcessCollectedDate).HasColumnName("Excess_Collected_Date");

                entity.Property(e => e.ExcessCollectedFromCashSettlement)
                    .HasMaxLength(50)
                    .HasColumnName("Excess_Collected_from_Cash_Settlement");

                entity.Property(e => e.FraudSuspicion).HasColumnName("Fraud_Suspicion");

                entity.Property(e => e.FraudSuspicion1).HasColumnName("Fraud_Suspicion1");

                entity.Property(e => e.ImeiSn)
                    .HasMaxLength(50)
                    .HasColumnName("IMEI_SN");

                entity.Property(e => e.InboundLogisticsTrackingId)
                    .HasMaxLength(1)
                    .HasColumnName("Inbound_Logistics_tracking_ID");

                entity.Property(e => e.InsuranceCompanyName)
                    .HasMaxLength(50)
                    .HasColumnName("Insurance_Company_Name");

                entity.Property(e => e.Justified).HasMaxLength(50);

                entity.Property(e => e.LatestInvoiceDate).HasColumnName("Latest_Invoice_Date");

                entity.Property(e => e.LogisticsNoOfLegs)
                    .HasMaxLength(1)
                    .HasColumnName("Logistics_No_of_legs");

                entity.Property(e => e.MaximumCoverAmount)
                    .HasMaxLength(50)
                    .HasColumnName("Maximum_Cover_Amount");

                entity.Property(e => e.NotificationChannel)
                    .HasMaxLength(50)
                    .HasColumnName("Notification_Channel");

                entity.Property(e => e.OutboundLogisticsTrackingId)
                    .HasMaxLength(1)
                    .HasColumnName("Outbound_Logistics_tracking_ID");

                entity.Property(e => e.PickUpDate)
                    .HasMaxLength(1)
                    .HasColumnName("Pick_up_Date");

                entity.Property(e => e.PolicyCover)
                    .HasMaxLength(50)
                    .HasColumnName("Policy_Cover");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Policy_Number");

                entity.Property(e => e.PolicyStartDate).HasColumnName("Policy_Start_Date");

                entity.Property(e => e.ProductGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Product_Group");

                entity.Property(e => e.PurchaseDate).HasColumnName("Purchase_Date");

                entity.Property(e => e.PurchasePrice)
                    .HasMaxLength(1)
                    .HasColumnName("Purchase_Price");

                entity.Property(e => e.RejectionReasonCode)
                    .HasMaxLength(1)
                    .HasColumnName("Rejection_reason_code");

                entity.Property(e => e.RepairCost)
                    .HasMaxLength(50)
                    .HasColumnName("Repair_Cost");

                entity.Property(e => e.RepairVat)
                    .HasMaxLength(50)
                    .HasColumnName("Repair_VAT");

                entity.Property(e => e.RepairerJobNo)
                    .HasMaxLength(50)
                    .HasColumnName("Repairer_Job_No");

                entity.Property(e => e.RepairerService)
                    .HasMaxLength(50)
                    .HasColumnName("Repairer_Service");

                entity.Property(e => e.ReplacementCost)
                    .HasMaxLength(50)
                    .HasColumnName("Replacement_Cost");

                entity.Property(e => e.ReplacementImeiSn)
                    .HasMaxLength(50)
                    .HasColumnName("Replacement_IMEI_SN");

                entity.Property(e => e.ReplacementMake).HasColumnName("Replacement_Make");

                entity.Property(e => e.ReplacementModel).HasColumnName("Replacement_Model");

                entity.Property(e => e.ReplacementVat)
                    .HasMaxLength(50)
                    .HasColumnName("Replacement_VAT");

                entity.Property(e => e.ReserveUsedInCalc)
                    .HasMaxLength(50)
                    .HasColumnName("Reserve_Used_In_Calc");

                entity.Property(e => e.ServiceStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Service_Status");

                entity.Property(e => e.StatusDate).HasColumnName("Status_Date");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(500)
                    .HasColumnName("Supplier_Name");

                entity.Property(e => e.TotalClaimCostGrossOfExcessCollected)
                    .HasMaxLength(50)
                    .HasColumnName("Total_Claim_Cost_Gross_of_Excess_Collected");

                entity.Property(e => e.TotalClaimCostNetOfExcessCollected)
                    .HasMaxLength(50)
                    .HasColumnName("Total_Claim_Cost_Net_of_Excess_Collected");

                entity.Property(e => e.TotalServiceCostVat)
                    .HasMaxLength(1)
                    .HasColumnName("Total_Service_Cost_VAT");

                entity.Property(e => e.TpaId)
                    .HasMaxLength(50)
                    .HasColumnName("TPA_ID");

                entity.Property(e => e.TpaValidationFee)
                    .HasMaxLength(50)
                    .HasColumnName("TPA_Validation_Fee");

                entity.Property(e => e.Underwriter).HasMaxLength(50);

                entity.Property(e => e.WithdrawalDeclinatureReason).HasColumnName("Withdrawal_Declinature_reason");

                entity.Property(e => e.WithdrawnReasonCode)
                    .HasMaxLength(1)
                    .HasColumnName("Withdrawn_reason_code");
            });

            modelBuilder.Entity<Backup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("backup", "Product");

                entity.Property(e => e.AltType).HasMaxLength(100);

                entity.Property(e => e.AltType2).HasMaxLength(100);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.Colour).HasMaxLength(50);

                entity.Property(e => e.DcPavcount).HasColumnName("DC_PAVCount");

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.EncodexStart).HasColumnType("datetime");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.InformationUrl)
                    .HasMaxLength(200)
                    .HasColumnName("InformationURL");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.OldProductId).HasColumnName("Old_Product_Id");

                entity.Property(e => e.PictureUrl)
                    .HasMaxLength(200)
                    .HasColumnName("PictureURL");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Type).HasMaxLength(100);
            });

            modelBuilder.Entity<BackupItemAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Backup.ItemAttributes", "Claim");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.Property(e => e.ValueName).HasMaxLength(50);
            });

            modelBuilder.Entity<BackupSupplierProductLinkOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BackupSupplierProductLinkOperations", "nCompass");

                entity.Property(e => e.LinkOperation).HasMaxLength(50);

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");

                entity.Property(e => e.SupplierProductCode).HasMaxLength(255);
            });

            modelBuilder.Entity<BadWord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BadWords", "Claim");

                entity.Property(e => e.BadWords).HasMaxLength(200);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<Bak2304Attribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAK2304_Attribute", "Product");

                entity.Property(e => e.AlternateAttributeName).HasMaxLength(50);

                entity.Property(e => e.AttributeCategoryId).HasColumnName("AttributeCategoryID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AttributeName).HasMaxLength(50);

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.DefaultValueId).HasColumnName("DefaultValueID");

                entity.Property(e => e.Explanation).HasMaxLength(300);

                entity.Property(e => e.FeatureId).HasColumnName("FeatureID");

                entity.Property(e => e.Linkedattributeid).HasColumnName("linkedattributeid");

                entity.Property(e => e.Note).HasMaxLength(200);
            });

            modelBuilder.Entity<Bak2304AttributeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAK2304_AttributeValue", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.Cnetsufx)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETSUFX");

                entity.Property(e => e.VId).HasColumnName("vID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<Bak2304Brand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAK2304_Brand", "Product");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.BrandName).HasMaxLength(200);
            });

            modelBuilder.Entity<Bak2304Category>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAK2304_Category", "Product");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName).HasMaxLength(200);

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.GfkCategoryId).HasColumnName("gfkCategoryID");

                entity.Property(e => e.GfksectorId).HasColumnName("GFKSectorID");
            });

            modelBuilder.Entity<Bak2304Family>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAK2304_Family", "Product");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FamilyName).HasMaxLength(200);

                entity.Property(e => e.LinkedFamilyId).HasColumnName("LinkedFamilyID");

                entity.Property(e => e.PgId).HasColumnName("pgID");
            });

            modelBuilder.Entity<Bak2304FamilyAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAK2304_FamilyAttribute", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FilterType).HasMaxLength(10);

                entity.Property(e => e.FilterTypeId).HasColumnName("FilterTypeID");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<Bak2304Product>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAK2304_Product", "Product");

                entity.Property(e => e.AltType).HasMaxLength(100);

                entity.Property(e => e.AltType2).HasMaxLength(100);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.CnetcatId)
                    .HasMaxLength(10)
                    .HasColumnName("CNETCatID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.Colour).HasMaxLength(50);

                entity.Property(e => e.DcPavcount).HasColumnName("DC_PAVCount");

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.EncodexStart).HasColumnType("datetime");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.InformationUrl)
                    .HasMaxLength(200)
                    .HasColumnName("InformationURL");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Nfumdescription)
                    .HasMaxLength(200)
                    .HasColumnName("NFUMDescription");

                entity.Property(e => e.OldProductId).HasColumnName("Old_Product_Id");

                entity.Property(e => e.PictureUrl)
                    .HasMaxLength(200)
                    .HasColumnName("PictureURL");

                entity.Property(e => e.PreviousProductId).HasColumnName("PreviousProductID");

                entity.Property(e => e.PriceLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Type).HasMaxLength(100);
            });

            modelBuilder.Entity<Bak2304ProductAttributeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAK2304_ProductAttributeValue", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<BankTranType>(entity =>
            {
                entity.HasKey(e => e.BttId);

                entity.ToTable("BankTranType", "Accounts");

                entity.Property(e => e.BttId).HasColumnName("btt_id");

                entity.Property(e => e.BttCreatedBy).HasColumnName("btt_created_by");

                entity.Property(e => e.BttCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("btt_created_on");

                entity.Property(e => e.BttEditedBy).HasColumnName("btt_edited_by");

                entity.Property(e => e.BttEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("btt_edited_on");

                entity.Property(e => e.BttName)
                    .HasMaxLength(30)
                    .HasColumnName("btt_name")
                    .HasComment("eg Cheque, DDR, BACS receipt, etc");

                entity.Property(e => e.BttOrder)
                    .HasColumnName("btt_order")
                    .HasComment("Order to present list");

                entity.Property(e => e.BttPb)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("btt_PB")
                    .IsFixedLength()
                    .HasComment("Payment or Banking");

                entity.Property(e => e.BttTotalByGroup)
                    .HasColumnName("btt_total_by_group")
                    .HasComment("If true, show grouped totals for bank rec");
            });

            modelBuilder.Entity<BasicDatum>(entity =>
            {
                entity.ToTable("basicData", "Amazon");

                entity.HasIndex(e => e.Id, "_dta_index_basicData_16_2108586600__K1_3");

                entity.HasIndex(e => e.ItemId, "_dta_index_basicData_16_2108586600__K2_1_3_4_5_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_");

                entity.HasIndex(e => new { e.ItemId, e.Id }, "_dta_index_basicData_16_2108586600__K2_K1_3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AmznCondition)
                    .HasMaxLength(500)
                    .HasColumnName("amzn_condition");

                entity.Property(e => e.AmznInventory)
                    .HasMaxLength(500)
                    .HasColumnName("amzn_inventory");

                entity.Property(e => e.AmznIsEligibleForPrime).HasColumnName("amzn_is_eligible_for_prime");

                entity.Property(e => e.AmznIsFba).HasColumnName("amzn_is_fba");

                entity.Property(e => e.AmznMaxHours).HasColumnName("amzn_max_hours");

                entity.Property(e => e.AmznMerchantId)
                    .HasMaxLength(500)
                    .HasColumnName("amzn_merchant_id");

                entity.Property(e => e.AmznMinHours).HasColumnName("amzn_min_hours");

                entity.Property(e => e.AmznPageUrl)
                    .HasMaxLength(500)
                    .HasColumnName("amzn_page_url");

                entity.Property(e => e.AmznPoints)
                    .HasMaxLength(500)
                    .HasColumnName("amzn_points");

                entity.Property(e => e.AmznPpu)
                    .HasMaxLength(500)
                    .HasColumnName("amzn_ppu");

                entity.Property(e => e.AmznPrice)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("amzn_price");

                entity.Property(e => e.AmznSeller)
                    .HasMaxLength(500)
                    .HasColumnName("amzn_seller");

                entity.Property(e => e.AmznShippingCharge)
                    .HasMaxLength(500)
                    .HasColumnName("amzn_shipping_charge");

                entity.Property(e => e.FmCondition)
                    .HasMaxLength(500)
                    .HasColumnName("fm_condition");

                entity.Property(e => e.FmInventory)
                    .HasMaxLength(500)
                    .HasColumnName("fm_inventory");

                entity.Property(e => e.FmIsEligibleForPrime).HasColumnName("fm_is_eligible_for_prime");

                entity.Property(e => e.FmIsFba).HasColumnName("fm_is_fba");

                entity.Property(e => e.FmMaxHours).HasColumnName("fm_max_hours");

                entity.Property(e => e.FmMerchantId)
                    .HasMaxLength(500)
                    .HasColumnName("fm_merchant_id");

                entity.Property(e => e.FmMinHours).HasColumnName("fm_min_hours");

                entity.Property(e => e.FmPageUrl)
                    .HasMaxLength(500)
                    .HasColumnName("fm_page_url");

                entity.Property(e => e.FmPoints)
                    .HasMaxLength(500)
                    .HasColumnName("fm_points");

                entity.Property(e => e.FmPrice)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("fm_price");

                entity.Property(e => e.FmSeller)
                    .HasMaxLength(500)
                    .HasColumnName("fm_seller");

                entity.Property(e => e.FmShippingCharge)
                    .HasMaxLength(500)
                    .HasColumnName("fm_shipping_charge");

                entity.Property(e => e.ItemCondition)
                    .HasMaxLength(500)
                    .HasColumnName("item_condition");

                entity.Property(e => e.ItemEnergyEfficiencyClass)
                    .HasMaxLength(500)
                    .HasColumnName("item_energy_efficiency_class");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemImageUrl)
                    .HasMaxLength(500)
                    .HasColumnName("item_image_url");

                entity.Property(e => e.ItemImageUrlLarge)
                    .HasMaxLength(500)
                    .HasColumnName("item_image_url_large");

                entity.Property(e => e.ItemImageUrlSmall)
                    .HasMaxLength(500)
                    .HasColumnName("item_image_url_small");

                entity.Property(e => e.ItemInventory)
                    .HasMaxLength(500)
                    .HasColumnName("item_inventory");

                entity.Property(e => e.ItemIsAdultProduct)
                    .HasMaxLength(500)
                    .HasColumnName("item_is_adult_product");

                entity.Property(e => e.ItemIsEligibleForPrime).HasColumnName("item_is_eligible_for_prime");

                entity.Property(e => e.ItemIsFba).HasColumnName("item_is_fba");

                entity.Property(e => e.ItemLongDesc)
                    .HasColumnType("text")
                    .HasColumnName("item_long_desc");

                entity.Property(e => e.ItemMaxHours).HasColumnName("item_max_hours");

                entity.Property(e => e.ItemMerchantId)
                    .HasMaxLength(500)
                    .HasColumnName("item_merchant_id");

                entity.Property(e => e.ItemMinHours).HasColumnName("item_min_hours");

                entity.Property(e => e.ItemPageUrl)
                    .HasMaxLength(500)
                    .HasColumnName("item_page_url");

                entity.Property(e => e.ItemPoints).HasColumnName("item_points");

                entity.Property(e => e.ItemPrice)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("item_price");

                entity.Property(e => e.ItemSalesrank)
                    .HasMaxLength(500)
                    .HasColumnName("item_salesrank");

                entity.Property(e => e.ItemSeller)
                    .HasMaxLength(500)
                    .HasColumnName("item_seller");

                entity.Property(e => e.ItemShippingCharge)
                    .HasMaxLength(500)
                    .HasColumnName("item_shipping_charge");

                entity.Property(e => e.ItemTitle)
                    .HasMaxLength(500)
                    .HasColumnName("item_title");

                entity.Property(e => e.ItemUniqueId)
                    .HasMaxLength(500)
                    .HasColumnName("item_unique_id");

                entity.Property(e => e.ListPrice)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("list_price");

                entity.Property(e => e.ListPriceSpecified).HasColumnName("list_priceSpecified");

                entity.Property(e => e.OfferPageUrl)
                    .HasMaxLength(500)
                    .HasColumnName("offer_page_url");

                entity.Property(e => e.OfferUsedUrl)
                    .HasMaxLength(500)
                    .HasColumnName("offer_used_url");

                entity.Property(e => e.ParentAsin)
                    .HasMaxLength(500)
                    .HasColumnName("parent_asin");

                entity.Property(e => e.TpCollectPpu)
                    .HasMaxLength(500)
                    .HasColumnName("tp_collect_ppu");

                entity.Property(e => e.TpFbaUrl)
                    .HasMaxLength(500)
                    .HasColumnName("tp_fba_url");

                entity.Property(e => e.TpNewCondition)
                    .HasMaxLength(500)
                    .HasColumnName("tp_new_condition");

                entity.Property(e => e.TpNewInventory)
                    .HasMaxLength(500)
                    .HasColumnName("tp_new_inventory");

                entity.Property(e => e.TpNewIsEligibleForPrime).HasColumnName("tp_new_is_eligible_for_prime");

                entity.Property(e => e.TpNewIsEligibleForPrimeSpecified).HasColumnName("tp_new_is_eligible_for_primeSpecified");

                entity.Property(e => e.TpNewIsFba).HasColumnName("tp_new_is_fba");

                entity.Property(e => e.TpNewIsFbaSpecified).HasColumnName("tp_new_is_fbaSpecified");

                entity.Property(e => e.TpNewMaxHours).HasColumnName("tp_new_max_hours");

                entity.Property(e => e.TpNewMaxHoursSpecified).HasColumnName("tp_new_max_hoursSpecified");

                entity.Property(e => e.TpNewMerchantId)
                    .HasMaxLength(500)
                    .HasColumnName("tp_new_merchant_id");

                entity.Property(e => e.TpNewMinHours).HasColumnName("tp_new_min_hours");

                entity.Property(e => e.TpNewMinHoursSpecified).HasColumnName("tp_new_min_hoursSpecified");

                entity.Property(e => e.TpNewPoints)
                    .HasMaxLength(500)
                    .HasColumnName("tp_new_points");

                entity.Property(e => e.TpNewPpu)
                    .HasMaxLength(500)
                    .HasColumnName("tp_new_ppu");

                entity.Property(e => e.TpNewPrice)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("tp_new_price");

                entity.Property(e => e.TpNewPriceSpecified).HasColumnName("tp_new_priceSpecified");

                entity.Property(e => e.TpNewSeller)
                    .HasMaxLength(500)
                    .HasColumnName("tp_new_seller");

                entity.Property(e => e.TpNewShippingCharge)
                    .HasMaxLength(500)
                    .HasColumnName("tp_new_shipping_charge");

                entity.Property(e => e.TpRefurbishedPpu)
                    .HasMaxLength(500)
                    .HasColumnName("tp_refurbished_ppu");

                entity.Property(e => e.TpUsedPpu)
                    .HasMaxLength(500)
                    .HasColumnName("tp_used_ppu");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BasicData)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataFeedsItem_dataItem_basic_data_DataFeedsItem_dataItem_basic_data");
            });

            modelBuilder.Entity<BastionBuzzword>(entity =>
            {
                entity.HasKey(e => e.BuzzwordId)
                    .HasName("PK_BastionBuzzword");

                entity.ToTable("BastionBuzzwords", "Claim");

                entity.Property(e => e.BuzzwordId).HasColumnName("Buzzword_ID");

                entity.Property(e => e.Buzzword)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BastionClaimOutcome>(entity =>
            {
                entity.ToTable("BastionClaimOutcome", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");
            });

            modelBuilder.Entity<BastionCloseReason>(entity =>
            {
                entity.ToTable("BastionCloseReason", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Reason)
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BastionDevice>(entity =>
            {
                entity.HasKey(e => e.BdId);

                entity.ToTable("BastionDevice", "Claim");

                entity.Property(e => e.BdId).HasColumnName("BD_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.DeviceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeviceTypeId).HasColumnName("DeviceTypeID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Log_Date");
            });

            modelBuilder.Entity<BastionDeviceValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BastionDeviceValues", "Claim");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Make).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Updated).HasMaxLength(50);
            });

            modelBuilder.Entity<BastionError>(entity =>
            {
                entity.HasKey(e => e.ErrorId);

                entity.ToTable("BastionError", "Claim");

                entity.Property(e => e.ErrorId).HasColumnName("Error_ID");

                entity.Property(e => e.ErrorDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Error_Date");

                entity.Property(e => e.ErrorSection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Error_Section");

                entity.Property(e => e.ExceptionDesc)
                    .IsUnicode(false)
                    .HasColumnName("Exception_Desc");

                entity.Property(e => e.Guid)
                    .HasMaxLength(750)
                    .HasColumnName("GUID");
            });

            modelBuilder.Entity<BastionExcess>(entity =>
            {
                entity.HasKey(e => e.ExcessId);

                entity.ToTable("BastionExcess", "Claim");

                entity.HasIndex(e => e.ClaimId, "_dta_index_BastionExcess_9_1403920123__K2");

                entity.Property(e => e.ExcessId).HasColumnName("Excess_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.ExcessDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Excess_Date");

                entity.Property(e => e.Guid)
                    .HasMaxLength(750)
                    .HasColumnName("GUID");
            });

            modelBuilder.Entity<BastionImei>(entity =>
            {
                entity.HasKey(e => e.ImeiId);

                entity.ToTable("BastionIMEI", "Claim");

                entity.HasIndex(e => e.ClaimId, "_dta_index_BastionIMEI_9_1275919667__K2_5");

                entity.Property(e => e.ImeiId).HasColumnName("IMEI_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.Guid)
                    .HasMaxLength(750)
                    .HasColumnName("GUID");

                entity.Property(e => e.ImeiDate)
                    .HasColumnType("datetime")
                    .HasColumnName("IMEI_Date");

                entity.Property(e => e.IsImei).HasColumnName("Is_IMEI");

                entity.Property(e => e.Number).HasMaxLength(250);
            });

            modelBuilder.Entity<BastionLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("BastionLog", "Claim");

                entity.HasIndex(e => new { e.ClaimId, e.LogDate }, "_dta_index_BastionLog_9_1919397957__K2_K6_4_5");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.Answer).IsUnicode(false);

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.FraudScore).HasColumnName("Fraud_Score");

                entity.Property(e => e.Guid)
                    .HasMaxLength(750)
                    .HasColumnName("GUID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Log_Date");

                entity.Property(e => e.Question).IsUnicode(false);
            });

            modelBuilder.Entity<BastionPolicyFeed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BastionPolicyFeed", "Claim");

                entity.HasIndex(e => e.ResellerPolicyRef, "_dta_index_BastionPolicyFeed_9_1451920294__K4_3_7_26_28_29_30_43");

                entity.Property(e => e.Address1).HasMaxLength(255);

                entity.Property(e => e.Address2).HasMaxLength(255);

                entity.Property(e => e.CancellationDate).HasMaxLength(255);

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(255)
                    .HasColumnName("Company name");

                entity.Property(e => e.ContactNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Contact number");

                entity.Property(e => e.CountryCode).HasMaxLength(255);

                entity.Property(e => e.County).HasMaxLength(255);

                entity.Property(e => e.CoverValue).HasMaxLength(255);

                entity.Property(e => e.DamageCover).HasMaxLength(255);

                entity.Property(e => e.DateofBirth).HasMaxLength(255);

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(255)
                    .HasColumnName("Email address");

                entity.Property(e => e.EndDate).HasMaxLength(255);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.InArrears)
                    .HasMaxLength(255)
                    .HasColumnName("In Arrears");

                entity.Property(e => e.InsurerSchemeReference).HasMaxLength(255);

                entity.Property(e => e.ItemAge).HasMaxLength(255);

                entity.Property(e => e.ItemCondition).HasMaxLength(255);

                entity.Property(e => e.ItemPurchaseDate).HasMaxLength(255);

                entity.Property(e => e.ItemValue).HasMaxLength(255);

                entity.Property(e => e.LossCover).HasMaxLength(255);

                entity.Property(e => e.Make).HasMaxLength(255);

                entity.Property(e => e.MiddleName).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.OrderDateTime).HasMaxLength(255);

                entity.Property(e => e.OriginalPolicyInceptionDate)
                    .HasMaxLength(255)
                    .HasColumnName("Original Policy Inception Date");

                entity.Property(e => e.PolicyStatus).HasMaxLength(255);

                entity.Property(e => e.PolicyTerm).HasMaxLength(255);

                entity.Property(e => e.Postcode).HasMaxLength(255);

                entity.Property(e => e.PreviousClaim).HasMaxLength(255);

                entity.Property(e => e.ResellerName).HasMaxLength(255);

                entity.Property(e => e.ResellerPolicyRef).HasMaxLength(255);

                entity.Property(e => e.Salutation).HasMaxLength(255);

                entity.Property(e => e.SchemeName).HasMaxLength(255);

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Serial number");

                entity.Property(e => e.StartDate).HasMaxLength(255);

                entity.Property(e => e.Surname).HasMaxLength(255);

                entity.Property(e => e.SwitchDate)
                    .HasMaxLength(255)
                    .HasColumnName("Switch Date");

                entity.Property(e => e.TheftCover).HasMaxLength(255);

                entity.Property(e => e.TravelDestination).HasMaxLength(255);

                entity.Property(e => e.TravelDuration).HasMaxLength(255);

                entity.Property(e => e.TravelPersons).HasMaxLength(255);

                entity.Property(e => e.TravellerType).HasMaxLength(255);

                entity.Property(e => e.Triptype).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.Property(e => e.Underwriter).HasMaxLength(255);
            });

            modelBuilder.Entity<BastionPolicyFeedTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BastionPolicyFeedTemp", "Claim");

                entity.Property(e => e.Address1).HasMaxLength(255);

                entity.Property(e => e.Address2).HasMaxLength(255);

                entity.Property(e => e.CancellationDate).HasMaxLength(255);

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(255)
                    .HasColumnName("Company name");

                entity.Property(e => e.ContactNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Contact number");

                entity.Property(e => e.CountryCode).HasMaxLength(255);

                entity.Property(e => e.County).HasMaxLength(255);

                entity.Property(e => e.CoverValue).HasMaxLength(255);

                entity.Property(e => e.DamageCover).HasMaxLength(255);

                entity.Property(e => e.DateofBirth).HasMaxLength(255);

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(255)
                    .HasColumnName("Email address");

                entity.Property(e => e.EndDate).HasMaxLength(255);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.InArrears)
                    .HasMaxLength(255)
                    .HasColumnName("In Arrears");

                entity.Property(e => e.InsurerSchemeReference).HasMaxLength(255);

                entity.Property(e => e.ItemAge).HasMaxLength(255);

                entity.Property(e => e.ItemCondition).HasMaxLength(255);

                entity.Property(e => e.ItemPurchaseDate).HasMaxLength(255);

                entity.Property(e => e.ItemValue).HasMaxLength(255);

                entity.Property(e => e.LossCover).HasMaxLength(255);

                entity.Property(e => e.Make).HasMaxLength(255);

                entity.Property(e => e.MiddleName).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.OrderDateTime).HasMaxLength(255);

                entity.Property(e => e.OriginalPolicyInceptionDate)
                    .HasMaxLength(255)
                    .HasColumnName("Original Policy Inception Date");

                entity.Property(e => e.PolicyStatus).HasMaxLength(255);

                entity.Property(e => e.PolicyTerm).HasMaxLength(255);

                entity.Property(e => e.Postcode).HasMaxLength(255);

                entity.Property(e => e.PreviousClaim).HasMaxLength(255);

                entity.Property(e => e.ResellerName).HasMaxLength(255);

                entity.Property(e => e.ResellerPolicyRef).HasMaxLength(255);

                entity.Property(e => e.Salutation).HasMaxLength(255);

                entity.Property(e => e.SchemeName).HasMaxLength(255);

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Serial number");

                entity.Property(e => e.StartDate).HasMaxLength(255);

                entity.Property(e => e.Surname).HasMaxLength(255);

                entity.Property(e => e.SwitchDate)
                    .HasMaxLength(255)
                    .HasColumnName("Switch Date");

                entity.Property(e => e.TheftCover).HasMaxLength(255);

                entity.Property(e => e.TravelDestination).HasMaxLength(255);

                entity.Property(e => e.TravelDuration).HasMaxLength(255);

                entity.Property(e => e.TravelPersons).HasMaxLength(255);

                entity.Property(e => e.TravellerType).HasMaxLength(255);

                entity.Property(e => e.Triptype).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.Property(e => e.Underwriter).HasMaxLength(255);
            });

            modelBuilder.Entity<BastionPolicyMi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BastionPolicyMI", "MI");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.PolicyCoverValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyDamageCover)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyDeductible)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyLossCover)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyOriginalInceptionDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyStartDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyTheftCover)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BastionPop>(entity =>
            {
                entity.HasKey(e => e.PopId);

                entity.ToTable("BastionPOP", "Claim");

                entity.Property(e => e.PopId).HasColumnName("POP_ID");

                entity.Property(e => e.Guid)
                    .HasMaxLength(750)
                    .HasColumnName("GUID");

                entity.Property(e => e.PopDate)
                    .HasColumnType("datetime")
                    .HasColumnName("POP_Date");

                entity.Property(e => e.PopUrl)
                    .IsUnicode(false)
                    .HasColumnName("POP_URL");
            });

            modelBuilder.Entity<BastionProgress>(entity =>
            {
                entity.HasKey(e => e.ProgressId);

                entity.ToTable("BastionProgress", "Claim");

                entity.Property(e => e.ProgressId).HasColumnName("Progress_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Log_Date");
            });

            modelBuilder.Entity<BastionRepairUpdate>(entity =>
            {
                entity.HasKey(e => e.RepairId);

                entity.ToTable("BastionRepairUpdates", "Claim");

                entity.Property(e => e.RepairId).HasColumnName("Repair_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.ReceivedDate)
                    .HasMaxLength(25)
                    .HasColumnName("Received_Date");

                entity.Property(e => e.RepairStatus)
                    .HasMaxLength(750)
                    .HasColumnName("Repair_Status");

                entity.Property(e => e.RepairSupplier)
                    .HasMaxLength(100)
                    .HasColumnName("Repair_Supplier");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Update_Date");
            });

            modelBuilder.Entity<BastionSberequest>(entity =>
            {
                entity.HasKey(e => e.SbeId);

                entity.ToTable("BastionSBERequest", "Claim");

                entity.Property(e => e.SbeId).HasColumnName("SBE_ID");

                entity.Property(e => e.ClaimId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Claim_ID");

                entity.Property(e => e.MaximumPrice).HasColumnName("Maximum_Price");

                entity.Property(e => e.ReceivedDate)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Received_Date");

                entity.Property(e => e.SbeSent).HasColumnName("SBE_Sent");

                entity.Property(e => e.SbeStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBE_Status");

                entity.Property(e => e.SentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sent_Date");
            });

            modelBuilder.Entity<BastionTrojanRequest>(entity =>
            {
                entity.HasKey(e => e.TrojanId);

                entity.ToTable("BastionTrojanRequest", "Claim");

                entity.Property(e => e.TrojanId).HasColumnName("Trojan_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.DateOut)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Out");

                entity.Property(e => e.InboundTrackingNo)
                    .HasMaxLength(250)
                    .HasColumnName("Inbound_Tracking_No");

                entity.Property(e => e.OutboundTrackingNo)
                    .HasMaxLength(250)
                    .HasColumnName("Outbound_Tracking_No");

                entity.Property(e => e.QuoteReserve)
                    .HasMaxLength(250)
                    .HasColumnName("Quote_Reserve");

                entity.Property(e => e.RepairerId)
                    .HasMaxLength(250)
                    .HasColumnName("Repairer_ID");

                entity.Property(e => e.SentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sent_Date");

                entity.Property(e => e.SubTotal).HasColumnName("Sub_Total");

                entity.Property(e => e.TrojanSent).HasColumnName("Trojan_Sent");

                entity.Property(e => e.Vat).HasColumnName("VAT");

                entity.Property(e => e.VatStatus)
                    .HasMaxLength(250)
                    .HasColumnName("VAT_Status");

                entity.Property(e => e.WorkDone)
                    .IsUnicode(false)
                    .HasColumnName("Work_Done");
            });

            modelBuilder.Entity<BatchPosting>(entity =>
            {
                entity.HasKey(e => e.BpId);

                entity.ToTable("Batch_Postings", "Accounts");

                entity.Property(e => e.BpId).HasColumnName("bp_id");

                entity.Property(e => e.BpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bp_date");

                entity.Property(e => e.BpItems).HasColumnName("bp_items");

                entity.Property(e => e.BpItemsPosted).HasColumnName("bp_items_posted");

                entity.Property(e => e.BpParam1)
                    .HasMaxLength(4000)
                    .HasColumnName("bp_param1");

                entity.Property(e => e.BpParam2)
                    .HasMaxLength(4000)
                    .HasColumnName("bp_param2");

                entity.Property(e => e.BpParam3)
                    .HasMaxLength(4000)
                    .HasColumnName("bp_param3");

                entity.Property(e => e.BpParam4)
                    .HasMaxLength(4000)
                    .HasColumnName("bp_param4");

                entity.Property(e => e.BpSpName)
                    .HasMaxLength(50)
                    .HasColumnName("bp_sp_name");

                entity.Property(e => e.BpUserId).HasColumnName("bp_user_id");
            });

            modelBuilder.Entity<BiDescCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BI_DescCount", "MI");

                entity.Property(e => e.BiDescription)
                    .HasMaxLength(200)
                    .HasColumnName("BI_Description");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");
            });

            modelBuilder.Entity<BiDescCount150>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BI_DescCount150", "MI");

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");
            });

            modelBuilder.Entity<BiHiDesc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BI_HiDEsc", "MI");

                entity.Property(e => e.BiDescription)
                    .HasMaxLength(200)
                    .HasColumnName("BI_Description");

                entity.Property(e => e.Score).HasColumnName("score");
            });

            modelBuilder.Entity<Bimonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BIMonthly", "MI");

                entity.Property(e => e.M1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m1")
                    .IsFixedLength();

                entity.Property(e => e.M10)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m10")
                    .IsFixedLength();

                entity.Property(e => e.M11)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m11")
                    .IsFixedLength();

                entity.Property(e => e.M12)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m12")
                    .IsFixedLength();

                entity.Property(e => e.M2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m2")
                    .IsFixedLength();

                entity.Property(e => e.M3)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m3")
                    .IsFixedLength();

                entity.Property(e => e.M4)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m4")
                    .IsFixedLength();

                entity.Property(e => e.M5)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m5")
                    .IsFixedLength();

                entity.Property(e => e.M6)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m6")
                    .IsFixedLength();

                entity.Property(e => e.M7)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m7")
                    .IsFixedLength();

                entity.Property(e => e.M8)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m8")
                    .IsFixedLength();

                entity.Property(e => e.M9)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m9")
                    .IsFixedLength();
            });

            modelBuilder.Entity<BlCreditor>(entity =>
            {
                entity.HasKey(e => e.BlcId);

                entity.ToTable("BL_Creditors", "Accounts");

                entity.HasIndex(e => new { e.BlcSupplierId, e.BlcOhsId, e.BlcTransPeriod, e.BlcPostingType }, "IXNC_BL_Creditors_blc_supplier_id_blc_ohs_id_blc_trans_period_blc_posting_type_45EE4");

                entity.Property(e => e.BlcId).HasColumnName("blc_id");

                entity.Property(e => e.BlcAccountingPeriod).HasColumnName("blc_accounting_period");

                entity.Property(e => e.BlcAllocRef).HasColumnName("blc_alloc_ref");

                entity.Property(e => e.BlcBalance)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("blc_balance");

                entity.Property(e => e.BlcDate)
                    .HasColumnType("date")
                    .HasColumnName("blc_date");

                entity.Property(e => e.BlcGross)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("blc_gross");

                entity.Property(e => e.BlcNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("blc_notes");

                entity.Property(e => e.BlcOhsId).HasColumnName("blc_ohs_id");

                entity.Property(e => e.BlcPemId).HasColumnName("blc_pem_id");

                entity.Property(e => e.BlcPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("blc_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.BlcSupplierId).HasColumnName("blc_supplier_id");

                entity.Property(e => e.BlcTransPeriod).HasColumnName("blc_trans_period");

                entity.Property(e => e.BlcTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("blc_trans_ref");
            });

            modelBuilder.Entity<BlPaid>(entity =>
            {
                entity.HasKey(e => e.BlpId);

                entity.ToTable("BL_Paids", "Accounts");

                entity.HasIndex(e => e.BlpPemId, "IXNC_BL_Paids_blp_pem_id_6BE43");

                entity.HasIndex(e => e.BlpSupplierId, "IXNC_BL_Paids_blp_supplier_id_86A92");

                entity.Property(e => e.BlpId).HasColumnName("blp_id");

                entity.Property(e => e.BlpAccountingPeriod).HasColumnName("blp_accounting_period");

                entity.Property(e => e.BlpAllocRef).HasColumnName("blp_alloc_ref");

                entity.Property(e => e.BlpAllocated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("blp_allocated");

                entity.Property(e => e.BlpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("blp_date");

                entity.Property(e => e.BlpDisputed).HasColumnName("blp_disputed");

                entity.Property(e => e.BlpGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("blp_gross");

                entity.Property(e => e.BlpNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("blp_notes");

                entity.Property(e => e.BlpOhsId).HasColumnName("blp_ohs_id");

                entity.Property(e => e.BlpPemId).HasColumnName("blp_pem_id");

                entity.Property(e => e.BlpPimId).HasColumnName("blp_pim_id");

                entity.Property(e => e.BlpPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("blp_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.BlpSupplierId).HasColumnName("blp_supplier_id");

                entity.Property(e => e.BlpTransPeriod).HasColumnName("blp_trans_period");

                entity.Property(e => e.BlpTransRef)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("blp_trans_ref");
            });

            modelBuilder.Entity<BlUnpaid>(entity =>
            {
                entity.HasKey(e => e.BluId);

                entity.ToTable("BL_Unpaids", "Accounts");

                entity.HasIndex(e => e.BluOhsId, "IXNC_BL_Unpaids_blu_ohs_id_E6FE1");

                entity.HasIndex(e => e.BluPemId, "IXNC_BL_Unpaids_blu_pem_id_066A3");

                entity.HasIndex(e => new { e.BluSupplierId, e.BluOhsId, e.BluTransPeriod, e.BluPostingType }, "IXNC_BL_Unpaids_blu_supplier_id_blu_ohs_id_blu_trans_period_blu_posting_type_27AF6");

                entity.Property(e => e.BluId).HasColumnName("blu_id");

                entity.Property(e => e.BluAccountingPeriod).HasColumnName("blu_accounting_period");

                entity.Property(e => e.BluAllocRef).HasColumnName("blu_alloc_ref");

                entity.Property(e => e.BluAllocated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("blu_allocated");

                entity.Property(e => e.BluBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("blu_balance");

                entity.Property(e => e.BluDate)
                    .HasColumnType("datetime")
                    .HasColumnName("blu_date");

                entity.Property(e => e.BluDisputed).HasColumnName("blu_disputed");

                entity.Property(e => e.BluGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("blu_gross");

                entity.Property(e => e.BluNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("blu_notes");

                entity.Property(e => e.BluOhsId).HasColumnName("blu_ohs_id");

                entity.Property(e => e.BluPemId).HasColumnName("blu_pem_id");

                entity.Property(e => e.BluPimId).HasColumnName("blu_pim_id");

                entity.Property(e => e.BluPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("blu_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.BluSupplierId).HasColumnName("blu_supplier_id");

                entity.Property(e => e.BluTransPeriod).HasColumnName("blu_trans_period");

                entity.Property(e => e.BluTransRef)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("blu_trans_ref");
            });

            modelBuilder.Entity<BonusCalculated>(entity =>
            {
                entity.HasKey(e => e.BcId);

                entity.ToTable("bonus_calculated", "MI");

                entity.Property(e => e.BcId).HasColumnName("bc_id");

                entity.Property(e => e.BcBonusType)
                    .HasMaxLength(1)
                    .HasColumnName("bc_bonus_type");

                entity.Property(e => e.BcCalcBonus)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bc_calc_bonus");

                entity.Property(e => e.BcClaimHandlerId).HasColumnName("bc_claim_handler_id");

                entity.Property(e => e.BcDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bc_date");

                entity.Property(e => e.BcDayOfYear).HasColumnName("bc_day_of_year");

                entity.Property(e => e.BcMonth)
                    .HasMaxLength(6)
                    .HasColumnName("bc_month");

                entity.Property(e => e.BcNotes)
                    .HasMaxLength(50)
                    .HasColumnName("bc_notes");

                entity.Property(e => e.BcPeriodGp)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bc_period_gp");

                entity.Property(e => e.BcPeriodGpAdditional)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bc_period_gp_additional");

                entity.Property(e => e.BcVersion).HasColumnName("bc_version");

                entity.Property(e => e.BcWeekNo).HasColumnName("bc_week_no");
            });

            modelBuilder.Entity<BonusCalculatedBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bonus_calculated_backup", "MI");

                entity.Property(e => e.BcBonusType)
                    .HasMaxLength(1)
                    .HasColumnName("bc_bonus_type");

                entity.Property(e => e.BcCalcBonus)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bc_calc_bonus");

                entity.Property(e => e.BcClaimHandlerId).HasColumnName("bc_claim_handler_id");

                entity.Property(e => e.BcDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bc_date");

                entity.Property(e => e.BcDayOfYear).HasColumnName("bc_day_of_year");

                entity.Property(e => e.BcId).HasColumnName("bc_id");

                entity.Property(e => e.BcMonth)
                    .HasMaxLength(6)
                    .HasColumnName("bc_month");

                entity.Property(e => e.BcNotes)
                    .HasMaxLength(50)
                    .HasColumnName("bc_notes");

                entity.Property(e => e.BcPeriodGp)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bc_period_gp");

                entity.Property(e => e.BcPeriodGpAdditional)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bc_period_gp_additional");

                entity.Property(e => e.BcVersion).HasColumnName("bc_version");

                entity.Property(e => e.BcWeekNo).HasColumnName("bc_week_no");
            });

            modelBuilder.Entity<BonusEvent>(entity =>
            {
                entity.HasKey(e => e.BeId);

                entity.ToTable("bonus_events", "MI");

                entity.Property(e => e.BeId).HasColumnName("be_id");

                entity.Property(e => e.BeCalcDate)
                    .HasColumnType("datetime")
                    .HasColumnName("be_calc_date");

                entity.Property(e => e.BeCalcVersion).HasColumnName("be_calc_version");

                entity.Property(e => e.BeMonth)
                    .HasMaxLength(6)
                    .HasColumnName("be_month");

                entity.Property(e => e.BeUserId).HasColumnName("be_user_id");
            });

            modelBuilder.Entity<BonusGpByClaim>(entity =>
            {
                entity.HasKey(e => e.BgId);

                entity.ToTable("bonus_GP_by_claim", "MI");

                entity.Property(e => e.BgId).HasColumnName("bg_id");

                entity.Property(e => e.BgClaimHandlerId).HasColumnName("bg_claim_handler_id");

                entity.Property(e => e.BgClaimId).HasColumnName("bg_claim_id");

                entity.Property(e => e.BgDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bg_date");

                entity.Property(e => e.BgDayOfYear).HasColumnName("bg_day_of_year");

                entity.Property(e => e.BgGp)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bg_gp");

                entity.Property(e => e.BgGpAdditional)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bg_gp_additional");

                entity.Property(e => e.BgMonth)
                    .HasMaxLength(6)
                    .HasColumnName("bg_month");

                entity.Property(e => e.BgVersion).HasColumnName("bg_version");
            });

            modelBuilder.Entity<BonusGpByClaimBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bonus_GP_by_claim_backup", "MI");

                entity.Property(e => e.BgClaimHandlerId).HasColumnName("bg_claim_handler_id");

                entity.Property(e => e.BgClaimId).HasColumnName("bg_claim_id");

                entity.Property(e => e.BgDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bg_date");

                entity.Property(e => e.BgDayOfYear).HasColumnName("bg_day_of_year");

                entity.Property(e => e.BgGp)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bg_gp");

                entity.Property(e => e.BgGpAdditional)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bg_gp_additional");

                entity.Property(e => e.BgId).HasColumnName("bg_id");

                entity.Property(e => e.BgMonth)
                    .HasMaxLength(6)
                    .HasColumnName("bg_month");

                entity.Property(e => e.BgVersion).HasColumnName("bg_version");
            });

            modelBuilder.Entity<BonusOverride>(entity =>
            {
                entity.HasKey(e => e.BoId);

                entity.ToTable("bonus_overrides", "MI");

                entity.Property(e => e.BoId).HasColumnName("bo_id");

                entity.Property(e => e.BoMinPerMonth)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bo_min_per_month");

                entity.Property(e => e.BoMinPerWeek)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("bo_min_per_week");
            });

            modelBuilder.Entity<BonusRate>(entity =>
            {
                entity.HasKey(e => e.BrId);

                entity.ToTable("bonus_rates", "MI");

                entity.Property(e => e.BrId).HasColumnName("br_id");

                entity.Property(e => e.BrBonus)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("br_bonus");

                entity.Property(e => e.BrDwm)
                    .HasMaxLength(1)
                    .HasColumnName("br_dwm");

                entity.Property(e => e.BrThreshold)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("br_threshold");
            });

            modelBuilder.Entity<BookingOnUpdate>(entity =>
            {
                entity.HasKey(e => e.BouId);

                entity.ToTable("BookingOnUpdate", "Claim");

                entity.Property(e => e.BouId).HasColumnName("BOU_ID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.EmailDate).HasColumnType("datetime");

                entity.Property(e => e.EmailFrom).HasMaxLength(250);

                entity.Property(e => e.EmailTo).HasMaxLength(250);

                entity.Property(e => e.Lareference)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.PrevActionId).HasColumnName("PrevActionID");

                entity.Property(e => e.Subject).HasMaxLength(1000);
            });

            modelBuilder.Entity<BordereauCode>(entity =>
            {
                entity.HasKey(e => e.BcId);

                entity.ToTable("Bordereau_Codes", "Accounts");

                entity.Property(e => e.BcId).HasColumnName("bc_id");

                entity.Property(e => e.BcCode)
                    .HasMaxLength(30)
                    .HasColumnName("bc_code");

                entity.Property(e => e.BcDescription)
                    .HasMaxLength(200)
                    .HasColumnName("bc_description");

                entity.Property(e => e.BcInsCoId).HasColumnName("bc_ins_co_id");

                entity.Property(e => e.BcMarkup)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("bc_markup");
            });

            modelBuilder.Entity<BordereauSetting>(entity =>
            {
                entity.HasKey(e => e.BsId);

                entity.ToTable("Bordereau_Settings", "Accounts");

                entity.Property(e => e.BsId).HasColumnName("bs_id");

                entity.Property(e => e.BsLgTextFiles)
                    .HasMaxLength(50)
                    .HasColumnName("bs_LG_Text_Files");
            });

            modelBuilder.Entity<Brand>(entity =>
            {
                entity.ToTable("Brand", "Product");

                entity.HasIndex(e => e.BrandName, "IXNC_Brand_BrandName_79043");

                entity.HasIndex(e => new { e.BrandId, e.BrandName }, "_dta_index_Brand_16_1024722703__K1_K2");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.BrandName).HasMaxLength(200);
            });

            modelBuilder.Entity<BrandBanding>(entity =>
            {
                entity.HasKey(e => e.BandingId)
                    .HasName("PK_Product.BrandBanding_1");

                entity.ToTable("BrandBanding", "Product");

                entity.HasIndex(e => new { e.AccountId, e.FamilyId, e.BrandId, e.Band }, "_dta_index_BrandBanding_16_1056722817__K2_K3_K4_K5");

                entity.Property(e => e.BandingId).HasColumnName("BandingID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            });

            modelBuilder.Entity<CActionType>(entity =>
            {
                entity.HasKey(e => e.ActionTypeId);

                entity.ToTable("c_ActionType", "Site");

                entity.Property(e => e.ActionTypeId).HasColumnName("ActionTypeID");

                entity.Property(e => e.ActionTypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<CComplaint>(entity =>
            {
                entity.HasKey(e => e.ComplaintId)
                    .HasName("PK_c_complaint#");

                entity.ToTable("c_Complaint", "Site");

                entity.HasIndex(e => e.ClaimId, "IXNC_c_Complaint_ClaimID_1A934");

                entity.HasIndex(e => e.DateCreated, "_dta_index_c_Complaint_17_1872725724__K5");

                entity.HasIndex(e => new { e.DateCreated, e.ComplaintId, e.ClaimId }, "_dta_index_c_Complaint_8_1872725724__K5_K1_K2");

                entity.HasIndex(e => new { e.ComplaintId, e.ClaimId }, "_dta_index_c_Complaint_9_1872725724__K1_K2");

                entity.Property(e => e.ComplaintId).HasColumnName("ComplaintID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.CompensationAmount).HasColumnType("money");

                entity.Property(e => e.CompensationReason).HasColumnType("ntext");

                entity.Property(e => e.CompensationType).HasMaxLength(50);

                entity.Property(e => e.Complainant).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateResolved).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Resolution).HasColumnType("ntext");

                entity.Property(e => e.Text).HasMaxLength(3000);

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.CComplaints)
                    .HasForeignKey(d => d.ClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_c_Complaint_InsuranceClaim");
            });

            modelBuilder.Entity<CComplaintAction>(entity =>
            {
                entity.HasKey(e => e.ComplaintActionId);

                entity.ToTable("c_ComplaintAction", "Site");

                entity.Property(e => e.ComplaintActionId).HasColumnName("ComplaintActionID");

                entity.Property(e => e.ActionTypeId).HasColumnName("ActionTypeID");

                entity.Property(e => e.ComplaintId).HasColumnName("ComplaintID");

                entity.Property(e => e.CreatedById).HasColumnName("CreatedByID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Text).HasColumnType("ntext");
            });

            modelBuilder.Entity<CComplaintCategory>(entity =>
            {
                entity.HasKey(e => e.ComplaintCategoryId);

                entity.ToTable("c_ComplaintCategory", "Site");

                entity.Property(e => e.ComplaintCategoryId).HasColumnName("ComplaintCategoryID");

                entity.Property(e => e.ComplaintCategoryName).HasMaxLength(2000);
            });

            modelBuilder.Entity<CComplaintStatus>(entity =>
            {
                entity.HasKey(e => e.ComplaintStatusId);

                entity.ToTable("c_ComplaintStatus", "Site");

                entity.Property(e => e.ComplaintStatusId).HasColumnName("ComplaintStatusID");

                entity.Property(e => e.ComplaintStatusText).HasMaxLength(50);
            });

            modelBuilder.Entity<CComplaintStatusHistory>(entity =>
            {
                entity.HasKey(e => e.ComplaintStatusHistoryId);

                entity.ToTable("c_ComplaintStatusHistory", "Site");

                entity.Property(e => e.ComplaintStatusHistoryId).HasColumnName("ComplaintStatusHistoryID");

                entity.Property(e => e.ComplaintId).HasColumnName("ComplaintID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DoneBy).HasMaxLength(50);

                entity.Property(e => e.NewStatusId).HasColumnName("NewStatusID");

                entity.Property(e => e.PreviousStatusId).HasColumnName("PreviousStatusID");
            });

            modelBuilder.Entity<CCompliment>(entity =>
            {
                entity.HasKey(e => e.ComplimentId);

                entity.ToTable("c_Compliment", "Site");

                entity.HasIndex(e => e.DateCreated, "_dta_index_c_Compliment_17_2032726294__K5");

                entity.HasIndex(e => e.ClaimId, "_dta_index_c_Compliment_8_2032726294__K2_5");

                entity.Property(e => e.ComplimentId).HasColumnName("ComplimentID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ComplimentDetails).HasColumnType("ntext");

                entity.Property(e => e.ComplimentSource)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Phone call')");

                entity.Property(e => e.ComplimentType).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.HandlerOne).HasMaxLength(50);

                entity.Property(e => e.HandlerTwo).HasMaxLength(50);

                entity.Property(e => e.ReceivedBy).HasMaxLength(50);

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.CCompliments)
                    .HasForeignKey(d => d.ClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_c_Compliment_InsuranceClaim");
            });

            modelBuilder.Entity<CDeliveryInspCompany>(entity =>
            {
                entity.HasKey(e => e.DiId);

                entity.ToTable("c_Delivery_Insp_Company", "Site");

                entity.Property(e => e.DiId).HasColumnName("di_ID");

                entity.Property(e => e.DiDeliveryCompId).HasColumnName("di_DeliveryCompID");

                entity.Property(e => e.DiInspCompId).HasColumnName("di_InspCompID");

                entity.Property(e => e.DiProductCode)
                    .HasMaxLength(50)
                    .HasColumnName("di_ProductCode");
            });

            modelBuilder.Entity<CDeliveryOrder>(entity =>
            {
                entity.HasKey(e => e.DoId);

                entity.ToTable("c_DeliveryOrders", "Site");

                entity.HasIndex(e => e.DoInspectionId, "IXNC_c_DeliveryOrders_do_InspectionID_B6927");

                entity.HasIndex(e => e.DoSent, "IXNC_c_DeliveryOrders_do_Sent_2BC01");

                entity.Property(e => e.DoId).HasColumnName("do_ID");

                entity.Property(e => e.DoDateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("do_DateCreated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DoDateDeliveryExpected)
                    .HasColumnType("datetime")
                    .HasColumnName("do_DateDeliveryExpected");

                entity.Property(e => e.DoDateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("do_DateSent");

                entity.Property(e => e.DoInspectionId).HasColumnName("do_InspectionID");

                entity.Property(e => e.DoProductCode)
                    .HasMaxLength(200)
                    .HasColumnName("do_ProductCode");

                entity.Property(e => e.DoSent).HasColumnName("do_Sent");

                entity.Property(e => e.DoService).HasColumnName("do_Service");
            });

            modelBuilder.Entity<CDeliveryServiceCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("c_DeliveryServiceCodes", "Site");

                entity.Property(e => e.DsAdditionalSupplierServiceId).HasColumnName("ds_AdditionalSupplierServiceID");

                entity.Property(e => e.DsDateModifier).HasColumnName("ds_DateModifier");

                entity.Property(e => e.DsDefault)
                    .IsRequired()
                    .HasColumnName("ds_Default")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DsDeliveryCompanyId).HasColumnName("ds_DeliveryCompanyID");

                entity.Property(e => e.DsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ds_ID");

                entity.Property(e => e.DsOveridingService).HasColumnName("ds_OveridingService");

                entity.Property(e => e.DsParentSupplierServiceId).HasColumnName("ds_ParentSupplierServiceID");

                entity.Property(e => e.DsServiceCode).HasColumnName("ds_ServiceCode");

                entity.Property(e => e.DsServiceText)
                    .HasMaxLength(50)
                    .HasColumnName("ds_ServiceText");
            });

            modelBuilder.Entity<Call>(entity =>
            {
                entity.ToTable("Calls", "Site");

                entity.HasIndex(e => e.CallProfId, "IXNC_Calls_CallProfID_B8FDD");

                entity.HasIndex(e => e.CallProfId, "IXNC_Calls_CallProfID_EB420");

                entity.HasIndex(e => e.CallTo, "IXNC_Calls_CallTo_C9E39");

                entity.HasIndex(e => e.InsuranceClaimId, "IXNC_Calls_InsuranceClaimID_BF35A");

                entity.HasIndex(e => new { e.CallId, e.CallProfId }, "_dta_index_Calls_9_45243216__K1_K2");

                entity.Property(e => e.CallId).HasColumnName("CallID");

                entity.Property(e => e.CallAnswered)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CallNotes).HasColumnType("ntext");

                entity.Property(e => e.CallOn)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallProfId).HasColumnName("CallProfID");

                entity.Property(e => e.CallToOtherDetails).HasColumnType("text");

                entity.Property(e => e.CallTypeId).HasColumnName("CallTypeID");

                entity.Property(e => e.Dpasuccessful).HasColumnName("DPASuccessful");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.WarrantyClaimId).HasColumnName("WarrantyClaimID");

                entity.HasOne(d => d.CallProf)
                    .WithMany(p => p.Calls)
                    .HasForeignKey(d => d.CallProfId)
                    .HasConstraintName("FK_Calls_CallProfiles");
            });

            modelBuilder.Entity<CallProfile>(entity =>
            {
                entity.HasKey(e => e.CallProfId);

                entity.ToTable("CallProfiles", "Site");

                entity.Property(e => e.CallProfId).HasColumnName("CallProfID");

                entity.Property(e => e.EventId)
                    .HasColumnName("EventID")
                    .HasComment("The event thats associated with making a call on this profile");

                entity.Property(e => e.Open)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Should this call profile be used");

                entity.HasOne(d => d.ReasonNavigation)
                    .WithMany(p => p.CallProfiles)
                    .HasForeignKey(d => d.Reason)
                    .HasConstraintName("FK_CallProfiles_CallReason");
            });

            modelBuilder.Entity<CallReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId);

                entity.ToTable("CallReason", "Site");

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");

                entity.Property(e => e.Reason).HasMaxLength(255);
            });

            modelBuilder.Entity<CallType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CallType", "Site");

                entity.Property(e => e.CallType1)
                    .HasMaxLength(255)
                    .HasColumnName("CallType");

                entity.Property(e => e.CallTypeId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Caller>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Caller", "Site");

                entity.Property(e => e.Caller1)
                    .HasMaxLength(255)
                    .HasColumnName("Caller");

                entity.Property(e => e.CallerId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CallerID");
            });

            modelBuilder.Entity<CallsDpa>(entity =>
            {
                entity.ToTable("calls_dpas", "Site");

                entity.HasIndex(e => e.Callid, "IXNC_calls_dpas_callid_89802");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Callid).HasColumnName("callid");

                entity.Property(e => e.Dpaid).HasColumnName("dpaid");
            });

            modelBuilder.Entity<CancelPo>(entity =>
            {
                entity.ToTable("CancelPO", "Supplier");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.SupplierName).HasMaxLength(200);
            });

            modelBuilder.Entity<CarpetrightVoucher>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CarpetrightVouchers", "Claim");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.Hash).HasMaxLength(200);

                entity.Property(e => e.Phemail)
                    .HasMaxLength(100)
                    .HasColumnName("PHEmail");
            });

            modelBuilder.Entity<CarpetrightVouchersInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CarpetrightVouchersInfo", "Claim");

                entity.Property(e => e.Pan)
                    .HasMaxLength(20)
                    .HasColumnName("PAN");

                entity.Property(e => e.Pin).HasMaxLength(10);

                entity.Property(e => e.Serial).HasMaxLength(20);

                entity.Property(e => e.Url).HasMaxLength(400);

                entity.Property(e => e.Value).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<CashSettlement>(entity =>
            {
                entity.ToTable("CashSettlement", "Site");

                entity.Property(e => e.CashSettlementId).HasColumnName("CashSettlementID");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.LiabilitisedValue).HasColumnType("money");

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");
            });

            modelBuilder.Entity<CashSettlementClaim>(entity =>
            {
                entity.HasKey(e => e.CscId);

                entity.ToTable("CashSettlementClaims", "Accounts");

                entity.Property(e => e.CscId).HasColumnName("CSC_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.Handler)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TickedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Ticked_Date");
            });

            modelBuilder.Entity<CashSettlementReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId);

                entity.ToTable("CashSettlementReason", "Site");

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");

                entity.Property(e => e.ReasonText).HasMaxLength(50);
            });

            modelBuilder.Entity<Cat>(entity =>
            {
                entity.ToTable("Cat", "Amazon");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Itemid).HasColumnName("itemid");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasColumnName("name");

                entity.Property(e => e.Path)
                    .HasMaxLength(200)
                    .HasColumnName("path");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Cats)
                    .HasForeignKey(d => d.Itemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cat_Item");
            });

            modelBuilder.Entity<CatItem>(entity =>
            {
                entity.ToTable("CatItem", "Amazon");

                entity.HasIndex(e => e.ItemId, "IXNC_CatItem_ItemID_7EFE7");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MerchCatName).HasColumnName("merch_cat_name");

                entity.Property(e => e.MerchCatPath)
                    .HasMaxLength(500)
                    .HasColumnName("merch_cat_path");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.CatItems)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatItem_CatItem");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Categories", "MI");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCatDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cat_Desc");
            });

            modelBuilder.Entity<Category1>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK_Product.Category_1");

                entity.ToTable("Category", "Product");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName).HasMaxLength(200);

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.GfkCategoryId).HasColumnName("gfkCategoryID");

                entity.Property(e => e.GfksectorId)
                    .HasColumnName("GFKSectorID")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Cause>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cause", "MI");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_type_id");

                entity.Property(e => e.MiCauseDesc)
                    .HasMaxLength(255)
                    .HasColumnName("MI_Cause_Desc");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_ID");
            });

            modelBuilder.Entity<CauseType>(entity =>
            {
                entity.ToTable("CauseType", "Site");

                entity.HasIndex(e => e.Description, "IX_CauseType")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");
            });

            modelBuilder.Entity<Change>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPreApril2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_preApril2", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPreapril>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_preapril", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPreaug>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_preaug", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPredec>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_predec", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPredec2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_predec2", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPrefeb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_prefeb", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPrejuly>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_prejuly", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPrejune>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_prejune", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPremarch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_premarch", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPremay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_premay", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPrenov>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_prenov", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPreoct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_preoct", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPreoct2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_preoct2", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPresept>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_presept", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");

                entity.Property(e => e.OldCattext)
                    .HasMaxLength(50)
                    .HasColumnName("old-cattext");
            });

            modelBuilder.Entity<ChangesPresept2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_presept2", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<ChangesPresept3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changes_presept3", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<Changesbulkfeb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changesbulkfeb", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment).HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext).HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<Changesdecbulk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changesdecbulk", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<Changesoct11>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changesoct11", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<Changesprenov11>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changesprenov11", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<Changesq>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Changesq", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Ct).HasColumnName("ct");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");
            });

            modelBuilder.Entity<CheckTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CheckTest", "nCompass");

                entity.Property(e => e.BiDescriptionId).HasColumnName("BI_description_Id");

                entity.Property(e => e.BiOptionId).HasColumnName("BI_Option_ID");

                entity.Property(e => e.BiResponseId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BI_Response_ID");

                entity.Property(e => e.BiScore).HasColumnName("BI_Score");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<Checkissue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("checkissues", "Site");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SOutcome).HasColumnName("s_outcome");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");
            });

            modelBuilder.Entity<Checkorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("checkorders", "Site");

                entity.Property(e => e.ClaimOrderId).ValueGeneratedOnAdd();

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Checkrepaired>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("checkrepaired", "Site");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspSupplierId).HasColumnName("s_insp_supplier_id");

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SOutcome).HasColumnName("s_outcome");

                entity.Property(e => e.SOutcomeId).HasColumnName("s_outcome_id");
            });

            modelBuilder.Entity<Checkresponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Checkresponse", "MI");

                entity.Property(e => e.Closex).HasMaxLength(50);
            });

            modelBuilder.Entity<Checkstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Checkstatus", "Site");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspectionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_inspection_id");

                entity.Property(e => e.SStatus).HasColumnName("s_status");
            });

            modelBuilder.Entity<Checkview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("checkview", "Site");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SInsCompany).HasColumnName("s_ins_company");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspSupplierId).HasColumnName("s_insp_supplier_id");

                entity.Property(e => e.SInspType).HasColumnName("s_insp_type");

                entity.Property(e => e.SStatus).HasColumnName("s_status");
            });

            modelBuilder.Entity<ChnageBetterment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("chnage betterment", "Site");

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.InsuranceClaimId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Claim>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Claims", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Claim1>(entity =>
            {
                entity.HasKey(e => e.ClaimId)
                    .HasName("PK_Validation.Claim");

                entity.ToTable("Claim", "Validation");

                entity.HasIndex(e => e.AccountId, "IXNC_Claim_AccountID_5143F");

                entity.HasIndex(e => new { e.AccountId, e.PolicyNumber, e.PostCode, e.DateCreated }, "IXNC_Claim_AccountID_PolicyNumber_PostCode_DateCreated_16BA2");

                entity.HasIndex(e => new { e.PolicyNumber, e.PostCode, e.DateCreated }, "IXNC_Claim_PolicyNumber_PostCode_DateCreated_03239");

                entity.HasIndex(e => e.SbsclaimId, "IXNC_Claim_SBSClaimID_42A7F");

                entity.HasIndex(e => e.AccountId, "_dta_index_Claim_9_1314871801__K4_39");

                entity.HasIndex(e => new { e.DateCreated, e.ClaimId, e.AccountId, e.PolicyNumber, e.PostCode, e.SbsclaimId, e.Username }, "_dta_index_Claim_9_1577772678__K5_K1_K4_K2_K3_K25_K8");

                entity.HasIndex(e => new { e.AccountId, e.UserId, e.Lareference, e.PostCode, e.SbsclaimId }, "_dta_index_Claim_9_1598680793__K4_K7_K35_K3_K39");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.ContactTimes).HasMaxLength(50);

                entity.Property(e => e.CrimeReference).HasMaxLength(50);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateReported).HasColumnType("datetime");

                entity.Property(e => e.DeliveryAddress1).HasMaxLength(50);

                entity.Property(e => e.DeliveryAddress2).HasMaxLength(50);

                entity.Property(e => e.DeliveryAddress3).HasMaxLength(50);

                entity.Property(e => e.DeliveryAddress4).HasMaxLength(50);

                entity.Property(e => e.DuckCreekClaimRef).HasMaxLength(50);

                entity.Property(e => e.ExcessDeducted).HasColumnType("money");

                entity.Property(e => e.Guid)
                    .HasMaxLength(200)
                    .HasColumnName("GUID")
                    .IsFixedLength();

                entity.Property(e => e.HandlerNameAndDepartment).HasMaxLength(60);

                entity.Property(e => e.HandlersAuthorityLimit).HasColumnType("money");

                entity.Property(e => e.IncidentDate).HasColumnType("datetime");

                entity.Property(e => e.Insured2Contact).HasMaxLength(50);

                entity.Property(e => e.Insured2FirstName).HasMaxLength(50);

                entity.Property(e => e.Insured2LastName).HasMaxLength(50);

                entity.Property(e => e.Insured2TitleId).HasColumnName("Insured2TitleID");

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredCompanyName).HasMaxLength(60);

                entity.Property(e => e.InsuredEmail).HasMaxLength(100);

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceRef).HasMaxLength(50);

                entity.Property(e => e.Isvatregistered).HasColumnName("ISVATRegistered");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.LeadItemId).HasColumnName("LeadItemID");

                entity.Property(e => e.LossAddress).HasMaxLength(200);

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.LossDescription).HasMaxLength(4000);

                entity.Property(e => e.Mobile).HasMaxLength(30);

                entity.Property(e => e.PaidDate).HasColumnType("datetime");

                entity.Property(e => e.PerilDetailId).HasColumnName("PerilDetailID");

                entity.Property(e => e.PerilId).HasColumnName("PerilID");

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.PolicyInceptionDate).HasColumnType("datetime");

                entity.Property(e => e.PolicyNumber).HasMaxLength(50);

                entity.Property(e => e.PolicySubType).HasMaxLength(50);

                entity.Property(e => e.PolicyType).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.SbsclaimId).HasColumnName("SBSClaimID");

                entity.Property(e => e.ServiceNumber).HasMaxLength(50);

                entity.Property(e => e.ServiceRequestPublicId)
                    .HasMaxLength(50)
                    .HasColumnName("ServiceRequestPublicID");

                entity.Property(e => e.SingleArticleLimit).HasColumnType("money");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TitleId).HasColumnName("TitleID");

                entity.Property(e => e.TotalExcess).HasColumnType("money");

                entity.Property(e => e.TotalSumInsured).HasColumnType("money");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VatregistrationNumber)
                    .HasMaxLength(50)
                    .HasColumnName("VATRegistrationNumber");

                entity.Property(e => e.ViablesLimit).HasColumnType("money");

                entity.Property(e => e.WorkTelephone).HasMaxLength(30);

                entity.HasOne(d => d.LeadItem)
                    .WithMany(p => p.Claim1s)
                    .HasForeignKey(d => d.LeadItemId)
                    .HasConstraintName("FK_Claim_ClaimItem");
            });

            modelBuilder.Entity<ClaimActionOutcome>(entity =>
            {
                entity.ToTable("ClaimActionOutcomes", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ChosenOutcome).HasComment("The ID of the action that the user has decided to move onto.");

                entity.Property(e => e.OutcomeOptions).HasComment("A comma separated list of suggested actions to move to.");

                entity.HasOne(d => d.ChosenOutcomeNavigation)
                    .WithMany(p => p.ClaimActionOutcomes)
                    .HasForeignKey(d => d.ChosenOutcome)
                    .HasConstraintName("FK_ClaimActionOutcomes_Action");
            });

            modelBuilder.Entity<ClaimComplaint>(entity =>
            {
                entity.ToTable("ClaimComplaint", "Site");

                entity.Property(e => e.AliasClaimComplaintId)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.SortSequence).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ClaimDatum>(entity =>
            {
                entity.ToTable("ClaimData", "MI");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Claimcommodity)
                    .HasMaxLength(255)
                    .HasColumnName("claimcommodity");

                entity.Property(e => e.Claimtype)
                    .HasMaxLength(255)
                    .HasColumnName("claimtype");

                entity.Property(e => e.Claimtypedescription)
                    .HasMaxLength(255)
                    .HasColumnName("claimtypedescription");

                entity.Property(e => e.Claimvalue).HasColumnName("claimvalue");

                entity.Property(e => e.CoClaimId).HasColumnName("co_claim_id");

                entity.Property(e => e.CoClaimOutcome)
                    .HasMaxLength(255)
                    .HasColumnName("co_claim_outcome");

                entity.Property(e => e.CoCommodity)
                    .HasMaxLength(255)
                    .HasColumnName("co_commodity");

                entity.Property(e => e.CoDateClosed)
                    .HasColumnType("datetime")
                    .HasColumnName("co_date_closed");

                entity.Property(e => e.CoDateOpened)
                    .HasColumnType("datetime")
                    .HasColumnName("co_date_opened");

                entity.Property(e => e.CoInsco)
                    .HasMaxLength(255)
                    .HasColumnName("co_insco");

                entity.Property(e => e.CoLaName)
                    .HasMaxLength(255)
                    .HasColumnName("co_la_name");

                entity.Property(e => e.CoLaRef)
                    .HasMaxLength(255)
                    .HasColumnName("co_la_ref");

                entity.Property(e => e.CoOutcome)
                    .HasMaxLength(255)
                    .HasColumnName("co_outcome");

                entity.Property(e => e.CoPeril)
                    .HasMaxLength(255)
                    .HasColumnName("co_peril");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Gmgnid).HasColumnName("gmgnid");

                entity.Property(e => e.Handler)
                    .HasMaxLength(255)
                    .HasColumnName("handler");

                entity.Property(e => e.Hometelephone)
                    .HasMaxLength(255)
                    .HasColumnName("hometelephone");

                entity.Property(e => e.IiCarriageCost)
                    .HasMaxLength(255)
                    .HasColumnName("ii_carriage_cost");

                entity.Property(e => e.IiClaimorderid).HasColumnName("ii_claimorderid");

                entity.Property(e => e.IiDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_date");

                entity.Property(e => e.IiDescription)
                    .HasMaxLength(255)
                    .HasColumnName("ii_description");

                entity.Property(e => e.IiGoodsCost)
                    .HasMaxLength(255)
                    .HasColumnName("ii_goods_cost");

                entity.Property(e => e.IiGross)
                    .HasMaxLength(255)
                    .HasColumnName("ii_gross");

                entity.Property(e => e.IiInvNo)
                    .HasMaxLength(255)
                    .HasColumnName("ii_inv_no");

                entity.Property(e => e.IiNet)
                    .HasMaxLength(255)
                    .HasColumnName("ii_net");

                entity.Property(e => e.IiPoConfirmedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_po_confirmed_date");

                entity.Property(e => e.IiPoDelDateConfirmed)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_po_del_date_confirmed");

                entity.Property(e => e.IiPoDelDateEst)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_po_del_date_est");

                entity.Property(e => e.IiPoNumber)
                    .HasMaxLength(255)
                    .HasColumnName("ii_po_number");

                entity.Property(e => e.IiPoOriginalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ii_po_original_date");

                entity.Property(e => e.IiProductCode)
                    .HasMaxLength(255)
                    .HasColumnName("ii_product_code");

                entity.Property(e => e.IiQuantity)
                    .HasMaxLength(255)
                    .HasColumnName("ii_quantity");

                entity.Property(e => e.IiSupplier)
                    .HasMaxLength(255)
                    .HasColumnName("ii_supplier");

                entity.Property(e => e.Insuredlastname)
                    .HasMaxLength(255)
                    .HasColumnName("insuredlastname");

                entity.Property(e => e.Insuredpostcode)
                    .HasMaxLength(255)
                    .HasColumnName("insuredpostcode");

                entity.Property(e => e.Itemid).HasColumnName("itemid");

                entity.Property(e => e.Itemtype)
                    .HasMaxLength(255)
                    .HasColumnName("itemtype");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(255)
                    .HasColumnName("lareference");

                entity.Property(e => e.LineItemCategory).HasDefaultValueSql("((1))");

                entity.Property(e => e.Make)
                    .HasMaxLength(255)
                    .HasColumnName("make");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(255)
                    .HasColumnName("mobile");

                entity.Property(e => e.Model)
                    .HasMaxLength(255)
                    .HasColumnName("model");

                entity.Property(e => e.Peril)
                    .HasMaxLength(255)
                    .HasColumnName("peril");

                entity.Property(e => e.Perildetail)
                    .HasMaxLength(255)
                    .HasColumnName("perildetail");

                entity.Property(e => e.Policynumber)
                    .HasMaxLength(255)
                    .HasColumnName("policynumber");

                entity.Property(e => e.Suppliername)
                    .HasMaxLength(255)
                    .HasColumnName("suppliername");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .HasColumnName("username");

                entity.Property(e => e.Vatregistered)
                    .HasMaxLength(255)
                    .HasColumnName("vatregistered");

                entity.Property(e => e.Worktelephone)
                    .HasMaxLength(255)
                    .HasColumnName("worktelephone");
            });

            modelBuilder.Entity<ClaimEvent>(entity =>
            {
                entity.ToTable("ClaimEvents", "MI");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Additionalgoodsordered)
                    .HasMaxLength(255)
                    .HasColumnName("additionalgoodsordered");

                entity.Property(e => e.Assignoutcome)
                    .HasMaxLength(255)
                    .HasColumnName("assignoutcome");

                entity.Property(e => e.Awaitingcarpetsample)
                    .HasMaxLength(255)
                    .HasColumnName("awaitingcarpetsample");

                entity.Property(e => e.Awaitingfittingdate)
                    .HasMaxLength(255)
                    .HasColumnName("awaitingfittingdate");

                entity.Property(e => e.Awaitingproofofpurchase)
                    .HasMaxLength(255)
                    .HasColumnName("awaitingproofofpurchase");

                entity.Property(e => e.Berack)
                    .HasMaxLength(255)
                    .HasColumnName("berack");

                entity.Property(e => e.Bettermentagreed)
                    .HasMaxLength(255)
                    .HasColumnName("bettermentagreed");

                entity.Property(e => e.Bitoolused)
                    .HasMaxLength(255)
                    .HasColumnName("bitoolused");

                entity.Property(e => e.Cancelledduringtransit)
                    .HasMaxLength(255)
                    .HasColumnName("cancelledduringtransit");

                entity.Property(e => e.Carpetdryingcompleted)
                    .HasMaxLength(255)
                    .HasColumnName("carpetdryingcompleted");

                entity.Property(e => e.Carpetdryingstarted)
                    .HasMaxLength(255)
                    .HasColumnName("carpetdryingstarted");

                entity.Property(e => e.Carpetfitted)
                    .HasMaxLength(255)
                    .HasColumnName("carpetfitted");

                entity.Property(e => e.Carpetsample)
                    .HasMaxLength(255)
                    .HasColumnName("carpetsample");

                entity.Property(e => e.Carpetvoucherissued)
                    .HasMaxLength(255)
                    .HasColumnName("carpetvoucherissued");

                entity.Property(e => e.Carpetvoucherredeemed)
                    .HasMaxLength(255)
                    .HasColumnName("carpetvoucherredeemed");

                entity.Property(e => e.Cashsettledbyinsurancecompany)
                    .HasMaxLength(255)
                    .HasColumnName("cashsettledbyinsurancecompany");

                entity.Property(e => e.Cashsettledbysbs)
                    .HasMaxLength(255)
                    .HasColumnName("cashsettledbysbs");

                entity.Property(e => e.Claimitemrepudiated)
                    .HasMaxLength(255)
                    .HasColumnName("claimitemrepudiated");

                entity.Property(e => e.Claimitemwithdrawnbyic)
                    .HasMaxLength(255)
                    .HasColumnName("claimitemwithdrawnbyic");

                entity.Property(e => e.Claimitemwithdrawnbyph)
                    .HasMaxLength(255)
                    .HasColumnName("claimitemwithdrawnbyph");

                entity.Property(e => e.Cleaninprogress)
                    .HasMaxLength(255)
                    .HasColumnName("cleaninprogress");

                entity.Property(e => e.Closeclaim)
                    .HasMaxLength(255)
                    .HasColumnName("closeclaim");

                entity.Property(e => e.Closeitem)
                    .HasMaxLength(255)
                    .HasColumnName("closeitem");

                entity.Property(e => e.CoClaimId).HasColumnName("co_claim_id");

                entity.Property(e => e.CustomerInformedOfInspectionResultsDate).HasMaxLength(255);

                entity.Property(e => e.Customerrejectedsettlement)
                    .HasMaxLength(255)
                    .HasColumnName("customerrejectedsettlement");

                entity.Property(e => e.Dateinspectionacknowledged)
                    .HasMaxLength(255)
                    .HasColumnName("dateinspectionacknowledged");

                entity.Property(e => e.Daterepairread)
                    .HasMaxLength(255)
                    .HasColumnName("daterepairread");

                entity.Property(e => e.Deadonarrival)
                    .HasMaxLength(255)
                    .HasColumnName("deadonarrival");

                entity.Property(e => e.DpdcollectionDate)
                    .HasMaxLength(255)
                    .HasColumnName("DPDCollectionDate");

                entity.Property(e => e.Engineerbooked)
                    .HasMaxLength(255)
                    .HasColumnName("engineerbooked");

                entity.Property(e => e.Excesscollected)
                    .HasMaxLength(255)
                    .HasColumnName("excesscollected");

                entity.Property(e => e.Failedrepair)
                    .HasMaxLength(255)
                    .HasColumnName("failedrepair");

                entity.Property(e => e.Firstcontactletter)
                    .HasMaxLength(255)
                    .HasColumnName("firstcontactletter");

                entity.Property(e => e.Goodsrecivedcalloutbooked)
                    .HasMaxLength(255)
                    .HasColumnName("goodsrecivedcalloutbooked");

                entity.Property(e => e.Handlerreadprintedreport)
                    .HasMaxLength(255)
                    .HasColumnName("handlerreadprintedreport");

                entity.Property(e => e.HoursPaused).HasMaxLength(255);

                entity.Property(e => e.IiClaimorderid).HasColumnName("ii_claimorderid");

                entity.Property(e => e.IiPoNumber)
                    .HasMaxLength(255)
                    .HasColumnName("ii_po_number");

                entity.Property(e => e.Incorrectitemsupplied)
                    .HasMaxLength(255)
                    .HasColumnName("incorrectitemsupplied");

                entity.Property(e => e.Inspcancelled)
                    .HasMaxLength(255)
                    .HasColumnName("inspcancelled");

                entity.Property(e => e.InspectionReportDate).HasMaxLength(255);

                entity.Property(e => e.Inspectionarranged)
                    .HasMaxLength(255)
                    .HasColumnName("inspectionarranged");

                entity.Property(e => e.Inspectioncreated)
                    .HasMaxLength(255)
                    .HasColumnName("inspectioncreated");

                entity.Property(e => e.Inspectionreadbyengineer)
                    .HasMaxLength(255)
                    .HasColumnName("inspectionreadbyengineer");

                entity.Property(e => e.Inspectionreported)
                    .HasMaxLength(255)
                    .HasColumnName("inspectionreported");

                entity.Property(e => e.Inspectionreportto)
                    .HasMaxLength(255)
                    .HasColumnName("inspectionreportto");

                entity.Property(e => e.Instructionbookedonfnol)
                    .HasMaxLength(255)
                    .HasColumnName("instructionbookedonfnol");

                entity.Property(e => e.Instructionbookedonip)
                    .HasMaxLength(255)
                    .HasColumnName("instructionbookedonip");

                entity.Property(e => e.Instructionbookedonipautomaticly)
                    .HasMaxLength(255)
                    .HasColumnName("instructionbookedonipautomaticly");

                entity.Property(e => e.Instructionpickedup)
                    .HasMaxLength(255)
                    .HasColumnName("instructionpickedup");

                entity.Property(e => e.Instructiontonotrepair)
                    .HasMaxLength(255)
                    .HasColumnName("instructiontonotrepair");

                entity.Property(e => e.Invoicefinal)
                    .HasMaxLength(255)
                    .HasColumnName("invoicefinal");

                entity.Property(e => e.Invoiceinterim)
                    .HasMaxLength(255)
                    .HasColumnName("invoiceinterim");

                entity.Property(e => e.Itemid).HasColumnName("itemid");

                entity.Property(e => e.Itemreadytobeinvoiced)
                    .HasMaxLength(255)
                    .HasColumnName("itemreadytobeinvoiced");

                entity.Property(e => e.Lastitemdeldate)
                    .HasMaxLength(255)
                    .HasColumnName("lastitemdeldate");

                entity.Property(e => e.Mandatesent)
                    .HasMaxLength(255)
                    .HasColumnName("mandatesent");

                entity.Property(e => e.MaxTimeToReturnCallInMinutes).HasMaxLength(255);

                entity.Property(e => e.Nondelivery)
                    .HasMaxLength(255)
                    .HasColumnName("nondelivery");

                entity.Property(e => e.Phonecontactwithpolicyholder)
                    .HasMaxLength(255)
                    .HasColumnName("phonecontactwithpolicyholder");

                entity.Property(e => e.Purchaseorderraised)
                    .HasMaxLength(255)
                    .HasColumnName("purchaseorderraised");

                entity.Property(e => e.Quotetoinsurance)
                    .HasMaxLength(255)
                    .HasColumnName("quotetoinsurance");

                entity.Property(e => e.Recommendrepudiation)
                    .HasMaxLength(255)
                    .HasColumnName("recommendrepudiation");

                entity.Property(e => e.Repairauth)
                    .HasMaxLength(255)
                    .HasColumnName("repairauth");

                entity.Property(e => e.Repaircomplete)
                    .HasMaxLength(255)
                    .HasColumnName("repaircomplete");

                entity.Property(e => e.Repaircompletedate)
                    .HasMaxLength(255)
                    .HasColumnName("repaircompletedate");

                entity.Property(e => e.Repaireditemreturned)
                    .HasMaxLength(255)
                    .HasColumnName("repaireditemreturned");

                entity.Property(e => e.Repairfailed)
                    .HasMaxLength(255)
                    .HasColumnName("repairfailed");

                entity.Property(e => e.Repairoffered)
                    .HasMaxLength(255)
                    .HasColumnName("repairoffered");

                entity.Property(e => e.Repairreqsent)
                    .HasMaxLength(255)
                    .HasColumnName("repairreqsent");

                entity.Property(e => e.Repairtobecarriedout)
                    .HasMaxLength(255)
                    .HasColumnName("repairtobecarriedout");

                entity.Property(e => e.Repairtobecarriedoutgiftware)
                    .HasMaxLength(255)
                    .HasColumnName("repairtobecarriedoutgiftware");

                entity.Property(e => e.Repairtobecarriedoutjewellry)
                    .HasMaxLength(255)
                    .HasColumnName("repairtobecarriedoutjewellry");

                entity.Property(e => e.Repairtobecarriedoutwatch)
                    .HasMaxLength(255)
                    .HasColumnName("repairtobecarriedoutwatch");

                entity.Property(e => e.Replaceddate)
                    .HasMaxLength(255)
                    .HasColumnName("replaceddate");

                entity.Property(e => e.Replacementflooroffered)
                    .HasMaxLength(255)
                    .HasColumnName("replacementflooroffered");

                entity.Property(e => e.Replacementgoodsordered)
                    .HasMaxLength(255)
                    .HasColumnName("replacementgoodsordered");

                entity.Property(e => e.Smsemailtoph)
                    .HasMaxLength(255)
                    .HasColumnName("smsemailtoph");

                entity.Property(e => e.Sourcingpartsforrepair)
                    .HasMaxLength(255)
                    .HasColumnName("sourcingpartsforrepair");

                entity.Property(e => e.Sourcingpartsforrepairjewellry)
                    .HasMaxLength(255)
                    .HasColumnName("sourcingpartsforrepairjewellry");

                entity.Property(e => e.Sourcingpartsormaterialforrepair)
                    .HasMaxLength(255)
                    .HasColumnName("sourcingpartsormaterialforrepair");

                entity.Property(e => e.SuccessfulLastContractPriorToGoodsOrdered)
                    .HasMaxLength(255)
                    .HasColumnName("successful last contract prior to goods ordered");

                entity.Property(e => e.Telesale)
                    .HasMaxLength(255)
                    .HasColumnName("telesale");

                entity.Property(e => e.Validationtool)
                    .HasMaxLength(255)
                    .HasColumnName("validationtool");

                entity.Property(e => e.Variationtoinstructionic)
                    .HasMaxLength(255)
                    .HasColumnName("variationtoinstructionic");

                entity.Property(e => e.Variationtoinstructionii)
                    .HasMaxLength(255)
                    .HasColumnName("variationtoinstructionii");

                entity.Property(e => e.Variationtoinstructionph)
                    .HasMaxLength(255)
                    .HasColumnName("variationtoinstructionph");

                entity.Property(e => e.Voucherissued)
                    .HasMaxLength(255)
                    .HasColumnName("voucherissued");

                entity.Property(e => e.Voucheroffered)
                    .HasMaxLength(255)
                    .HasColumnName("voucheroffered");
            });

            modelBuilder.Entity<ClaimFinance>(entity =>
            {
                entity.ToTable("ClaimFinance", "MI");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.FinanceTypeId).HasColumnName("FinanceTypeID");
            });

            modelBuilder.Entity<ClaimItem>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_ClaimItem_1");

                entity.ToTable("ClaimItem", "Claim");

                entity.HasIndex(e => e.InsuranceClaimId, "IXNC_ClaimItem_InsuranceClaimID_4DDAD");

                entity.HasIndex(e => e.ParentClaimItemId, "IXNC_ClaimItem_ParentClaimItemID_FCCF6");

                entity.HasIndex(e => e.ProductId, "IXNC_ClaimItem_ProductID_A856E");

                entity.HasIndex(e => new { e.SerialNo, e.ItemId }, "IXNC_ClaimItem_SerialNo_ItemID_A5B42");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ItemId, e.ItemTypeId }, "_dta_index_ClaimItem_9_49435250__K2_K1_K12");

                entity.HasIndex(e => new { e.ItemId, e.ItemTypeId }, "_dta_index_ClaimItem_9_553105061__K1_K12_13_14");

                entity.HasIndex(e => new { e.ItemId, e.InsuranceClaimId }, "_dta_index_ClaimItem_9_553105061__K1_K2");

                entity.HasIndex(e => e.InsuranceClaimId, "_dta_index_ClaimItem_9_553105061__K2_11_12");

                entity.HasIndex(e => e.InsuranceClaimId, "_dta_index_ClaimItem_9_553105061__K2_33");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ItemId, e.ItemTypeId }, "_dta_index_ClaimItem_9_553105061__K2_K1_K12_13_14");

                entity.HasIndex(e => new { e.ValidationClaimItemId, e.InsuranceClaimId }, "_dta_index_ClaimItem_9_553105061__K33_K2");

                entity.HasIndex(e => new { e.HadInspection, e.InsuranceClaimId }, "_dta_index_ClaimItem_9_553105061__K8_K2");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DateClosed).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.FinalOutcomeId).HasColumnName("FinalOutcomeID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.InsurersInstructionId).HasColumnName("InsurersInstructionID");

                entity.Property(e => e.ItemTypeId)
                    .HasColumnName("ItemTypeID")
                    .HasDefaultValueSql("((270))");

                entity.Property(e => e.Make).HasMaxLength(50);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.OldInspectionId)
                    .HasColumnName("OldInspectionID")
                    .HasComment("This is a temporary column that will help to keep track of which items have already been created for the new inspection system");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.ParentClaimItemId).HasColumnName("ParentClaimItemID");

                entity.Property(e => e.PartCode).HasMaxLength(50);

                entity.Property(e => e.PerilDetailId).HasColumnName("PerilDetailID");

                entity.Property(e => e.PerilId).HasColumnName("PerilID");

                entity.Property(e => e.PhaseId)
                    .HasColumnName("PhaseID")
                    .HasDefaultValueSql("((5))");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");

                entity.Property(e => e.SerialNo).HasMaxLength(50);

                entity.Property(e => e.ValidationClaimItemId).HasColumnName("ValidationClaimItemID");

                entity.HasOne(d => d.InsuranceClaim)
                    .WithMany(p => p.ClaimItems)
                    .HasForeignKey(d => d.InsuranceClaimId)
                    .HasConstraintName("FK_ClaimItem_InsuranceClaim");

                entity.HasOne(d => d.ItemType)
                    .WithMany(p => p.ClaimItemItemTypes)
                    .HasForeignKey(d => d.ItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimItem_ValueItemType");

                entity.HasOne(d => d.PerilDetail)
                    .WithMany(p => p.ClaimItemPerilDetails)
                    .HasForeignKey(d => d.PerilDetailId)
                    .HasConstraintName("FK_ClaimItem_ValuePerilDetail");

                entity.HasOne(d => d.Peril)
                    .WithMany(p => p.ClaimItemPerils)
                    .HasForeignKey(d => d.PerilId)
                    .HasConstraintName("FK_ClaimItem_ValuePeril");
            });

            modelBuilder.Entity<ClaimItem1>(entity =>
            {
                entity.HasKey(e => e.ItemId);

                entity.ToTable("ClaimItem", "MI");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ClaimClaimItemId).HasColumnName("ClaimClaimItemID");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DateClosed).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.FnolitemId).HasColumnName("FNOLItemID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemPropertyIds)
                    .HasMaxLength(200)
                    .HasColumnName("ItemPropertyIDs");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Claims')");

                entity.HasOne(d => d.InsuranceClaim)
                    .WithMany(p => p.ClaimItem1s)
                    .HasForeignKey(d => d.InsuranceClaimId)
                    .HasConstraintName("FK_ClaimItem_InsuranceClaim");
            });

            modelBuilder.Entity<ClaimItem2>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_Validation.ClaimItem");

                entity.ToTable("ClaimItem", "Validation");

                entity.HasIndex(e => e.ClaimId, "IXNC_ClaimItem_ClaimID_C0984");

                entity.HasIndex(e => e.ProductId, "IXNC_ClaimItem_ProductID_DE254");

                entity.HasIndex(e => new { e.LiveSystemId, e.ChosenOutcomeName }, "_dta_index_ClaimItem_9_1594488759__K19_K15");

                entity.HasIndex(e => new { e.DateAdded, e.ItemId, e.ReplacementId, e.ProductId, e.ClaimId }, "_dta_index_ClaimItem_9_1890157829__K7_K1_K4_K3_K2_25_26_27_28_29");

                entity.HasIndex(e => new { e.ItemId, e.SellRate, e.ChosenSupplierPrice }, "_dta_index_ClaimItem_9_850870148__K1_K33_K25");

                entity.HasIndex(e => e.ClaimId, "_dta_index_ClaimItem_9_850870148__K2_3");

                entity.HasIndex(e => new { e.ClaimId, e.ItemId, e.ChosenOutcomeName }, "_dta_index_ClaimItem_9_850870148__K2_K1_K17");

                entity.HasIndex(e => new { e.ClaimId, e.ItemId, e.ItemTypeId }, "_dta_index_ClaimItem_9_850870148__K2_K1_K34");

                entity.HasIndex(e => new { e.ProductId, e.ItemId, e.ClaimId, e.ChosenSupplier, e.SellRate }, "_dta_index_ClaimItem_9_850870148__K3_K1_K2_K24_K33");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.AlternateOutcomeExplanation).HasColumnType("ntext");

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.CheapestBrandPrice).HasColumnType("money");

                entity.Property(e => e.CheapestBrandReplacementId).HasColumnName("CheapestBrandReplacementID");

                entity.Property(e => e.CheapestBrandSupplier).HasMaxLength(50);

                entity.Property(e => e.CheapestSupplier).HasMaxLength(50);

                entity.Property(e => e.CheapestSupplierPrice).HasColumnType("money");

                entity.Property(e => e.ChosenOldSupplierId).HasColumnName("ChosenOldSupplierID");

                entity.Property(e => e.ChosenOutcomeName).HasMaxLength(100);

                entity.Property(e => e.ChosenSupplier).HasMaxLength(50);

                entity.Property(e => e.ChosenSupplierId).HasColumnName("ChosenSupplierID");

                entity.Property(e => e.ChosenSupplierPrice).HasColumnType("money");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.DateAdded)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetailId).HasColumnName("DetailID");

                entity.Property(e => e.DuckCreekItemRef).HasMaxLength(50);

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.Htmldetails).HasColumnName("HTMLDetails");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.LiveSystemId).HasColumnName("LiveSystemID");

                entity.Property(e => e.Make).HasMaxLength(100);

                entity.Property(e => e.Model).HasMaxLength(100);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");

                entity.Property(e => e.RecommendedOutcome).HasMaxLength(100);

                entity.Property(e => e.RecommendedOutcomeIds)
                    .HasMaxLength(50)
                    .HasColumnName("RecommendedOutcomeIDs");

                entity.Property(e => e.ReplacementId).HasColumnName("ReplacementID");

                entity.Property(e => e.SbsitemId).HasColumnName("SBSItemID");

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.SerialNo).HasMaxLength(50);

                entity.Property(e => e.ServiceRequestPublicId)
                    .HasMaxLength(50)
                    .HasColumnName("ServiceRequestPublicID");

                entity.Property(e => e.UpgradeCheapestPrice).HasColumnType("money");

                entity.Property(e => e.UpgradeCheapestSupplier).HasMaxLength(50);

                entity.Property(e => e.VoucherAmount).HasColumnType("money");

                entity.HasOne(d => d.AlternateOutcomeNavigation)
                    .WithMany(p => p.ClaimItem2s)
                    .HasForeignKey(d => d.AlternateOutcome)
                    .HasConstraintName("FK_ClaimItem_AlternativeOutcome");

                entity.HasOne(d => d.ChosenOutcomeNavigation)
                    .WithMany(p => p.ClaimItem2s)
                    .HasForeignKey(d => d.ChosenOutcome)
                    .HasConstraintName("FK_ClaimItem_ValidationOutcome");

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.ClaimItem2s)
                    .HasForeignKey(d => d.ClaimId)
                    .HasConstraintName("FK_Validation.ClaimItem_Validation.Claim");
            });

            modelBuilder.Entity<ClaimItemBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("claimItemBackup", "Validation");

                entity.Property(e => e.AlternateOutcome).HasMaxLength(200);

                entity.Property(e => e.AlternateOutcomeExplanation).HasColumnType("ntext");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DetailId).HasColumnName("DetailID");

                entity.Property(e => e.ItemId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ItemID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");
            });

            modelBuilder.Entity<ClaimItemGemGroup>(entity =>
            {
                entity.ToTable("ClaimItemGemGroups", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Carat).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ClarityId).HasColumnName("ClarityID");

                entity.Property(e => e.ColourId).HasColumnName("ColourID");

                entity.Property(e => e.HistoricalPriceGbp).HasColumnName("HistoricalPriceGBP");

                entity.Property(e => e.HistoricalRetailPriceGbp).HasColumnName("HistoricalRetailPriceGBP");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.PriceGbp).HasColumnName("PriceGBP");

                entity.Property(e => e.PriceLogged).HasColumnType("datetime");

                entity.Property(e => e.PriceRetailGbp).HasColumnName("PriceRetailGBP");

                entity.Property(e => e.PriceUsd).HasColumnName("PriceUSD");

                entity.Property(e => e.QualityId).HasColumnName("QualityID");

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.ShapeId).HasColumnName("ShapeID");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<ClaimItemMetal>(entity =>
            {
                entity.ToTable("ClaimItemMetals", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratId).HasColumnName("CaratID");

                entity.Property(e => e.HistoricalPriceGbp).HasColumnName("HistoricalPriceGBP");

                entity.Property(e => e.HistoricalRetailPriceGbp).HasColumnName("HistoricalRetailPriceGBP");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.PriceGbp).HasColumnName("PriceGBP");

                entity.Property(e => e.PriceRetailGbp).HasColumnName("PriceRetailGBP");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<ClaimItemValue>(entity =>
            {
                entity.ToTable("ClaimItem_Values", "Claim");

                entity.HasIndex(e => e.ItemId, "_dta_index_ClaimItem_Values_8_546153041__K2_3_4_5");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ClaimItemValues)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimItem_Values_ClaimItem");

                entity.HasOne(d => d.Parameter)
                    .WithMany(p => p.ClaimItemValues)
                    .HasForeignKey(d => d.ParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimItem_Values_Parameter");

                entity.HasOne(d => d.ValueNavigation)
                    .WithMany(p => p.ClaimItemValues)
                    .HasForeignKey(d => d.ValueId)
                    .HasConstraintName("FK_ClaimItem_Values_FnolValue");
            });

            modelBuilder.Entity<ClaimItemValue1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClaimItem_Values", "MI");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<ClaimLessThanExcess>(entity =>
            {
                entity.HasKey(e => e.ClteId);

                entity.ToTable("ClaimLessThanExcess", "Accounts");

                entity.Property(e => e.ClteId).HasColumnName("CLTE_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");
            });

            modelBuilder.Entity<ClaimLocked>(entity =>
            {
                entity.ToTable("ClaimLocked", "PolicyHolderPortal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.LockTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ClaimOrder>(entity =>
            {
                entity.ToTable("ClaimOrder", "Site");

                entity.HasIndex(e => e.InsuranceClaimId, "BuyRate_Index");

                entity.HasIndex(e => e.InvReq, "IXNC_ClaimOrder_Inv_Req_2DF2D");

                entity.HasIndex(e => e.InvReq, "IXNC_ClaimOrder_Inv_Req_981CE");

                entity.HasIndex(e => e.OriginalClaimItemId, "IXNC_ClaimOrder_OriginalClaimItemID_6C29F");

                entity.HasIndex(e => e.OriginalClaimItemId, "IXNC_ClaimOrder_OriginalClaimItemID_7F9F6");

                entity.HasIndex(e => e.ProductId, "IXNC_ClaimOrder_ProductId_724B4");

                entity.HasIndex(e => e.SupplierId, "IXNC_ClaimOrder_SupplierId_11A3B");

                entity.HasIndex(e => e.SupplierId, "IXNC_ClaimOrder_SupplierId_F05B0");

                entity.HasIndex(e => new { e.ClaimOrderId, e.ProductId, e.SupplierServiceId, e.LinkedConumber, e.SupplierId }, "_dta_index_ClaimOrder_16_171199710__K1_K7_K84_K79_K8_12_77");

                entity.HasIndex(e => new { e.SupplierServiceId, e.ClaimOrderId, e.LinkedConumber, e.ProductId, e.SupplierId }, "_dta_index_ClaimOrder_16_171199710__K84_K1_K79_K7_K8_12_77");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ClaimOrderId, e.ItemTypeId, e.OriginalClaimItemId, e.SupplierId, e.ProductId, e.SupplierServiceId, e.LinkedConumber, e.FeeId, e.ShortDescription }, "_dta_index_ClaimOrder_9_285244071__K3_K1_K5_K77_K8_K7_K84_K79_K87_K4_9_10_11_12_17_19_28_81_82_83");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ClaimOrderId, e.ItemTypeId, e.ProductId, e.SupplierServiceId, e.ShortDescription, e.InvReqDate, e.PoReqDate, e.DateCreated }, "_dta_index_ClaimOrder_9_285244071__K3_K1_K5_K7_K84_K4_K29_K20_K69_9_10_11_12_17_19_28_81_82_83");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ClaimOrderId, e.ItemTypeId, e.SupplierId, e.ProductId, e.SupplierServiceId, e.ShortDescription, e.InvReqDate, e.PoReqDate, e.DateCreated }, "_dta_index_ClaimOrder_9_285244071__K3_K1_K5_K8_K7_K84_K4_K29_K20_K69_9_10_11_12_17_19_28_81_82_83");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ClaimOrderId, e.ItemTypeId, e.SupplierId, e.ProductId, e.SupplierServiceId, e.LinkedConumber, e.ShortDescription }, "_dta_index_ClaimOrder_9_285244071__K3_K1_K5_K8_K7_K84_K79_K4_9_10_11_12_17_19_28_81_82_83");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.InvReq, e.OrderedQuantity, e.ClaimOrderId }, "_dta_index_ClaimOrder_9_285244071__K3_K28_K9_K1_4_5_7_10_11_12");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ShortDescription }, "_dta_index_ClaimOrder_9_285244071__K3_K4_1_5_7_8_9_10_11_12_17_19_28_79_81_82_83_84");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.LinkedConumber, e.ClaimOrderId, e.InvReq, e.OrderedQuantity, e.FeeId }, "_dta_index_ClaimOrder_9_285244071__K3_K79_K1_K28_K9_K87_4_5_7_10_11_12");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ProductId, e.SupplierServiceId, e.ClaimOrderId }, "_dta_index_ClaimOrder_9_285244071__K3_K7_K84_K1_9_10_12");

                entity.HasIndex(e => new { e.ItemTypeId, e.InsuranceClaimId }, "_dta_index_ClaimOrder_9_285244071__K5_K3_9_10_12");

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.CarriageBuy).HasColumnType("money");

                entity.Property(e => e.CarriageSell).HasColumnType("money");

                entity.Property(e => e.CheapestSupplier).HasMaxLength(50);

                entity.Property(e => e.ChosenSupplier).HasMaxLength(50);

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CreditRaised)
                    .HasColumnName("Credit_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Raised_Date");

                entity.Property(e => e.CreditReq)
                    .HasColumnName("Credit_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Req_Date");

                entity.Property(e => e.CreditSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Sage");

                entity.Property(e => e.CreditSync)
                    .HasColumnName("Credit_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Sync_Date");

                entity.Property(e => e.CreditVat)
                    .HasColumnName("Credit_VAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateCancelled).HasColumnType("datetime");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.FromInspection).HasColumnName("fromInspection");

                entity.Property(e => e.Guid)
                    .HasMaxLength(200)
                    .HasColumnName("GUID");

                entity.Property(e => e.InitiatingInspectionId).HasColumnName("InitiatingInspectionID");

                entity.Property(e => e.InvRaised)
                    .HasColumnName("Inv_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Raised_Date");

                entity.Property(e => e.InvReq)
                    .HasColumnName("Inv_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Req_Date");

                entity.Property(e => e.InvReqRaisedBy).HasColumnName("Inv_Req_RaisedBy");

                entity.Property(e => e.InvSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Sage");

                entity.Property(e => e.InvSync)
                    .HasColumnName("Inv_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Sync_Date");

                entity.Property(e => e.InvVat)
                    .HasColumnName("Inv_VAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.LinkedConumber).HasColumnName("LinkedCONumber");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalClaimItemId).HasColumnName("OriginalClaimItemID");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.PoRaised)
                    .HasColumnName("PO_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Raised_Date");

                entity.Property(e => e.PoReq)
                    .HasColumnName("PO_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Req_Date");

                entity.Property(e => e.PoReqRaisedBy).HasColumnName("PO_Req_RaisedBy");

                entity.Property(e => e.PoSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_Sage");

                entity.Property(e => e.PoSync)
                    .HasColumnName("PO_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Sync_Date");

                entity.Property(e => e.PoVat)
                    .HasColumnName("PO_VAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SageInvoiceNumber)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SagePonumber)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SagePONumber");

                entity.Property(e => e.SalapprovalNote).HasColumnName("SALapprovalNote");

                entity.Property(e => e.Salapproved).HasColumnName("SALapproved");

                entity.Property(e => e.SalapprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("SALapprovedBy");

                entity.Property(e => e.SalapprovedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALapprovedDate");

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SingleUseItem).HasComment("If this field is 1, this claim order is for an unlisted item");

                entity.Property(e => e.SupplierProductReference).HasMaxLength(200);

                entity.Property(e => e.SupplierServiceId).HasColumnName("SupplierServiceID");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasComment("'AAA'");

                entity.Property(e => e.VoucherValue).HasColumnType("money");
            });

            modelBuilder.Entity<ClaimOrderOutcome>(entity =>
            {
                entity.ToTable("ClaimOrderOutcome", "Site");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<ClaimOrderRelatedFitting>(entity =>
            {
                entity.HasKey(e => e.FlRelatedfittingsId)
                    .HasName("ClaimOrderRelatedFittings_pk");

                entity.ToTable("ClaimOrderRelatedFittings", "Flooring");

                entity.Property(e => e.FlRelatedfittingsId).HasColumnName("fl_relatedfittings_id");

                entity.Property(e => e.FittingClaimorderid).HasColumnName("fitting_claimorderid");

                entity.Property(e => e.FlooringClaimorderid).HasColumnName("flooring_claimorderid");

                entity.HasOne(d => d.FittingClaimorder)
                    .WithMany(p => p.ClaimOrderRelatedFittingFittingClaimorders)
                    .HasForeignKey(d => d.FittingClaimorderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClaimOrderRelatedFittings_ClaimOrder_ClaimOrderId_fk_2");

                entity.HasOne(d => d.FlooringClaimorder)
                    .WithMany(p => p.ClaimOrderRelatedFittingFlooringClaimorders)
                    .HasForeignKey(d => d.FlooringClaimorderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClaimOrderRelatedFittings_ClaimOrder_ClaimOrderId_fk");
            });

            modelBuilder.Entity<ClaimProfit>(entity =>
            {
                entity.HasKey(e => e.InsuranceClaimId)
                    .HasName("PK_MI_ClaimProfit");

                entity.ToTable("ClaimProfit", "MI");

                entity.HasIndex(e => e.Consignment, "IXNC_ClaimProfit_Consignment_8307E");

                entity.HasIndex(e => new { e.Poraised, e.Invraised }, "IXNC_ClaimProfit_PORaised_INVRaised_2D388");

                entity.Property(e => e.InsuranceClaimId)
                    .ValueGeneratedNever()
                    .HasColumnName("InsuranceClaimID");

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.InvcarriageNet)
                    .HasColumnType("money")
                    .HasColumnName("INVCarriageNet");

                entity.Property(e => e.Invcarriagegross)
                    .HasColumnType("money")
                    .HasColumnName("INVCarriagegross");

                entity.Property(e => e.Invdate)
                    .HasColumnType("datetime")
                    .HasColumnName("INVDate");

                entity.Property(e => e.Invgross)
                    .HasColumnType("money")
                    .HasColumnName("INVGross");

                entity.Property(e => e.InvitemsGross)
                    .HasColumnType("money")
                    .HasColumnName("INVItemsGross");

                entity.Property(e => e.InvitemsNet)
                    .HasColumnType("money")
                    .HasColumnName("INVItemsNet");

                entity.Property(e => e.Invnet)
                    .HasColumnType("money")
                    .HasColumnName("INVNet");

                entity.Property(e => e.Invraised).HasColumnName("INVRaised");

                entity.Property(e => e.PocarriageGross)
                    .HasColumnType("money")
                    .HasColumnName("POCarriageGross");

                entity.Property(e => e.PocarriageNet)
                    .HasColumnType("money")
                    .HasColumnName("POCarriageNet");

                entity.Property(e => e.Podate)
                    .HasColumnType("datetime")
                    .HasColumnName("PODate");

                entity.Property(e => e.Pogross)
                    .HasColumnType("money")
                    .HasColumnName("POGross");

                entity.Property(e => e.PoitemsGross)
                    .HasColumnType("money")
                    .HasColumnName("POItemsGross");

                entity.Property(e => e.PoitemsNet)
                    .HasColumnType("money")
                    .HasColumnName("POItemsNet");

                entity.Property(e => e.Ponet)
                    .HasColumnType("money")
                    .HasColumnName("PONet");

                entity.Property(e => e.Poraised).HasColumnName("PORaised");

                entity.Property(e => e.ProfitcarriageGross)
                    .HasColumnType("money")
                    .HasColumnName("PROFITCarriageGross");

                entity.Property(e => e.ProfitcarriageNet)
                    .HasColumnType("money")
                    .HasColumnName("PROFITCarriageNet");

                entity.Property(e => e.Profitgross)
                    .HasColumnType("money")
                    .HasColumnName("PROFITGross");

                entity.Property(e => e.ProfititemsGross)
                    .HasColumnType("money")
                    .HasColumnName("PROFITItemsGross");

                entity.Property(e => e.ProfititemsNet)
                    .HasColumnType("money")
                    .HasColumnName("PROFITItemsNet");

                entity.Property(e => e.Profitnet)
                    .HasColumnType("money")
                    .HasColumnName("PROFITNet");
            });

            modelBuilder.Entity<ClaimStatus>(entity =>
            {
                entity.HasKey(e => e.CsId);

                entity.ToTable("Claim_Status", "Accounts");

                entity.HasIndex(e => e.CsClaimId, "IXNC_Claim_Status_cs_claim_id_8EAF0");

                entity.HasIndex(e => e.CsClaimId, "IXNC_Claim_Status_cs_claim_id_BBA6C");

                entity.Property(e => e.CsId).HasColumnName("cs_id");

                entity.Property(e => e.CsClaimId).HasColumnName("cs_claim_id");

                entity.Property(e => e.CsCstId).HasColumnName("cs_cst_id");

                entity.Property(e => e.CsNotes)
                    .HasMaxLength(2000)
                    .HasColumnName("cs_notes");
            });

            modelBuilder.Entity<ClaimStatus1>(entity =>
            {
                entity.HasKey(e => e.ClaimStatusId);

                entity.ToTable("ClaimStatus", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClaimStatusSequence>(entity =>
            {
                entity.ToTable("ClaimStatusSequence", "Site");
            });

            modelBuilder.Entity<ClaimStatusType>(entity =>
            {
                entity.HasKey(e => e.CstId);

                entity.ToTable("Claim_Status_Type", "Accounts");

                entity.Property(e => e.CstId).HasColumnName("cst_id");

                entity.Property(e => e.CstCode).HasColumnName("cst_code");

                entity.Property(e => e.CstDescription)
                    .HasMaxLength(50)
                    .HasColumnName("cst_description");
            });

            modelBuilder.Entity<ClaimType>(entity =>
            {
                entity.ToTable("ClaimType", "Site");

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimTypeDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ClaimValue>(entity =>
            {
                entity.ToTable("ClaimValues", "Claim");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ParameterId }, "IXNC_ClaimValues_InsuranceClaimID_ParameterID_AEC19");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.HasOne(d => d.InsuranceClaim)
                    .WithMany(p => p.ClaimValues)
                    .HasForeignKey(d => d.InsuranceClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimValues_InsuranceClaim");

                entity.HasOne(d => d.Parameter)
                    .WithMany(p => p.ClaimValues)
                    .HasForeignKey(d => d.ParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimValues_Parameter1");

                entity.HasOne(d => d.ValueNavigation)
                    .WithMany(p => p.ClaimValues)
                    .HasForeignKey(d => d.ValueId)
                    .HasConstraintName("FK_ClaimValues_Value1");
            });

            modelBuilder.Entity<Claimant>(entity =>
            {
                entity.ToTable("Claimant", "Claim");

                entity.Property(e => e.ClaimantId).HasColumnName("ClaimantID");

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.Daddress1)
                    .HasMaxLength(50)
                    .HasColumnName("DAddress1");

                entity.Property(e => e.Daddress2)
                    .HasMaxLength(50)
                    .HasColumnName("DAddress2");

                entity.Property(e => e.Daddress3)
                    .HasMaxLength(50)
                    .HasColumnName("DAddress3");

                entity.Property(e => e.Daddress4)
                    .HasMaxLength(50)
                    .HasColumnName("DAddress4");

                entity.Property(e => e.Dpostcode)
                    .HasMaxLength(10)
                    .HasColumnName("DPostcode");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FirstName1).HasMaxLength(50);

                entity.Property(e => e.FirstName2).HasMaxLength(50);

                entity.Property(e => e.Haddress1)
                    .HasMaxLength(50)
                    .HasColumnName("HAddress1");

                entity.Property(e => e.Haddress2)
                    .HasMaxLength(50)
                    .HasColumnName("HAddress2");

                entity.Property(e => e.Haddress3)
                    .HasMaxLength(50)
                    .HasColumnName("HAddress3");

                entity.Property(e => e.Haddress4)
                    .HasMaxLength(50)
                    .HasColumnName("HAddress4");

                entity.Property(e => e.HomeTel).HasMaxLength(20);

                entity.Property(e => e.Hpostcode)
                    .HasMaxLength(10)
                    .HasColumnName("HPostcode");

                entity.Property(e => e.IsVatreg).HasColumnName("IsVATReg");

                entity.Property(e => e.LastName1).HasMaxLength(50);

                entity.Property(e => e.LastName2).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(20);

                entity.Property(e => e.Title1).HasMaxLength(10);

                entity.Property(e => e.Title2).HasMaxLength(10);

                entity.Property(e => e.VatregNo)
                    .HasMaxLength(50)
                    .HasColumnName("VATRegNo");

                entity.Property(e => e.WorkTel).HasMaxLength(20);
            });

            modelBuilder.Entity<ClaimedItem>(entity =>
            {
                entity.HasKey(e => e.ClaimItemId);

                entity.ToTable("ClaimedItem", "Site");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");

                entity.Property(e => e.ProductParticulars).HasMaxLength(200);

                entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");
            });

            modelBuilder.Entity<ClaimsToKeep>(entity =>
            {
                entity.HasKey(e => e.CkId);

                entity.ToTable("ClaimsToKeep", "Accounts");

                entity.Property(e => e.CkId).HasColumnName("ck_id");

                entity.Property(e => e.CkClaimId).HasColumnName("ck_claim_id");
            });

            modelBuilder.Entity<ClientRegion>(entity =>
            {
                entity.HasKey(e => e.CrId);

                entity.ToTable("Client_Region", "Accounts");

                entity.Property(e => e.CrId).HasColumnName("cr_id");

                entity.Property(e => e.CrName)
                    .HasMaxLength(100)
                    .HasColumnName("cr_name");
            });

            modelBuilder.Entity<CloseClaimLogTest>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("CloseClaimLogTest", "Claim");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Log_Date");

                entity.Property(e => e.LogSection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Log_Section");
            });

            modelBuilder.Entity<CloseRemainingClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Close remaining claims", "MI");

                entity.Property(e => e.DaysOpen).HasColumnName("Days open");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");
            });

            modelBuilder.Entity<Closed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Closed", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Consignment).HasMaxLength(50);

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_Year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(10)
                    .HasColumnName("openx");
            });

            modelBuilder.Entity<Cnetattribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETAttribute", "Product");

                entity.Property(e => e.AlternateAttributeName).HasMaxLength(50);

                entity.Property(e => e.AttributeCategoryId).HasColumnName("AttributeCategoryID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AttributeName).HasMaxLength(50);

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.DefaultValueId).HasColumnName("DefaultValueID");

                entity.Property(e => e.Explanation).HasMaxLength(300);

                entity.Property(e => e.FeatureId).HasColumnName("FeatureID");

                entity.Property(e => e.Linkedattributeid).HasColumnName("linkedattributeid");

                entity.Property(e => e.Note).HasMaxLength(200);
            });

            modelBuilder.Entity<CnetattributeCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETAttributeCategory", "Product");

                entity.Property(e => e.Category).HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<CnetattributeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETAttributeValue", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.Cnetsufx)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETSUFX");

                entity.Property(e => e.VId).HasColumnName("vID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<Cnetbrand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETBrand", "Product");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.BrandName).HasMaxLength(200);
            });

            modelBuilder.Entity<CnetbrandBanding>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETBrandBanding", "Product");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.BandingId).HasColumnName("BandingID");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            });

            modelBuilder.Entity<Cnetcategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETCategory", "Product");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName).HasMaxLength(200);

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.GfkCategoryId).HasColumnName("gfkCategoryID");

                entity.Property(e => e.GfksectorId).HasColumnName("GFKSectorID");
            });

            modelBuilder.Entity<Cnetfamily>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETFamily", "Product");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FamilyName).HasMaxLength(200);

                entity.Property(e => e.LinkedFamilyId).HasColumnName("LinkedFamilyID");

                entity.Property(e => e.PgId).HasColumnName("pgID");
            });

            modelBuilder.Entity<Cnetfamily2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETFamily2", "Product");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FamilyName).HasMaxLength(200);

                entity.Property(e => e.LinkedFamilyId).HasColumnName("LinkedFamilyID");

                entity.Property(e => e.PgId).HasColumnName("pgID");
            });

            modelBuilder.Entity<CnetfamilyAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETFamilyAttribute", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FilterType).HasMaxLength(10);

                entity.Property(e => e.FilterTypeId).HasColumnName("FilterTypeID");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<Cnetproduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETProduct", "Product");

                entity.Property(e => e.AltType).HasMaxLength(100);

                entity.Property(e => e.AltType2).HasMaxLength(100);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.Colour).HasMaxLength(50);

                entity.Property(e => e.DcPavcount).HasColumnName("DC_PAVCount");

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.EncodexStart).HasColumnType("smalldatetime");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.InformationUrl)
                    .HasMaxLength(200)
                    .HasColumnName("InformationURL");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Nfumdescription)
                    .HasMaxLength(2000)
                    .HasColumnName("NFUMDescription");

                entity.Property(e => e.OldProductId).HasColumnName("Old_Product_Id");

                entity.Property(e => e.PictureUrl)
                    .HasMaxLength(200)
                    .HasColumnName("PictureURL");

                entity.Property(e => e.PreviousProductId).HasColumnName("PreviousProductID");

                entity.Property(e => e.PriceLastUpdated).HasColumnType("smalldatetime");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Type).HasMaxLength(100);
            });

            modelBuilder.Entity<CnetproductAttributeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETProductAttributeValue", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<CnetsupplierProductLinkOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNETSupplierProductLinkOperations", "nCompass");

                entity.Property(e => e.LinkOperation).HasMaxLength(50);

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");

                entity.Property(e => e.SupplierProductCode).HasMaxLength(255);
            });

            modelBuilder.Entity<CommentReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CommentReason", "Claim");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.LloydsMialias)
                    .HasMaxLength(200)
                    .HasColumnName("LloydsMIAlias");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.ThirdParty).HasMaxLength(50);
            });

            modelBuilder.Entity<CompanyDetail>(entity =>
            {
                entity.HasKey(e => e.CoId);

                entity.ToTable("Company_Details", "Accounts");

                entity.Property(e => e.CoId).HasColumnName("co_id");

                entity.Property(e => e.CoVatRegNo)
                    .HasMaxLength(25)
                    .HasColumnName("co_vat_reg_no");
            });

            modelBuilder.Entity<Complaint>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Complaints", "Claim");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Complainant).HasMaxLength(50);

                entity.Property(e => e.ComplaintId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ComplaintID");
            });

            modelBuilder.Entity<ComplaintCommentsHistory>(entity =>
            {
                entity.HasKey(e => e.ClaimCommentsHistoryId);

                entity.ToTable("ComplaintCommentsHistory", "Site");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");
            });

            modelBuilder.Entity<ComplaintDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ComplaintData", "MI");

                entity.Property(e => e.Claimid).HasColumnName("claimid");

                entity.Property(e => e.CompensationType).HasMaxLength(255);

                entity.Property(e => e.ComplaintFormFilledIn).HasMaxLength(255);

                entity.Property(e => e.Complaintcategoryname)
                    .HasMaxLength(255)
                    .HasColumnName("complaintcategoryname");

                entity.Property(e => e.DateResolved).HasColumnType("datetime");

                entity.Property(e => e.Datecreated)
                    .HasColumnType("datetime")
                    .HasColumnName("datecreated");

                entity.Property(e => e.Daterecived)
                    .HasColumnType("datetime")
                    .HasColumnName("daterecived");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Hometelephone)
                    .HasMaxLength(255)
                    .HasColumnName("hometelephone");

                entity.Property(e => e.Insuredaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("insuredaddress1");

                entity.Property(e => e.Insuredaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("insuredaddress2");

                entity.Property(e => e.Insuredaddress3)
                    .HasMaxLength(255)
                    .HasColumnName("insuredaddress3");

                entity.Property(e => e.Insuredcompany)
                    .HasMaxLength(255)
                    .HasColumnName("insuredcompany");

                entity.Property(e => e.Insuredfirstname)
                    .HasMaxLength(255)
                    .HasColumnName("insuredfirstname");

                entity.Property(e => e.Insuredlastname)
                    .HasMaxLength(255)
                    .HasColumnName("insuredlastname");

                entity.Property(e => e.Insuredname)
                    .HasMaxLength(255)
                    .HasColumnName("insuredname");

                entity.Property(e => e.Insuredpostcode)
                    .HasMaxLength(255)
                    .HasColumnName("insuredpostcode");

                entity.Property(e => e.Insurersref)
                    .HasMaxLength(255)
                    .HasColumnName("insurersref");

                entity.Property(e => e.JustifiedUnjustified).HasMaxLength(255);

                entity.Property(e => e.Lossadjuster)
                    .HasMaxLength(255)
                    .HasColumnName("lossadjuster");

                entity.Property(e => e.Paymentsout).HasMaxLength(255);

                entity.Property(e => e.ReasonForComplaint).HasColumnType("text");

                entity.Property(e => e.ReasonForPaymentOut).HasColumnType("text");

                entity.Property(e => e.Relatedproduct)
                    .HasMaxLength(255)
                    .HasColumnName("relatedproduct");

                entity.Property(e => e.Resolution)
                    .HasColumnType("text")
                    .HasColumnName("resolution");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<ComplaintStatus>(entity =>
            {
                entity.ToTable("ComplaintStatus", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ComplaintStatusHistory>(entity =>
            {
                entity.ToTable("ComplaintStatusHistory", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.StatusComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CountCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("countCategories", "MI");

                entity.Property(e => e.ISSlTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("i_s_sl_type_name");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country", "Site");

                entity.Property(e => e.AliasCountryId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SageCountryCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Criterion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Criteria", "Site");

                entity.Property(e => e.Criteria).HasMaxLength(50);

                entity.Property(e => e.CriteriaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CriteriaID");
            });

            modelBuilder.Entity<CsvBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("csv_batch", "Accounts");

                entity.Property(e => e.CbId).HasColumnName("cb_id");

                entity.Property(e => e.CbNextBatchId).HasColumnName("cb_Next_BatchID");
            });

            modelBuilder.Entity<CsvUploadedCashSettlement>(entity =>
            {
                entity.HasKey(e => e.CsvId);

                entity.ToTable("csv_uploaded_cash_settlement", "Accounts");

                entity.Property(e => e.CsvId).HasColumnName("csv_id");

                entity.Property(e => e.CsvAmountPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_AmountPaid");

                entity.Property(e => e.CsvBacsRef)
                    .HasMaxLength(50)
                    .HasColumnName("csv_BACS_Ref");

                entity.Property(e => e.CsvBatchId).HasColumnName("csv_batch_id");

                entity.Property(e => e.CsvChequeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("csv_ChequeNumber");

                entity.Property(e => e.CsvClaimId).HasColumnName("csv_ClaimID");

                entity.Property(e => e.CsvDatePaid)
                    .HasColumnType("date")
                    .HasColumnName("csv_DatePaid");

                entity.Property(e => e.CsvEditedBy).HasColumnName("csv_edited_by");

                entity.Property(e => e.CsvEditedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_edited_on");

                entity.Property(e => e.CsvExcess)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_Excess");

                entity.Property(e => e.CsvPaidTo)
                    .HasMaxLength(50)
                    .HasColumnName("csv_PaidTo");

                entity.Property(e => e.CsvPoNumber).HasColumnName("csv_PO_Number");

                entity.Property(e => e.CsvRowNumber).HasColumnName("csv_row_number");

                entity.Property(e => e.CsvSalutation)
                    .HasMaxLength(50)
                    .HasColumnName("csv_Salutation");

                entity.Property(e => e.CsvUpdateFailMessage)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_fail_message");

                entity.Property(e => e.CsvUpdateWarning)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_warning");

                entity.Property(e => e.CsvUpdated).HasColumnName("csv_updated");

                entity.Property(e => e.CsvUploadedBy).HasColumnName("csv_uploaded_by");

                entity.Property(e => e.CsvUploadedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_uploaded_on")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CsvUploadedDpdHeader>(entity =>
            {
                entity.HasKey(e => e.DpdId)
                    .HasName("PK_Accounts.csv_uploaded_dpd_header");

                entity.ToTable("csv_uploaded_dpd_header", "Accounts");

                entity.Property(e => e.DpdId).HasColumnName("dpd_id");

                entity.Property(e => e.DpdBatchId).HasColumnName("dpd_batch_id");

                entity.Property(e => e.DpdGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("dpd_gross");

                entity.Property(e => e.DpdInvoiceDate)
                    .HasColumnType("date")
                    .HasColumnName("dpd_invoice_date");

                entity.Property(e => e.DpdInvoiceNo)
                    .HasMaxLength(50)
                    .HasColumnName("dpd_invoice_no");

                entity.Property(e => e.DpdNet)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("dpd_net");

                entity.Property(e => e.DpdVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("dpd_vat");
            });

            modelBuilder.Entity<CsvUploadedDpdInvoice>(entity =>
            {
                entity.HasKey(e => e.CsvId);

                entity.ToTable("csv_uploaded_dpd_invoices", "Accounts");

                entity.HasIndex(e => e.CsvPoNo, "_dta_index_csv_uploaded_dpd_invoices_16_576773162__K11");

                entity.HasIndex(e => new { e.CsvPoNumber, e.CsvBatchId }, "_dta_index_csv_uploaded_dpd_invoices_16_576773162__K48_K6_1");

                entity.HasIndex(e => e.CsvBatchId, "_dta_index_csv_uploaded_dpd_invoices_16_576773162__K6_23");

                entity.HasIndex(e => new { e.CsvBatchId, e.CsvId }, "_dta_index_csv_uploaded_dpd_invoices_16_576773162__K6_K1_11_47");

                entity.HasIndex(e => new { e.CsvBatchId, e.CsvUpdated }, "_dta_index_csv_uploaded_dpd_invoices_16_576773162__K6_K8_1_2_3_4_5_7_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_");

                entity.HasIndex(e => new { e.CsvBatchId, e.CsvUpdated, e.CsvPoNumber }, "_dta_index_csv_uploaded_dpd_invoices_16_576773162__K6_K8_K48_1_2_11_47");

                entity.HasIndex(e => new { e.CsvBatchId, e.CsvUpdated, e.CsvPoNumber, e.CsvId }, "_dta_index_csv_uploaded_dpd_invoices_16_576773162__K6_K8_K48_K1_23");

                entity.Property(e => e.CsvId).HasColumnName("csv_id");

                entity.Property(e => e.CsvBatchId).HasColumnName("csv_batch_id");

                entity.Property(e => e.CsvCollection)
                    .HasMaxLength(100)
                    .HasColumnName("csv_Collection");

                entity.Property(e => e.CsvCollectionPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("csv_CollectionPostCode");

                entity.Property(e => e.CsvCongestionCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_CongestionCharge");

                entity.Property(e => e.CsvConsignment)
                    .HasMaxLength(50)
                    .HasColumnName("csv_Consignment");

                entity.Property(e => e.CsvContractualLiability)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_ContractualLiability");

                entity.Property(e => e.CsvCountry)
                    .HasMaxLength(50)
                    .HasColumnName("csv_Country");

                entity.Property(e => e.CsvCountryCode)
                    .HasMaxLength(30)
                    .HasColumnName("csv_CountryCode");

                entity.Property(e => e.CsvCover)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_Cover");

                entity.Property(e => e.CsvCustomsCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_CustomsCharge");

                entity.Property(e => e.CsvDate)
                    .HasColumnType("date")
                    .HasColumnName("csv_Date");

                entity.Property(e => e.CsvDelivery)
                    .HasMaxLength(100)
                    .HasColumnName("csv_Delivery");

                entity.Property(e => e.CsvDeliveryAddress)
                    .HasMaxLength(500)
                    .HasColumnName("csv_DeliveryAddress");

                entity.Property(e => e.CsvDepotNo)
                    .HasMaxLength(30)
                    .HasColumnName("csv_DepotNo");

                entity.Property(e => e.CsvDutyCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_DutyCharge");

                entity.Property(e => e.CsvEditedBy).HasColumnName("csv_edited_by");

                entity.Property(e => e.CsvEditedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_edited_on");

                entity.Property(e => e.CsvFailedCollectionCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_FailedCollectionCharge");

                entity.Property(e => e.CsvFourthPartyCollection)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_FourthPartyCollection");

                entity.Property(e => e.CsvFuelSurcharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_FuelSurcharge");

                entity.Property(e => e.CsvHandlingCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_HandlingCharge");

                entity.Property(e => e.CsvHeader)
                    .HasMaxLength(30)
                    .HasColumnName("csv_Header");

                entity.Property(e => e.CsvHgvcharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_HGVCharge");

                entity.Property(e => e.CsvItems)
                    .HasMaxLength(30)
                    .HasColumnName("csv_Items");

                entity.Property(e => e.CsvNchandlingCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_NCHandlingCharge");

                entity.Property(e => e.CsvOversizedExCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_OversizedExCharge");

                entity.Property(e => e.CsvParcelNo)
                    .HasMaxLength(30)
                    .HasColumnName("csv_ParcelNo");

                entity.Property(e => e.CsvPoNo).HasColumnName("csv_PO_No");

                entity.Property(e => e.CsvPoNumber).HasColumnName("csv_PO_Number");

                entity.Property(e => e.CsvPoValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_PO_Value");

                entity.Property(e => e.CsvProductCode)
                    .HasMaxLength(30)
                    .HasColumnName("csv_ProductCode");

                entity.Property(e => e.CsvProductDescription)
                    .HasMaxLength(50)
                    .HasColumnName("csv_ProductDescription");

                entity.Property(e => e.CsvReturnEecharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_ReturnEECharge");

                entity.Property(e => e.CsvReturntoConsignorCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_ReturntoConsignorCharge");

                entity.Property(e => e.CsvRevenue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_Revenue");

                entity.Property(e => e.CsvRowNumber).HasColumnName("csv_row_number");

                entity.Property(e => e.CsvScottishDeliveryZone)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_ScottishDeliveryZone");

                entity.Property(e => e.CsvSecondRef)
                    .HasMaxLength(50)
                    .HasColumnName("csv_SecondRef");

                entity.Property(e => e.CsvSendersRef)
                    .HasMaxLength(100)
                    .HasColumnName("csv_SendersRef");

                entity.Property(e => e.CsvServiceCode)
                    .HasMaxLength(30)
                    .HasColumnName("csv_ServiceCode");

                entity.Property(e => e.CsvServiceDescription)
                    .HasMaxLength(50)
                    .HasColumnName("csv_ServiceDescription");

                entity.Property(e => e.CsvSurcharge)
                    .HasMaxLength(50)
                    .HasColumnName("csv_Surcharge");

                entity.Property(e => e.CsvThirdPartyCollection)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_ThirdPartyCollection");

                entity.Property(e => e.CsvThirdRef)
                    .HasMaxLength(50)
                    .HasColumnName("csv_ThirdRef");

                entity.Property(e => e.CsvTotalCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_TotalCharge");

                entity.Property(e => e.CsvUnsuccEecharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_UnsuccEECharge");

                entity.Property(e => e.CsvUpdateFailMessage)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_fail_message");

                entity.Property(e => e.CsvUpdateWarning)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_warning");

                entity.Property(e => e.CsvUpdated).HasColumnName("csv_updated");

                entity.Property(e => e.CsvUploadedBy).HasColumnName("csv_uploaded_by");

                entity.Property(e => e.CsvUploadedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_uploaded_on")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CsvVatcode)
                    .HasMaxLength(30)
                    .HasColumnName("csv_VATCode");

                entity.Property(e => e.CsvWeight)
                    .HasMaxLength(30)
                    .HasColumnName("csv_Weight");
            });

            modelBuilder.Entity<CsvUploadedFile>(entity =>
            {
                entity.ToTable("csv_Uploaded_Files", "Accounts");

                entity.HasIndex(e => e.BatchId, "IXNC_csv_Uploaded_Files_BatchID_A0D80");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BatchId).HasColumnName("BatchID");

                entity.Property(e => e.Csvtype)
                    .HasMaxLength(200)
                    .HasColumnName("CSVType");

                entity.Property(e => e.Filename).HasMaxLength(500);

                entity.Property(e => e.MimeType)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'text/csv')");
            });

            modelBuilder.Entity<CsvUploadedJournalEntry>(entity =>
            {
                entity.HasKey(e => e.CsvId);

                entity.ToTable("csv_uploaded_journal_entries", "Accounts");

                entity.Property(e => e.CsvId).HasColumnName("csv_id");

                entity.Property(e => e.CsvBatchId).HasColumnName("csv_batch_id");

                entity.Property(e => e.CsvEditedBy).HasColumnName("csv_edited_by");

                entity.Property(e => e.CsvEditedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_edited_on");

                entity.Property(e => e.CsvJeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_JE_Amount");

                entity.Property(e => e.CsvJeCreditNlCode).HasColumnName("csv_JE_Credit_NL_Code");

                entity.Property(e => e.CsvJeCreditVatTypeCode)
                    .HasMaxLength(50)
                    .HasColumnName("csv_JE_Credit_VAT_Type_Code");

                entity.Property(e => e.CsvJeDate)
                    .HasColumnType("date")
                    .HasColumnName("csv_JE_Date");

                entity.Property(e => e.CsvJeDebitNlCode).HasColumnName("csv_JE_Debit_NL_Code");

                entity.Property(e => e.CsvJeDebitVatTypeCode)
                    .HasMaxLength(50)
                    .HasColumnName("csv_JE_Debit_VAT_Type_Code");

                entity.Property(e => e.CsvJeDescription)
                    .HasMaxLength(200)
                    .HasColumnName("csv_JE_Description");

                entity.Property(e => e.CsvRowNumber).HasColumnName("csv_row_number");

                entity.Property(e => e.CsvUpdateFailMessage)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_fail_message");

                entity.Property(e => e.CsvUpdateWarning)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_warning");

                entity.Property(e => e.CsvUpdated)
                    .HasColumnName("csv_updated")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CsvUploadedBy).HasColumnName("csv_uploaded_by");

                entity.Property(e => e.CsvUploadedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_uploaded_on")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CsvUploadedNfuBanking>(entity =>
            {
                entity.HasKey(e => e.CsvId);

                entity.ToTable("csv_uploaded_nfu_bankings", "Accounts");

                entity.HasIndex(e => new { e.CsvBatchId, e.CsvUpdated }, "IXNC_csv_uploaded_nfu_bankings_csv_batch_id_csv_updated_B7F02");

                entity.HasIndex(e => new { e.CsvBatchId, e.CsvUpdated }, "IXNC_csv_uploaded_nfu_bankings_csv_batch_id_csv_updated_D6E25");

                entity.Property(e => e.CsvId).HasColumnName("csv_id");

                entity.Property(e => e.CsvAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_Amount");

                entity.Property(e => e.CsvBankingDate)
                    .HasColumnType("date")
                    .HasColumnName("csv_BankingDate");

                entity.Property(e => e.CsvBankingRef)
                    .HasMaxLength(50)
                    .HasColumnName("csv_BankingRef");

                entity.Property(e => e.CsvBatchId).HasColumnName("csv_batch_id");

                entity.Property(e => e.CsvClaimId).HasColumnName("csv_ClaimID");

                entity.Property(e => e.CsvEditedBy).HasColumnName("csv_edited_by");

                entity.Property(e => e.CsvEditedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_edited_on");

                entity.Property(e => e.CsvInvoice)
                    .HasMaxLength(50)
                    .HasColumnName("csv_Invoice");

                entity.Property(e => e.CsvLossAdjuster)
                    .HasMaxLength(50)
                    .HasColumnName("csv_LossAdjuster");

                entity.Property(e => e.CsvLossAdjusterId).HasColumnName("csv_LossAdjusterID");

                entity.Property(e => e.CsvLossAdjusterName)
                    .HasMaxLength(100)
                    .HasColumnName("csv_LossAdjusterName");

                entity.Property(e => e.CsvRowNumber).HasColumnName("csv_row_number");

                entity.Property(e => e.CsvUpdateFailMessage)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_fail_message");

                entity.Property(e => e.CsvUpdateWarning)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_warning");

                entity.Property(e => e.CsvUpdated).HasColumnName("csv_updated");

                entity.Property(e => e.CsvUploadedBy).HasColumnName("csv_uploaded_by");

                entity.Property(e => e.CsvUploadedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_uploaded_on")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CsvUploadedStockDelivered>(entity =>
            {
                entity.HasKey(e => e.CsvId);

                entity.ToTable("csv_uploaded_stock_delivered", "Accounts");

                entity.Property(e => e.CsvId).HasColumnName("csv_id");

                entity.Property(e => e.CsvBatchId).HasColumnName("csv_batch_id");

                entity.Property(e => e.CsvDateDelivered)
                    .HasColumnType("date")
                    .HasColumnName("csv_DateDelivered");

                entity.Property(e => e.CsvEditedBy).HasColumnName("csv_edited_by");

                entity.Property(e => e.CsvEditedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_edited_on");

                entity.Property(e => e.CsvNetCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_NetCost");

                entity.Property(e => e.CsvPoNumber).HasColumnName("csv_PO_Number");

                entity.Property(e => e.CsvRowNumber).HasColumnName("csv_row_number");

                entity.Property(e => e.CsvUpdateFailMessage)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_fail_message");

                entity.Property(e => e.CsvUpdateWarning)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_warning");

                entity.Property(e => e.CsvUpdated).HasColumnName("csv_updated");

                entity.Property(e => e.CsvUploadedBy).HasColumnName("csv_uploaded_by");

                entity.Property(e => e.CsvUploadedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_uploaded_on")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CsvUploadedSupplierInvoice>(entity =>
            {
                entity.HasKey(e => e.CsvId);

                entity.ToTable("csv_uploaded_supplier_invoices", "Accounts");

                entity.HasIndex(e => e.CsvSupplierId, "IXNC_csv_uploaded_supplier_invoices_csv_SupplierID_2D86C");

                entity.HasIndex(e => new { e.CsvBatchId, e.CsvUpdated }, "IXNC_csv_uploaded_supplier_invoices_csv_batch_id_csv_updated_67D5F");

                entity.HasIndex(e => e.CsvUpdated, "IXNC_csv_uploaded_supplier_invoices_csv_updated_8F4AF");

                entity.Property(e => e.CsvId).HasColumnName("csv_id");

                entity.Property(e => e.CsvBatchId).HasColumnName("csv_batch_id");

                entity.Property(e => e.CsvClaimRef).HasColumnName("csv_Claim_Ref");

                entity.Property(e => e.CsvDiscrepancyNote)
                    .HasMaxLength(200)
                    .HasColumnName("csv_DiscrepancyNote");

                entity.Property(e => e.CsvEditedBy).HasColumnName("csv_edited_by");

                entity.Property(e => e.CsvEditedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_edited_on");

                entity.Property(e => e.CsvInvDate)
                    .HasColumnType("date")
                    .HasColumnName("csv_InvDate");

                entity.Property(e => e.CsvInvNumber)
                    .HasMaxLength(50)
                    .HasColumnName("csv_InvNumber");

                entity.Property(e => e.CsvNetCarriage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_NetCarriage");

                entity.Property(e => e.CsvNetGoods)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_NetGoods");

                entity.Property(e => e.CsvPoNumber).HasColumnName("csv_PO_Number");

                entity.Property(e => e.CsvRowNumber).HasColumnName("csv_row_number");

                entity.Property(e => e.CsvSupplierId).HasColumnName("csv_SupplierID");

                entity.Property(e => e.CsvUpdateFailMessage)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_fail_message");

                entity.Property(e => e.CsvUpdateWarning)
                    .HasMaxLength(200)
                    .HasColumnName("csv_update_warning");

                entity.Property(e => e.CsvUpdated).HasColumnName("csv_updated");

                entity.Property(e => e.CsvUploadedBy).HasColumnName("csv_uploaded_by");

                entity.Property(e => e.CsvUploadedOn)
                    .HasColumnType("date")
                    .HasColumnName("csv_uploaded_on")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CsvVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("csv_VAT");
            });

            modelBuilder.Entity<CurrentPrice>(entity =>
            {
                entity.ToTable("CurrentPrices", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommodityId).HasColumnName("CommodityID");

                entity.Property(e => e.DateTaken).HasColumnType("datetime");

                entity.Property(e => e.PricePerTroyOz).HasColumnType("money");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer", "Site");

                entity.Property(e => e.Address1)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Postcode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TitleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Town)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CustomerAttitude>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CustomerAttitude", "Site");

                entity.Property(e => e.CaClaimId).HasColumnName("ca_ClaimId");

                entity.Property(e => e.CaConcernDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("ca_ConcernDetails");

                entity.Property(e => e.CaEvasive).HasColumnName("ca_Evasive");

                entity.Property(e => e.CaHostile).HasColumnName("ca_Hostile");

                entity.Property(e => e.CaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ca_Id");

                entity.Property(e => e.CaInformedNextSteps).HasColumnName("ca_InformedNextSteps");

                entity.Property(e => e.CaOtherConcerns).HasColumnName("ca_OtherConcerns");

                entity.Property(e => e.CaProductUnderYear).HasColumnName("ca_ProductUnderYear");

                entity.Property(e => e.CaPushy).HasColumnName("ca_Pushy");

                entity.Property(e => e.CaQuestionableCircumstances).HasColumnName("ca_QuestionableCircumstances");

                entity.Property(e => e.CaSubstantiation)
                    .HasColumnType("ntext")
                    .HasColumnName("ca_Substantiation");

                entity.Property(e => e.CaUnsatisfactoryDocumentation).HasColumnName("ca_UnsatisfactoryDocumentation");
            });

            modelBuilder.Entity<CustomerInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CustomerInvoices", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.CarriageToInsurance).HasColumnType("money");

                entity.Property(e => e.IsPhvatregistered).HasColumnName("IsPHVATRegistered");

                entity.Property(e => e.LaaccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("LAAccountRef");

                entity.Property(e => e.Laadress1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress1");

                entity.Property(e => e.Laadress2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress2");

                entity.Property(e => e.Laadress3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress3");

                entity.Property(e => e.Laadress4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress4");

                entity.Property(e => e.Laadress5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress5");

                entity.Property(e => e.Laname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAName");

                entity.Property(e => e.Laref)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LARef");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.Sbsref).HasColumnName("SBSREF");
            });

            modelBuilder.Entity<CustomerPortalLoginToken>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CustomerPortalLoginToken", "Validation");

                entity.Property(e => e.Token)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TokenCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<Cycle>(entity =>
            {
                entity.ToTable("Cycles", "Product");

                entity.HasIndex(e => new { e.Stock, e.BrandId, e.Description, e.WebDescription, e.ItemCode, e.CycleId, e.CostPrice }, "_dta_index_Cycles_16_2039014345__K12_K5_K6_K7_K4_K1_K10_11_17");

                entity.HasIndex(e => new { e.OldProductId, e.BrandId, e.CycleId, e.ItemCode }, "_dta_index_Cycles_16_2039014345__K17_K5_K1_K4_6_7");

                entity.HasIndex(e => new { e.ItemCode, e.Stock, e.BrandId, e.Description, e.WebDescription, e.CycleId, e.CostPrice }, "_dta_index_Cycles_16_2039014345__K4_K12_K5_K6_K7_K1_K10_11_17");

                entity.HasIndex(e => new { e.Description, e.Stock, e.BrandId, e.WebDescription, e.ItemCode, e.CycleId, e.CostPrice }, "_dta_index_Cycles_16_2039014345__K6_K12_K5_K7_K4_K1_K10_11_17");

                entity.HasIndex(e => new { e.WebDescription, e.Stock, e.BrandId, e.Description, e.ItemCode, e.CycleId, e.CostPrice }, "_dta_index_Cycles_16_2039014345__K7_K12_K5_K6_K4_K1_K10_11_17");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.EanUpcBarcode)
                    .HasMaxLength(50)
                    .HasColumnName("EAN_UPC_Barcode");

                entity.Property(e => e.ExpectedAvailability).HasMaxLength(50);

                entity.Property(e => e.InformationUrl)
                    .HasMaxLength(50)
                    .HasColumnName("InformationURL");

                entity.Property(e => e.InternalBarcode).HasMaxLength(50);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemNumber).HasMaxLength(50);

                entity.Property(e => e.OldProductId).HasColumnName("OldProductID");

                entity.Property(e => e.PictureUrl)
                    .HasMaxLength(250)
                    .HasColumnName("PictureURL");

                entity.Property(e => e.VariantCode).HasMaxLength(50);

                entity.Property(e => e.WebDescription).HasMaxLength(100);

                entity.HasOne(d => d.Brand)
                    .WithMany(p => p.Cycles)
                    .HasForeignKey(d => d.BrandId)
                    .HasConstraintName("FK_Cycles_CycleBrands");
            });

            modelBuilder.Entity<CycleBot>(entity =>
            {
                entity.ToTable("CycleBot", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PerilId).HasColumnName("PerilID");

                entity.Property(e => e.Question).IsUnicode(false);

                entity.Property(e => e.QuestionId).HasColumnName("QuestionID");
            });

            modelBuilder.Entity<CycleBrand>(entity =>
            {
                entity.ToTable("CycleBrands", "Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<CycleImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CycleImport", "Product");

                entity.Property(e => e.AvailabilityComments).HasMaxLength(100);

                entity.Property(e => e.BikeType).HasMaxLength(100);

                entity.Property(e => e.Both)
                    .HasMaxLength(100)
                    .HasColumnName("BOTH");

                entity.Property(e => e.BrakeType).HasMaxLength(100);

                entity.Property(e => e.BrandCode).HasMaxLength(100);

                entity.Property(e => e.ChainsetType).HasMaxLength(100);

                entity.Property(e => e.ColourFlavour)
                    .HasMaxLength(100)
                    .HasColumnName("Colour_Flavour");

                entity.Property(e => e.CostPrice).HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Description2)
                    .HasMaxLength(100)
                    .HasColumnName("Description_2");

                entity.Property(e => e.DrivetrainBrand).HasMaxLength(100);

                entity.Property(e => e.DrivetrainGroupset).HasMaxLength(100);

                entity.Property(e => e.DropperPost).HasMaxLength(100);

                entity.Property(e => e.EanUpcBarcode)
                    .HasMaxLength(100)
                    .HasColumnName("EAN_UPC_Barcode");

                entity.Property(e => e.ElectronicDrivetrainCompatible).HasMaxLength(100);

                entity.Property(e => e.ExpectedAvailability).HasMaxLength(100);

                entity.Property(e => e.FrameMaterial).HasMaxLength(100);

                entity.Property(e => e.GearType).HasMaxLength(100);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(250)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.InternalBardcode).HasMaxLength(100);

                entity.Property(e => e.ItemNumber).HasMaxLength(100);

                entity.Property(e => e.ModelYear).HasMaxLength(100);

                entity.Property(e => e.ProductGroup).HasMaxLength(100);

                entity.Property(e => e.ProductSubgroup).HasMaxLength(100);

                entity.Property(e => e.QuantityOnOrder).HasMaxLength(100);

                entity.Property(e => e.Speed).HasMaxLength(100);

                entity.Property(e => e.StockLevel).HasMaxLength(100);

                entity.Property(e => e.SupplierName).HasMaxLength(100);

                entity.Property(e => e.SupplierNumber).HasMaxLength(100);

                entity.Property(e => e.SuspensionBrand).HasMaxLength(100);

                entity.Property(e => e.SuspensionType).HasMaxLength(100);

                entity.Property(e => e.VariantCode).HasMaxLength(100);

                entity.Property(e => e.Vat)
                    .HasMaxLength(1000)
                    .HasColumnName("VAT");

                entity.Property(e => e.WebDescription).HasMaxLength(100);

                entity.Property(e => e.WebPrice).HasMaxLength(100);

                entity.Property(e => e.WebsiteLink).HasMaxLength(100);

                entity.Property(e => e.WheelSize).HasMaxLength(100);

                entity.Property(e => e.WomenSpecific).HasMaxLength(100);
            });

            modelBuilder.Entity<CycleValue>(entity =>
            {
                entity.ToTable("CycleValues", "Product");

                entity.Property(e => e.Value).HasMaxLength(50);

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.HasOne(d => d.Cycle)
                    .WithMany(p => p.CycleValues)
                    .HasForeignKey(d => d.CycleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CycleValues_Cycles");
            });

            modelBuilder.Entity<DataAlert>(entity =>
            {
                entity.ToTable("DataAlerts", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Data14Time).HasColumnType("datetime");

                entity.Property(e => e.Data28Time).HasColumnType("datetime");
            });

            modelBuilder.Entity<DataDump>(entity =>
            {
                entity.ToTable("DataDump", "MI");

                entity.HasIndex(e => e.ForTheYear, "IXNC_DataDump_For_The_Year_C600C");

                entity.HasIndex(e => new { e.LeadItemCommodity, e.InsuranceCo, e.DateClosed }, "IXNC_DataDump_Lead_Item_Commodity_Insurance_Co_Date_Closed_79627");

                entity.HasIndex(e => new { e.Laid, e.InvoiceDate, e.DateClosed }, "_dta_index_DataDump_9_755533775__K145_K31_K20");

                entity.HasIndex(e => e.ClaimId, "datadumpClaimID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActualVisit)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Visit");

                entity.Property(e => e.AdditionalGoodSordered)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Additional_Good_Sordered");

                entity.Property(e => e.AgreedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Agreed_Delivery_Date");

                entity.Property(e => e.AssignOutcome)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Assign_Outcome");

                entity.Property(e => e.AwaitingCarpetSample)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Carpet_Sample");

                entity.Property(e => e.AwaitingFittingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Fitting_Date");

                entity.Property(e => e.AwaitingProofOfPurchase)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Proof_Of_Purchase");

                entity.Property(e => e.Berack).HasColumnType("datetime");

                entity.Property(e => e.BettermentAgreed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Betterment_Agreed");

                entity.Property(e => e.BiToolUsed)
                    .HasColumnType("datetime")
                    .HasColumnName("Bi_Tool_Used");

                entity.Property(e => e.BuyRate).HasColumnName("Buy_Rate");

                entity.Property(e => e.CancelledDuringTransit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Cancelled_During_Transit");

                entity.Property(e => e.CarpetDryingCompleted)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Drying_Completed");

                entity.Property(e => e.CarpetDryingStarted)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Drying_Started");

                entity.Property(e => e.CarpetFitted)
                    .HasColumnType("datetime")
                    .HasColumnName("Carpet_Fitted");

                entity.Property(e => e.CarpetSample)
                    .HasColumnType("datetime")
                    .HasColumnName("Carpet_Sample");

                entity.Property(e => e.CarpetVoucherIssued)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Voucher_Issued");

                entity.Property(e => e.CarpetVoucherRedeemed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Voucher_Redeemed");

                entity.Property(e => e.CashSettledByInsuranceCompany)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Cash_Settled_By_Insurance_Company");

                entity.Property(e => e.CashSettledBySbs)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Cash_Settled_By_Sbs");

                entity.Property(e => e.CauseOfDamage)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Cause_Of_Damage");

                entity.Property(e => e.ClaimAuthorityType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Authority_Type");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_Id");

                entity.Property(e => e.ClaimItemRepudiated)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Repudiated");

                entity.Property(e => e.ClaimItemWithdrawnByIc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Withdrawn_By_Ic");

                entity.Property(e => e.ClaimItemWithdrawnByPh)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Withdrawn_By_Ph");

                entity.Property(e => e.ClaimOrderId).HasColumnName("Claim_Order_Id");

                entity.Property(e => e.ClaimOutcome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Outcome");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Type");

                entity.Property(e => e.ClaimValue).HasColumnName("Claim_Value");

                entity.Property(e => e.CleaninProgress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Cleanin_Progress");

                entity.Property(e => e.CloseClaim)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Claim");

                entity.Property(e => e.CloseItem)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Item");

                entity.Property(e => e.Commodity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBySupplier)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Confirmed_By_Supplier");

                entity.Property(e => e.CostOfDelivery).HasColumnName("Cost_Of_Delivery");

                entity.Property(e => e.CustomerInformedOfInspectionResultsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Customer_Informed_Of_Inspection_Results_Date");

                entity.Property(e => e.CustomerRejectedSettlement)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Rejected_Settlement");

                entity.Property(e => e.DateClosed)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Closed");

                entity.Property(e => e.DateInspectionAcknowledged)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Inspection_Acknowledged");

                entity.Property(e => e.DateOpened)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Opened");

                entity.Property(e => e.DateRepairread)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Date_Repairread");

                entity.Property(e => e.DeadOnArrival)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Dead_On_Arrival");

                entity.Property(e => e.DpdCollectionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Dpd_Collection_Date");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EngineerBooked)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Engineer_Booked");

                entity.Property(e => e.EngineerName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Engineer_Name");

                entity.Property(e => e.EstimatedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Estimated_Delivery_Date");

                entity.Property(e => e.ExcessCollected)
                    .HasColumnType("datetime")
                    .HasColumnName("Excess_Collected");

                entity.Property(e => e.FailedRepair)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Failed_Repair");

                entity.Property(e => e.FirstContact)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Contact");

                entity.Property(e => e.FirstContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Contact_Letter");

                entity.Property(e => e.ForTheMonth)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("For_The_Month");

                entity.Property(e => e.ForTheYear).HasColumnName("For_The_Year");

                entity.Property(e => e.GoodsRecivedCalloutBooked)
                    .HasColumnType("datetime")
                    .HasColumnName("Goods_Recived_Callout_Booked");

                entity.Property(e => e.HandlerreadPrintedReport)
                    .HasColumnType("datetime")
                    .HasColumnName("Handlerread_Printed_Report");

                entity.Property(e => e.HomeTel)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Home_Tel");

                entity.Property(e => e.HoursPaused).HasColumnName("Hours_Paused");

                entity.Property(e => e.IncorrectItemSupplied)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Incorrect_Item_Supplied");

                entity.Property(e => e.InsCoHandler)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Ins_Co_Handler");

                entity.Property(e => e.InspCancelled)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_Cancelled");

                entity.Property(e => e.InspectionArranged)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Arranged");

                entity.Property(e => e.InspectionCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Created");

                entity.Property(e => e.InspectionReadByEngineer)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Read_By_Engineer");

                entity.Property(e => e.InspectionReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Report_Date");

                entity.Property(e => e.InspectionReportTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Report_To");

                entity.Property(e => e.InspectionReported)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Reported");

                entity.Property(e => e.InstructionBookedOnFnol)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction_Booked_On_Fnol");

                entity.Property(e => e.InstructionBookedOnIp)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction_Booked_On_Ip");

                entity.Property(e => e.InstructionBookedOnIpAutomaticly)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Instruction_Booked_On_Ip_Automaticly");

                entity.Property(e => e.InstructionToNotRepair)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Instruction_To_Not_Repair");

                entity.Property(e => e.InsuranceCo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Insurance_Co");

                entity.Property(e => e.InsuredPostcode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Insured_Postcode");

                entity.Property(e => e.InsuredSurname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Insured_Surname");

                entity.Property(e => e.InvDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Description");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceFinal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Invoice_Final");

                entity.Property(e => e.InvoiceInterim)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Invoice_Interim");

                entity.Property(e => e.InvoiceNo).HasColumnName("Invoice_No");

                entity.Property(e => e.ItemOutcome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Item_Outcome");

                entity.Property(e => e.ItemReadyTobeInvoiced)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Item_Ready_Tobe_Invoiced");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.LaReference)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("La_Reference");

                entity.Property(e => e.Laid).HasColumnName("LAid");

                entity.Property(e => e.LastItemDelDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Item_Del_Date");

                entity.Property(e => e.LastPhContact)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_PH_Contact");

                entity.Property(e => e.LeadItemCommodity)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Lead_Item_Commodity");

                entity.Property(e => e.LineItemCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Line_Item_Category");

                entity.Property(e => e.LossAdjusterAccountRef)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Loss_Adjuster_Account_Ref");

                entity.Property(e => e.LossAdjusterName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Loss_Adjuster_Name");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MandateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("Mandate_Sent");

                entity.Property(e => e.MaxTimeToReturnCallInMinutes).HasColumnName("Max_Time_To_Return_Call_In_Minutes");

                entity.Property(e => e.MobileTel)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Mobile_Tel");

                entity.Property(e => e.Model)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nondelivery)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPlaced)
                    .HasColumnType("datetime")
                    .HasColumnName("Order_Placed");

                entity.Property(e => e.Peril)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Period).HasColumnType("datetime");

                entity.Property(e => e.PhoneContactWithPolicyHolder)
                    .HasColumnType("datetime")
                    .HasColumnName("Phone_Contact_With_Policy_Holder");

                entity.Property(e => e.PoNumber).HasColumnName("Po_Number");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Policy_Number");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Product_Code");

                entity.Property(e => e.PurchaseOrderRaised)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Purchase_Order_Raised");

                entity.Property(e => e.QuoteToInsurance)
                    .HasColumnType("datetime")
                    .HasColumnName("Quote_To_Insurance");

                entity.Property(e => e.ReasonForClaim)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Reason_For_Claim");

                entity.Property(e => e.RecommendRepudiation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Recommend_Repudiation");

                entity.Property(e => e.RepairAuth)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Auth");

                entity.Property(e => e.RepairComplete)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repair_Complete");

                entity.Property(e => e.RepairCompleteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Complete_Date");

                entity.Property(e => e.RepairFailed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repair_Failed");

                entity.Property(e => e.RepairOffered)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Offered");

                entity.Property(e => e.RepairReqSent)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Req_Sent");

                entity.Property(e => e.RepairToBeCarriedout)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_To_Be_Carriedout");

                entity.Property(e => e.RepairedItemReturned)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repaired_Item_Returned");

                entity.Property(e => e.RepairtObecarriedoutGiftware)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Giftware");

                entity.Property(e => e.RepairtObecarriedoutJewellry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Jewellry");

                entity.Property(e => e.RepairtObecarriedoutWatch)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Watch");

                entity.Property(e => e.ReplacedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Replaced_Date");

                entity.Property(e => e.ReplacementFloorOffered)
                    .HasColumnType("datetime")
                    .HasColumnName("Replacement_Floor_Offered");

                entity.Property(e => e.ReplacementGoodSordered)
                    .HasColumnType("datetime")
                    .HasColumnName("Replacement_Good_Sordered");

                entity.Property(e => e.SaleExVat).HasColumnName("Sale_Ex_Vat");

                entity.Property(e => e.SaleIncVat).HasColumnName("Sale_Inc_Vat");

                entity.Property(e => e.SbsHandler)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Sbs_Handler");

                entity.Property(e => e.SecondContactAttempt)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Attempt");

                entity.Property(e => e.SecondContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Letter");

                entity.Property(e => e.SecondContactSuccess)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Success");

                entity.Property(e => e.SmsEmailToPh)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sms_Email_To_Ph");

                entity.Property(e => e.SourcingPartsForRepair)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_For_Repair");

                entity.Property(e => e.SourcingPartsForRepairJewellry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_For_Repair_Jewellry");

                entity.Property(e => e.SourcingPartsOrMaterialForRepair)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_Or_Material_For_Repair");

                entity.Property(e => e.SuccessfulLastContractPriorToGoodsOrdered)
                    .HasColumnType("datetime")
                    .HasColumnName("Successful_Last_Contract_Prior_To_Goods_Ordered");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TeleSale)
                    .HasColumnType("datetime")
                    .HasColumnName("Tele_Sale");

                entity.Property(e => e.ThirdContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("Third_Contact_Letter");

                entity.Property(e => e.ValidationTool)
                    .HasColumnType("datetime")
                    .HasColumnName("Validation_Tool");

                entity.Property(e => e.VariationToInstructionIc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ic");

                entity.Property(e => e.VariationToInstructionIi)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ii");

                entity.Property(e => e.VariationToInstructionPh)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ph");

                entity.Property(e => e.VatRegistered)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Vat_Registered");

                entity.Property(e => e.VoucherIssued)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Voucher_Issued");

                entity.Property(e => e.VoucherOffered)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Voucher_Offered");

                entity.Property(e => e.WorkTel)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Work_Tel");
            });

            modelBuilder.Entity<DataDumpClosed>(entity =>
            {
                entity.ToTable("DataDumpClosed", "MI");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActualVisit)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Visit");

                entity.Property(e => e.AdditionalGoodSordered)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Additional_Good_Sordered");

                entity.Property(e => e.AgreedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Agreed_Delivery_Date");

                entity.Property(e => e.AssignOutcome)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Assign_Outcome");

                entity.Property(e => e.AwaitingCarpetSample)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Carpet_Sample");

                entity.Property(e => e.AwaitingFittingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Fitting_Date");

                entity.Property(e => e.AwaitingProofOfPurchase)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Proof_Of_Purchase");

                entity.Property(e => e.Berack).HasColumnType("datetime");

                entity.Property(e => e.BettermentAgreed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Betterment_Agreed");

                entity.Property(e => e.BiToolUsed)
                    .HasColumnType("datetime")
                    .HasColumnName("Bi_Tool_Used");

                entity.Property(e => e.BuyRate).HasColumnName("Buy_Rate");

                entity.Property(e => e.CancelledDuringTransit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Cancelled_During_Transit");

                entity.Property(e => e.CarpetDryingCompleted)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Drying_Completed");

                entity.Property(e => e.CarpetDryingStarted)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Drying_Started");

                entity.Property(e => e.CarpetFitted)
                    .HasColumnType("datetime")
                    .HasColumnName("Carpet_Fitted");

                entity.Property(e => e.CarpetSample)
                    .HasColumnType("datetime")
                    .HasColumnName("Carpet_Sample");

                entity.Property(e => e.CarpetVoucherIssued)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Voucher_Issued");

                entity.Property(e => e.CarpetVoucherRedeemed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Voucher_Redeemed");

                entity.Property(e => e.CashSettledByInsuranceCompany)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Cash_Settled_By_Insurance_Company");

                entity.Property(e => e.CashSettledBySbs)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Cash_Settled_By_Sbs");

                entity.Property(e => e.CauseOfDamage)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Cause_Of_Damage");

                entity.Property(e => e.ClaimAuthorityType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Authority_Type");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_Id");

                entity.Property(e => e.ClaimItemRepudiated)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Repudiated");

                entity.Property(e => e.ClaimItemWithdrawnByIc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Withdrawn_By_Ic");

                entity.Property(e => e.ClaimItemWithdrawnByPh)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Withdrawn_By_Ph");

                entity.Property(e => e.ClaimOrderId).HasColumnName("Claim_Order_Id");

                entity.Property(e => e.ClaimOutcome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Outcome");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Type");

                entity.Property(e => e.ClaimValue).HasColumnName("Claim_Value");

                entity.Property(e => e.CleaninProgress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Cleanin_Progress");

                entity.Property(e => e.CloseClaim)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Claim");

                entity.Property(e => e.CloseItem)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Item");

                entity.Property(e => e.Commodity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBySupplier)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Confirmed_By_Supplier");

                entity.Property(e => e.CostOfDelivery).HasColumnName("Cost_Of_Delivery");

                entity.Property(e => e.CustomerInformedOfInspectionResultsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Customer_Informed_Of_Inspection_Results_Date");

                entity.Property(e => e.CustomerRejectedSettlement)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Rejected_Settlement");

                entity.Property(e => e.DateClosed)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Closed");

                entity.Property(e => e.DateInspectionAcknowledged)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Inspection_Acknowledged");

                entity.Property(e => e.DateOpened)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Opened");

                entity.Property(e => e.DateRepairread)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Date_Repairread");

                entity.Property(e => e.DeadOnArrival)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Dead_On_Arrival");

                entity.Property(e => e.DpdCollectionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Dpd_Collection_Date");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EngineerBooked)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Engineer_Booked");

                entity.Property(e => e.EngineerName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Engineer_Name");

                entity.Property(e => e.EstimatedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Estimated_Delivery_Date");

                entity.Property(e => e.ExcessCollected)
                    .HasColumnType("datetime")
                    .HasColumnName("Excess_Collected");

                entity.Property(e => e.FailedRepair)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Failed_Repair");

                entity.Property(e => e.FirstContact)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Contact");

                entity.Property(e => e.FirstContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Contact_Letter");

                entity.Property(e => e.ForTheMonth)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("For_The_Month");

                entity.Property(e => e.ForTheYear).HasColumnName("For_The_Year");

                entity.Property(e => e.GoodsRecivedCalloutBooked)
                    .HasColumnType("datetime")
                    .HasColumnName("Goods_Recived_Callout_Booked");

                entity.Property(e => e.HandlerreadPrintedReport)
                    .HasColumnType("datetime")
                    .HasColumnName("Handlerread_Printed_Report");

                entity.Property(e => e.HomeTel)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Home_Tel");

                entity.Property(e => e.HoursPaused).HasColumnName("Hours_Paused");

                entity.Property(e => e.IncorrectItemSupplied)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Incorrect_Item_Supplied");

                entity.Property(e => e.InsCoHandler)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Ins_Co_Handler");

                entity.Property(e => e.InspCancelled)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_Cancelled");

                entity.Property(e => e.InspectionArranged)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Arranged");

                entity.Property(e => e.InspectionCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Created");

                entity.Property(e => e.InspectionReadByEngineer)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Read_By_Engineer");

                entity.Property(e => e.InspectionReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Report_Date");

                entity.Property(e => e.InspectionReportTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Report_To");

                entity.Property(e => e.InspectionReported)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Reported");

                entity.Property(e => e.InstructionBookedOnFnol)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction_Booked_On_Fnol");

                entity.Property(e => e.InstructionBookedOnIp)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction_Booked_On_Ip");

                entity.Property(e => e.InstructionBookedOnIpAutomaticly)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Instruction_Booked_On_Ip_Automaticly");

                entity.Property(e => e.InstructionToNotRepair)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Instruction_To_Not_Repair");

                entity.Property(e => e.InsuranceCo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Insurance_Co");

                entity.Property(e => e.InsuredPostcode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Insured_Postcode");

                entity.Property(e => e.InsuredSurname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Insured_Surname");

                entity.Property(e => e.InvDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Description");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceFinal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Invoice_Final");

                entity.Property(e => e.InvoiceInterim)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Invoice_Interim");

                entity.Property(e => e.InvoiceNo).HasColumnName("Invoice_No");

                entity.Property(e => e.ItemOutcome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Item_Outcome");

                entity.Property(e => e.ItemReadyTobeInvoiced)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Item_Ready_Tobe_Invoiced");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.LaReference)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("La_Reference");

                entity.Property(e => e.Laid).HasColumnName("LAid");

                entity.Property(e => e.LastItemDelDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Item_Del_Date");

                entity.Property(e => e.LastPhContact)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_PH_Contact");

                entity.Property(e => e.LeadItemCommodity)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Lead_Item_Commodity");

                entity.Property(e => e.LineItemCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Line_Item_Category");

                entity.Property(e => e.LossAdjusterAccountRef)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Loss_Adjuster_Account_Ref");

                entity.Property(e => e.LossAdjusterName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Loss_Adjuster_Name");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MandateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("Mandate_Sent");

                entity.Property(e => e.MaxTimeToReturnCallInMinutes).HasColumnName("Max_Time_To_Return_Call_In_Minutes");

                entity.Property(e => e.MobileTel)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Mobile_Tel");

                entity.Property(e => e.Model)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nondelivery)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPlaced)
                    .HasColumnType("datetime")
                    .HasColumnName("Order_Placed");

                entity.Property(e => e.Peril)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Period).HasColumnType("datetime");

                entity.Property(e => e.PhoneContactWithPolicyHolder)
                    .HasColumnType("datetime")
                    .HasColumnName("Phone_Contact_With_Policy_Holder");

                entity.Property(e => e.PoNumber).HasColumnName("Po_Number");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Policy_Number");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Product_Code");

                entity.Property(e => e.PurchaseOrderRaised)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Purchase_Order_Raised");

                entity.Property(e => e.QuoteToInsurance)
                    .HasColumnType("datetime")
                    .HasColumnName("Quote_To_Insurance");

                entity.Property(e => e.ReasonForClaim)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Reason_For_Claim");

                entity.Property(e => e.RecommendRepudiation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Recommend_Repudiation");

                entity.Property(e => e.RepairAuth)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Auth");

                entity.Property(e => e.RepairComplete)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repair_Complete");

                entity.Property(e => e.RepairCompleteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Complete_Date");

                entity.Property(e => e.RepairFailed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repair_Failed");

                entity.Property(e => e.RepairOffered)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Offered");

                entity.Property(e => e.RepairReqSent)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Req_Sent");

                entity.Property(e => e.RepairToBeCarriedout)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_To_Be_Carriedout");

                entity.Property(e => e.RepairedItemReturned)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repaired_Item_Returned");

                entity.Property(e => e.RepairtObecarriedoutGiftware)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Giftware");

                entity.Property(e => e.RepairtObecarriedoutJewellry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Jewellry");

                entity.Property(e => e.RepairtObecarriedoutWatch)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Watch");

                entity.Property(e => e.ReplacedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Replaced_Date");

                entity.Property(e => e.ReplacementFloorOffered)
                    .HasColumnType("datetime")
                    .HasColumnName("Replacement_Floor_Offered");

                entity.Property(e => e.ReplacementGoodSordered)
                    .HasColumnType("datetime")
                    .HasColumnName("Replacement_Good_Sordered");

                entity.Property(e => e.SaleExVat).HasColumnName("Sale_Ex_Vat");

                entity.Property(e => e.SaleIncVat).HasColumnName("Sale_Inc_Vat");

                entity.Property(e => e.SbsHandler)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Sbs_Handler");

                entity.Property(e => e.SecondContactAttempt)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Attempt");

                entity.Property(e => e.SecondContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Letter");

                entity.Property(e => e.SecondContactSuccess)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Success");

                entity.Property(e => e.SmsEmailToPh)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sms_Email_To_Ph");

                entity.Property(e => e.SourcingPartsForRepair)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_For_Repair");

                entity.Property(e => e.SourcingPartsForRepairJewellry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_For_Repair_Jewellry");

                entity.Property(e => e.SourcingPartsOrMaterialForRepair)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_Or_Material_For_Repair");

                entity.Property(e => e.SuccessfulLastContractPriorToGoodsOrdered)
                    .HasColumnType("datetime")
                    .HasColumnName("Successful_Last_Contract_Prior_To_Goods_Ordered");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TeleSale)
                    .HasColumnType("datetime")
                    .HasColumnName("Tele_Sale");

                entity.Property(e => e.ThirdContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("Third_Contact_Letter");

                entity.Property(e => e.ValidationTool)
                    .HasColumnType("datetime")
                    .HasColumnName("Validation_Tool");

                entity.Property(e => e.VariationToInstructionIc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ic");

                entity.Property(e => e.VariationToInstructionIi)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ii");

                entity.Property(e => e.VariationToInstructionPh)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ph");

                entity.Property(e => e.VatRegistered)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Vat_Registered");

                entity.Property(e => e.VoucherIssued)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Voucher_Issued");

                entity.Property(e => e.VoucherOffered)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Voucher_Offered");

                entity.Property(e => e.WorkTel)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Work_Tel");
            });

            modelBuilder.Entity<DataDumpNew>(entity =>
            {
                entity.ToTable("DataDump_NEW", "MI");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActualVisit)
                    .HasColumnType("datetime")
                    .HasColumnName("Actual_Visit");

                entity.Property(e => e.AdditionalGoodSordered)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Additional_Good_Sordered");

                entity.Property(e => e.AgreedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Agreed_Delivery_Date");

                entity.Property(e => e.AssignOutcome)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Assign_Outcome");

                entity.Property(e => e.AwaitingCarpetSample)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Carpet_Sample");

                entity.Property(e => e.AwaitingFittingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Fitting_Date");

                entity.Property(e => e.AwaitingProofOfPurchase)
                    .HasColumnType("datetime")
                    .HasColumnName("Awaiting_Proof_Of_Purchase");

                entity.Property(e => e.Berack).HasColumnType("datetime");

                entity.Property(e => e.BettermentAgreed)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Betterment_Agreed");

                entity.Property(e => e.BiToolUsed)
                    .HasColumnType("datetime")
                    .HasColumnName("Bi_Tool_Used");

                entity.Property(e => e.BuyRate).HasColumnName("Buy_Rate");

                entity.Property(e => e.CancelledDuringTransit)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Cancelled_During_Transit");

                entity.Property(e => e.CarpetDryingCompleted)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Drying_Completed");

                entity.Property(e => e.CarpetDryingStarted)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Drying_Started");

                entity.Property(e => e.CarpetFitted)
                    .HasColumnType("datetime")
                    .HasColumnName("Carpet_Fitted");

                entity.Property(e => e.CarpetSample)
                    .HasColumnType("datetime")
                    .HasColumnName("Carpet_Sample");

                entity.Property(e => e.CarpetVoucherIssued)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Voucher_Issued");

                entity.Property(e => e.CarpetVoucherRedeemed)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Carpet_Voucher_Redeemed");

                entity.Property(e => e.CashSettledByInsuranceCompany)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Cash_Settled_By_Insurance_Company");

                entity.Property(e => e.CashSettledBySbs)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Cash_Settled_By_Sbs");

                entity.Property(e => e.CauseOfDamage)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Cause_Of_Damage");

                entity.Property(e => e.ClaimAuthorityType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Authority_Type");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_Id");

                entity.Property(e => e.ClaimItemRepudiated)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Repudiated");

                entity.Property(e => e.ClaimItemWithdrawnByIc)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Withdrawn_By_Ic");

                entity.Property(e => e.ClaimItemWithdrawnByPh)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Item_Withdrawn_By_Ph");

                entity.Property(e => e.ClaimOrderId).HasColumnName("Claim_Order_Id");

                entity.Property(e => e.ClaimOutcome)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Outcome");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Claim_Type");

                entity.Property(e => e.ClaimValue).HasColumnName("Claim_Value");

                entity.Property(e => e.CleaninProgress)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Cleanin_Progress");

                entity.Property(e => e.CloseClaim)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Claim");

                entity.Property(e => e.CloseItem)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Item");

                entity.Property(e => e.Commodity)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBySupplier)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Confirmed_By_Supplier");

                entity.Property(e => e.CostOfDelivery).HasColumnName("Cost_Of_Delivery");

                entity.Property(e => e.CustomerInformedOfInspectionResultsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Customer_Informed_Of_Inspection_Results_Date");

                entity.Property(e => e.CustomerRejectedSettlement)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Rejected_Settlement");

                entity.Property(e => e.DateClosed)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Closed");

                entity.Property(e => e.DateInspectionAcknowledged)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Inspection_Acknowledged");

                entity.Property(e => e.DateOpened)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Opened");

                entity.Property(e => e.DateRepairread)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Date_Repairread");

                entity.Property(e => e.DeadOnArrival)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Dead_On_Arrival");

                entity.Property(e => e.DpdCollectionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Dpd_Collection_Date");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EngineerBooked)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Engineer_Booked");

                entity.Property(e => e.EngineerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Engineer_Name");

                entity.Property(e => e.EstimatedDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Estimated_Delivery_Date");

                entity.Property(e => e.ExcessCollected)
                    .HasColumnType("datetime")
                    .HasColumnName("Excess_Collected");

                entity.Property(e => e.FailedRepair)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Failed_Repair");

                entity.Property(e => e.FirstContact)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Contact");

                entity.Property(e => e.FirstContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Contact_Letter");

                entity.Property(e => e.ForTheMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("For_The_Month");

                entity.Property(e => e.ForTheYear).HasColumnName("For_The_Year");

                entity.Property(e => e.GoodsRecivedCalloutBooked)
                    .HasColumnType("datetime")
                    .HasColumnName("Goods_Recived_Callout_Booked");

                entity.Property(e => e.HandlerreadPrintedReport)
                    .HasColumnType("datetime")
                    .HasColumnName("Handlerread_Printed_Report");

                entity.Property(e => e.HomeTel)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Home_Tel");

                entity.Property(e => e.HoursPaused).HasColumnName("Hours_Paused");

                entity.Property(e => e.IncorrectItemSupplied)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Incorrect_Item_Supplied");

                entity.Property(e => e.InsCoHandler)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Ins_Co_Handler");

                entity.Property(e => e.InspCancelled)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_Cancelled");

                entity.Property(e => e.InspectionArranged)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Arranged");

                entity.Property(e => e.InspectionCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Created");

                entity.Property(e => e.InspectionReadByEngineer)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Read_By_Engineer");

                entity.Property(e => e.InspectionReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Report_Date");

                entity.Property(e => e.InspectionReportTo)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Report_To");

                entity.Property(e => e.InspectionReported)
                    .HasColumnType("datetime")
                    .HasColumnName("Inspection_Reported");

                entity.Property(e => e.InstructionBookedOnFnol)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction_Booked_On_Fnol");

                entity.Property(e => e.InstructionBookedOnIp)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction_Booked_On_Ip");

                entity.Property(e => e.InstructionBookedOnIpAutomaticly)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Instruction_Booked_On_Ip_Automaticly");

                entity.Property(e => e.InstructionToNotRepair)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Instruction_To_Not_Repair");

                entity.Property(e => e.InsuranceCo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Insurance_Co");

                entity.Property(e => e.InsuredPostcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Insured_Postcode");

                entity.Property(e => e.InsuredSurname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Insured_Surname");

                entity.Property(e => e.InvDescription)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Description");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceFinal)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Invoice_Final");

                entity.Property(e => e.InvoiceInterim)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Invoice_Interim");

                entity.Property(e => e.InvoiceNo).HasColumnName("Invoice_No");

                entity.Property(e => e.ItemOutcome)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Item_Outcome");

                entity.Property(e => e.ItemReadyTobeInvoiced)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Item_Ready_Tobe_Invoiced");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.LaReference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("La_Reference");

                entity.Property(e => e.Laid).HasColumnName("LAid");

                entity.Property(e => e.LastItemDelDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Item_Del_Date");

                entity.Property(e => e.LastPhContact)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_PH_Contact");

                entity.Property(e => e.LeadItemCommodity)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Lead_Item_Commodity");

                entity.Property(e => e.LineItemCategory)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Line_Item_Category");

                entity.Property(e => e.LossAdjusterAccountRef)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Loss_Adjuster_Account_Ref");

                entity.Property(e => e.LossAdjusterName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Loss_Adjuster_Name");

                entity.Property(e => e.Make)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MandateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("Mandate_Sent");

                entity.Property(e => e.MaxTimeToReturnCallInMinutes).HasColumnName("Max_Time_To_Return_Call_In_Minutes");

                entity.Property(e => e.MobileTel)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Mobile_Tel");

                entity.Property(e => e.Model)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nondelivery)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPlaced)
                    .HasColumnType("datetime")
                    .HasColumnName("Order_Placed");

                entity.Property(e => e.Peril)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Period).HasColumnType("datetime");

                entity.Property(e => e.PhoneContactWithPolicyHolder)
                    .HasColumnType("datetime")
                    .HasColumnName("Phone_Contact_With_Policy_Holder");

                entity.Property(e => e.PoNumber).HasColumnName("Po_Number");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Policy_Number");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Product_Code");

                entity.Property(e => e.PurchaseOrderRaised)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Purchase_Order_Raised");

                entity.Property(e => e.QuoteToInsurance)
                    .HasColumnType("datetime")
                    .HasColumnName("Quote_To_Insurance");

                entity.Property(e => e.ReasonForClaim)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Reason_For_Claim");

                entity.Property(e => e.RecommendRepudiation)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Recommend_Repudiation");

                entity.Property(e => e.RepairAuth)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Auth");

                entity.Property(e => e.RepairComplete)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Repair_Complete");

                entity.Property(e => e.RepairCompleteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Complete_Date");

                entity.Property(e => e.RepairFailed)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Repair_Failed");

                entity.Property(e => e.RepairOffered)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Offered");

                entity.Property(e => e.RepairReqSent)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_Req_Sent");

                entity.Property(e => e.RepairToBeCarriedout)
                    .HasColumnType("datetime")
                    .HasColumnName("Repair_To_Be_Carriedout");

                entity.Property(e => e.RepairedItemReturned)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Repaired_Item_Returned");

                entity.Property(e => e.RepairtObecarriedoutGiftware)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Giftware");

                entity.Property(e => e.RepairtObecarriedoutJewellry)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Jewellry");

                entity.Property(e => e.RepairtObecarriedoutWatch)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Repairt_Obecarriedout_Watch");

                entity.Property(e => e.ReplacedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Replaced_Date");

                entity.Property(e => e.ReplacementFloorOffered)
                    .HasColumnType("datetime")
                    .HasColumnName("Replacement_Floor_Offered");

                entity.Property(e => e.ReplacementGoodSordered)
                    .HasColumnType("datetime")
                    .HasColumnName("Replacement_Good_Sordered");

                entity.Property(e => e.SaleExVat).HasColumnName("Sale_Ex_Vat");

                entity.Property(e => e.SaleIncVat).HasColumnName("Sale_Inc_Vat");

                entity.Property(e => e.SbsHandler)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Sbs_Handler");

                entity.Property(e => e.SecondContactAttempt)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Attempt");

                entity.Property(e => e.SecondContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Letter");

                entity.Property(e => e.SecondContactSuccess)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Success");

                entity.Property(e => e.SmsEmailToPh)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Sms_Email_To_Ph");

                entity.Property(e => e.SourcingPartsForRepair)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_For_Repair");

                entity.Property(e => e.SourcingPartsForRepairJewellry)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_For_Repair_Jewellry");

                entity.Property(e => e.SourcingPartsOrMaterialForRepair)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Parts_Or_Material_For_Repair");

                entity.Property(e => e.SuccessfulLastContractPriorToGoodsOrdered)
                    .HasColumnType("datetime")
                    .HasColumnName("Successful_Last_Contract_Prior_To_Goods_Ordered");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.TeleSale)
                    .HasColumnType("datetime")
                    .HasColumnName("Tele_Sale");

                entity.Property(e => e.ThirdContactLetter)
                    .HasColumnType("datetime")
                    .HasColumnName("Third_Contact_Letter");

                entity.Property(e => e.ValidationTool)
                    .HasColumnType("datetime")
                    .HasColumnName("Validation_Tool");

                entity.Property(e => e.VariationToInstructionIc)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ic");

                entity.Property(e => e.VariationToInstructionIi)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ii");

                entity.Property(e => e.VariationToInstructionPh)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Variation_To_Instruction_Ph");

                entity.Property(e => e.VatRegistered)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Vat_Registered");

                entity.Property(e => e.VoucherIssued)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Voucher_Issued");

                entity.Property(e => e.VoucherOffered)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Voucher_Offered");

                entity.Property(e => e.WorkTel)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Work_Tel");
            });

            modelBuilder.Entity<DataDumpStripped>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataDump_Stripped", "MI");

                entity.Property(e => e.AgreedDeliveryDate).HasColumnType("date");

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.CauseOfDamage).HasMaxLength(500);

                entity.Property(e => e.ClaimAuthorityType).HasMaxLength(500);

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ClaimOutcome).HasMaxLength(50);

                entity.Property(e => e.CostOfDelivery).HasColumnType("money");

                entity.Property(e => e.DateOpened).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.EstimatedDeliveryDate).HasColumnType("date");

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredPostcode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredSurname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemOutcome).HasMaxLength(50);

                entity.Property(e => e.ItemType).HasMaxLength(500);

                entity.Property(e => e.LeadItemCommodity).HasMaxLength(500);

                entity.Property(e => e.LineItemCategory)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LossAdjusterName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Mimonth).HasColumnName("MIMonth");

                entity.Property(e => e.Miyear).HasColumnName("MIYear");

                entity.Property(e => e.OrderPlaced).HasColumnType("datetime");

                entity.Property(e => e.Peril).HasMaxLength(500);

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonForClaim).HasMaxLength(500);

                entity.Property(e => e.Rrp)
                    .HasColumnType("money")
                    .HasColumnName("RRP");

                entity.Property(e => e.SaleWithVat)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SaleWithVAT");

                entity.Property(e => e.SaleWithoutVat)
                    .HasColumnType("money")
                    .HasColumnName("SaleWithoutVAT");

                entity.Property(e => e.Sbshandler)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SBSHandler");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TelesaleAdded).HasColumnType("datetime");

                entity.Property(e => e.Vatregistered)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VATRegistered");
            });

            modelBuilder.Entity<DataProvider>(entity =>
            {
                entity.ToTable("DataProvider", "Site");

                entity.Property(e => e.BkgHex)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FrgHex)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DcBestDefinedProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DC_BestDefinedProducts", "nCompass");

                entity.Property(e => e.BestProductId).HasColumnName("BestProductID");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.Pavcount).HasColumnName("PAVCount");

                entity.Property(e => e.Type).HasMaxLength(100);
            });

            modelBuilder.Entity<DcDuplicateAv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DC_DuplicateAV", "nCompass");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AttributeName).HasMaxLength(50);

                entity.Property(e => e.MinValueId).HasColumnName("MinValueID");

                entity.Property(e => e.ValueName).HasMaxLength(50);
            });

            modelBuilder.Entity<DcDuplicatePav>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DC_DuplicatePAV", "nCompass");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.CorrectId).HasColumnName("CorrectID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<DeliveryAdvice>(entity =>
            {
                entity.ToTable("DeliveryAdvice", "Site");

                entity.Property(e => e.ClientReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.DeliveryAdvices)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryAdvice_Customer");

                entity.HasOne(d => d.DeliveryCompany)
                    .WithMany(p => p.DeliveryAdvices)
                    .HasForeignKey(d => d.DeliveryCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryAdvice_DeliveryCompany");
            });

            modelBuilder.Entity<DeliveryAdviceItem>(entity =>
            {
                entity.ToTable("DeliveryAdviceItem", "Site");

                entity.Property(e => e.BackupComments)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.BackupDate).HasColumnType("datetime");

                entity.Property(e => e.BackupRequestDate).HasColumnType("datetime");

                entity.Property(e => e.BackupRequested)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuarantineFromDate).HasColumnType("datetime");

                entity.Property(e => e.QuarantineToDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DeliveryCompany>(entity =>
            {
                entity.ToTable("DeliveryCompany", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DevADocTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Dev_a_doc_templates", "Site");

                entity.Property(e => e.FirstContact).HasColumnName("firstContact");

                entity.Property(e => e.TemplateAddress).HasColumnName("templateAddress");

                entity.Property(e => e.TemplateBottomMargin).HasColumnName("templateBottomMargin");

                entity.Property(e => e.TemplateEventId).HasColumnName("templateEventID");

                entity.Property(e => e.TemplateId).HasColumnName("templateID");

                entity.Property(e => e.TemplateLetterhead).HasColumnName("templateLetterhead");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("templateName");

                entity.Property(e => e.TemplateRecipient).HasColumnName("templateRecipient");

                entity.Property(e => e.TemplateStructure).HasColumnName("templateStructure");

                entity.Property(e => e.TemplateText)
                    .HasColumnType("ntext")
                    .HasColumnName("templateText");

                entity.Property(e => e.TriggeredActionId).HasColumnName("triggeredActionID");
            });

            modelBuilder.Entity<DevInsuranceClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DevInsuranceClaim", "Site");

                entity.Property(e => e.AccidentComments).HasMaxLength(4000);

                entity.Property(e => e.AccidentCommentsFromPh).HasColumnName("AccidentCommentsFromPH");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.Carriage).HasColumnType("money");

                entity.Property(e => e.CashSettlementAmount).HasColumnType("money");

                entity.Property(e => e.ClaimDetails)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimValue).HasColumnType("money");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CreditPhRaised).HasColumnName("Credit_Ph_Raised");

                entity.Property(e => e.CreditPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Raised_Date");

                entity.Property(e => e.CreditPhReq).HasColumnName("Credit_Ph_Req");

                entity.Property(e => e.CreditPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Req_Date");

                entity.Property(e => e.CreditPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Ph_Sage");

                entity.Property(e => e.CreditPhSync).HasColumnName("Credit_Ph_Sync");

                entity.Property(e => e.CreditPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Sync_Date");

                entity.Property(e => e.CreditPhVat).HasColumnName("Credit_Ph_VAT");

                entity.Property(e => e.CrimeNumber).HasMaxLength(30);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DateXschanged)
                    .HasColumnType("datetime")
                    .HasColumnName("DateXSChanged");

                entity.Property(e => e.DelegatedAuthorityId).HasColumnName("DelegatedAuthorityID");

                entity.Property(e => e.DeliveryAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.Fnolaccepted).HasColumnName("FNOLAccepted");

                entity.Property(e => e.FnolitemType).HasColumnName("FNOLItemType");

                entity.Property(e => e.Fnolperil).HasColumnName("FNOLPeril");

                entity.Property(e => e.FnolperilDetail).HasColumnName("FNOLPerilDetail");

                entity.Property(e => e.Handler)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.IncidentDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Title)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredCompanyName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredCountryId).HasColumnName("InsuredCountryID");

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredTitle)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InvPhRaised).HasColumnName("Inv_Ph_Raised");

                entity.Property(e => e.InvPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Raised_Date");

                entity.Property(e => e.InvPhReq).HasColumnName("Inv_Ph_Req");

                entity.Property(e => e.InvPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Req_Date");

                entity.Property(e => e.InvPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Ph_Sage");

                entity.Property(e => e.InvPhSync).HasColumnName("Inv_Ph_Sync");

                entity.Property(e => e.InvPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Sync_Date");

                entity.Property(e => e.InvPhVat).HasColumnName("Inv_Ph_VAT");

                entity.Property(e => e.InvVatPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_VAT_Ph_Sage");

                entity.Property(e => e.InvoiceCarriage).HasColumnType("money");

                entity.Property(e => e.InvoiceValue).HasColumnType("money");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.IsInsuredAcompany).HasColumnName("IsInsuredACompany");

                entity.Property(e => e.IsVatregistered).HasColumnName("IsVATRegistered");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.LastActionDate).HasColumnType("datetime");

                entity.Property(e => e.LeadItemId).HasColumnName("LeadItemID");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.Pocarriage)
                    .HasColumnType("money")
                    .HasColumnName("POCarriage");

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.PolicyHolderDateOfBirth).HasColumnType("datetime");

                entity.Property(e => e.PolicyInceptionDate).HasColumnType("datetime");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Povalue)
                    .HasColumnType("money")
                    .HasColumnName("POValue");

                entity.Property(e => e.Profit).HasColumnType("money");

                entity.Property(e => e.QuoteComments).IsUnicode(false);

                entity.Property(e => e.SingleArticleLimit).HasColumnType("money");

                entity.Property(e => e.Source).HasMaxLength(200);

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.TaskHistoryId).HasColumnName("TaskHistoryID");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VatregistrationNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("VATRegistrationNumber");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.XschangedBy)
                    .HasMaxLength(50)
                    .HasColumnName("XSChangedBy");

                entity.Property(e => e.Xspaid).HasColumnName("XSPaid");
            });

            modelBuilder.Entity<DiamondCombination>(entity =>
            {
                entity.ToTable("DiamondCombination", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratFrom).HasColumnType("decimal(3, 0)");

                entity.Property(e => e.CaratTo).HasColumnType("decimal(3, 0)");

                entity.Property(e => e.ColourId).HasColumnName("ColourID");

                entity.Property(e => e.CutId).HasColumnName("CutID");
            });

            modelBuilder.Entity<DiamondCost>(entity =>
            {
                entity.ToTable("DiamondCost", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DiamondCombinationId).HasColumnName("DiamondCombinationID");

                entity.Property(e => e.DiamondQualityId).HasColumnName("DiamondQualityID");

                entity.Property(e => e.Price).HasColumnType("money");
            });

            modelBuilder.Entity<DiamondImport>(entity =>
            {
                entity.ToTable("DiamondImport", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CertNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Cert No");

                entity.Property(e => e.Clarity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Culet)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cut)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Disc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("%Disc");

                entity.Property(e => e.Dpth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Flou)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Girdle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Lab)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Measur)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PerCrt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("$ per Crt");

                entity.Property(e => e.Pol)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RapPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Rap Price");

                entity.Property(e => e.Shape)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Stock No");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasDefaultValueSql("((17915))");

                entity.Property(e => e.Symm)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tble)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.DiamondImports)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DiamondImport_DiamondImport");
            });

            modelBuilder.Entity<DiamondQuality>(entity =>
            {
                entity.ToTable("DiamondQuality", "Jewellery");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<DispatchedOrder>(entity =>
            {
                entity.ToTable("DispatchedOrders", "Supplier");

                entity.HasIndex(e => e.Ponumber, "IXNC_DispatchedOrders_PONumber_614E1");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CourierConsignmentNumber).HasMaxLength(200);

                entity.Property(e => e.CourierContactNumber).HasMaxLength(200);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DispatchDate).HasColumnType("date");

                entity.Property(e => e.OrderDate).HasColumnType("date");

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.SupplierName).HasMaxLength(200);
            });

            modelBuilder.Entity<Dlgorder>(entity =>
            {
                entity.ToTable("DLGOrders", "Supplier");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Action)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.AddressVerificationResult)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.AmazonOrderId)
                    .HasMaxLength(50)
                    .HasColumnName("AmazonOrderID")
                    .IsFixedLength();

                entity.Property(e => e.AvsandCv2result)
                    .HasMaxLength(20)
                    .HasColumnName("AVSandCV2Result")
                    .IsFixedLength();

                entity.Property(e => e.Cv2verificationResult)
                    .HasMaxLength(20)
                    .HasColumnName("CV2VerificationResult")
                    .IsFixedLength();

                entity.Property(e => e.DeliveryAddress1)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryAddress2)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryAddress3)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryAddress4)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryAddress5)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryCompanyName)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryCountry)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryFax)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryForename)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryInstructions)
                    .HasMaxLength(250)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryMobile)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryPostcode)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.DeliverySalutation)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.DeliverySurname)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryTelephone)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.DeliveyEmailAddress)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceAddress1)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceAddress2)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceAddress3)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceAddress4)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceAddress5)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceCompanyName)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceCountry)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceEmailAddress)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceFax)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceForename)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceMobile)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.InvoicePostcode)
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceSalutation)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceSurname)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.InvoiceTelephone)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.MerchantProtectionEligibility)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderSentDateTime).HasColumnType("datetime");

                entity.Property(e => e.PayerAddressStatus)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.PayerEmail)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.PayerId)
                    .HasMaxLength(50)
                    .HasColumnName("PayerID")
                    .IsFixedLength();

                entity.Property(e => e.PayerStatus)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.PostcodeVerificationResult)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.ProductName)
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.ProductSku)
                    .HasMaxLength(50)
                    .HasColumnName("ProductSKU")
                    .IsFixedLength();

                entity.Property(e => e.RowType)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Shipping)
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.SmartLiftOrderId).HasColumnName("SmartLiftOrderID");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Vattotal).HasColumnName("VATTotal");

                entity.Property(e => e.VendorTxcode)
                    .HasMaxLength(50)
                    .HasColumnName("VendorTXCode")
                    .IsFixedLength();

                entity.Property(e => e._3dstatus)
                    .HasMaxLength(20)
                    .HasColumnName("3DStatus")
                    .IsFixedLength();

                entity.Property(e => e._3rdManResult)
                    .HasMaxLength(20)
                    .HasColumnName("3rdManResult")
                    .IsFixedLength();
            });

            modelBuilder.Entity<DocImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DocImport", "FNOL");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1000)
                    .HasColumnName("comment");

                entity.Property(e => e.EndDateTime).HasColumnType("smalldatetime");

                entity.Property(e => e.FnolImportId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FnolImportID");

                entity.Property(e => e.FnolImportSetupId).HasColumnName("FnolImportSetupID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.ProcessText).HasColumnType("ntext");

                entity.Property(e => e.SourceFile).HasMaxLength(250);

                entity.Property(e => e.StartDateTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TargetFile).HasMaxLength(250);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("userID");
            });

            modelBuilder.Entity<DocImportLossAdjuster>(entity =>
            {
                entity.ToTable("DocImportLossAdjusters", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.Key).HasMaxLength(255);

                entity.Property(e => e.Laid).HasColumnName("LAID");

                entity.Property(e => e.Laname)
                    .HasMaxLength(255)
                    .HasColumnName("LAName");

                entity.Property(e => e.Laref)
                    .HasMaxLength(50)
                    .HasColumnName("LARef");

                entity.Property(e => e.SetupId)
                    .HasColumnName("SetupID")
                    .HasDefaultValueSql("((4))");
            });

            modelBuilder.Entity<DocImportSetup>(entity =>
            {
                entity.HasKey(e => e.FnolImportSetupId)
                    .HasName("PK_FNOL.DocImportSetup");

                entity.ToTable("DocImportSetup", "FNOL");

                entity.Property(e => e.FnolImportSetupId).HasColumnName("FnolImportSetupID");

                entity.Property(e => e.ConfirmEmail).HasMaxLength(100);

                entity.Property(e => e.DefaultDocType).HasMaxLength(50);

                entity.Property(e => e.DocError).HasMaxLength(300);

                entity.Property(e => e.DocSource).HasMaxLength(300);

                entity.Property(e => e.DocTarget).HasMaxLength(300);

                entity.Property(e => e.FromEmail).HasMaxLength(100);

                entity.Property(e => e.InsuranceCompany).HasMaxLength(50);

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.LastSent).HasColumnType("datetime");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.MinimumHours).HasDefaultValueSql("((5))");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Documents", "Documents");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Document1).HasColumnName("Document");

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.MimeType)
                    .HasMaxLength(50)
                    .HasColumnName("Mime-type");

                entity.Property(e => e.Timestamp).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Documents_User");
            });

            modelBuilder.Entity<DocumentHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DocumentHistory", "Claim");

                entity.Property(e => e.Agent).HasMaxLength(50);

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InspectionId).HasColumnName("InspectionID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<DocumentLink>(entity =>
            {
                entity.HasKey(e => e.DlId);

                entity.ToTable("Document_Links", "Accounts");

                entity.Property(e => e.DlId).HasColumnName("dl_id");

                entity.Property(e => e.DlDocumentUrl)
                    .HasMaxLength(100)
                    .HasColumnName("dl_document_url")
                    .HasComment("Path and file name of doc/image/etc.");

                entity.Property(e => e.DlPemId)
                    .HasColumnName("dl_pem_id")
                    .HasComment("Link to prime entry posting");
            });

            modelBuilder.Entity<DocumentTag>(entity =>
            {
                entity.ToTable("DocumentTags", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NameTag)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocumentTemplate>(entity =>
            {
                entity.ToTable("DocumentTemplate", "Site");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BottomMargin).HasDefaultValueSql("((50))");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.RecipientId).HasColumnName("RecipientID");

                entity.Property(e => e.StructureId).HasColumnName("StructureID");

                entity.Property(e => e.Text).HasColumnType("ntext");
            });

            modelBuilder.Entity<Dpa>(entity =>
            {
                entity.ToTable("DPA", "Site");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<DpdParcelEventCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dpdParcelEventCodes", "nCompass");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LogDescription).HasMaxLength(1000);

                entity.Property(e => e.LogName).HasMaxLength(200);

                entity.Property(e => e.LogType).HasMaxLength(50);
            });

            modelBuilder.Entity<DpdeventTracking>(entity =>
            {
                entity.ToTable("DPDEventTracking", "nCompass");

                entity.HasIndex(e => new { e.LogType, e.Insuranceclaimid }, "IXNC_DPDEventTracking_LogType_insuranceclaimid_FE06D");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountNumber).HasMaxLength(50);

                entity.Property(e => e.CheckListResponse).HasMaxLength(50);

                entity.Property(e => e.ChecklistQuestionCode).HasMaxLength(50);

                entity.Property(e => e.ChecklistQuestionDescription).HasMaxLength(50);

                entity.Property(e => e.ConsignmentLine).HasMaxLength(50);

                entity.Property(e => e.ConsignmentNumber).HasMaxLength(50);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EventDate).HasMaxLength(50);

                entity.Property(e => e.EventDescription).HasMaxLength(2000);

                entity.Property(e => e.EventLocation).HasMaxLength(1000);

                entity.Property(e => e.EventTime).HasMaxLength(50);

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.LogType).HasMaxLength(50);

                entity.Property(e => e.ParcelNumber).HasMaxLength(200);

                entity.Property(e => e.SendersRef).HasMaxLength(50);
            });

            modelBuilder.Entity<DuckCreekAccount>(entity =>
            {
                entity.ToTable("DuckCreekAccount", "Validation");

                entity.Property(e => e.AccountName).HasMaxLength(255);

                entity.Property(e => e.Apiaddress).HasColumnName("APIAddress");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<DuckCreekLog>(entity =>
            {
                entity.ToTable("DuckCreekLog", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Claim).HasColumnType("ntext");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DcclaimId)
                    .HasMaxLength(50)
                    .HasColumnName("DCClaimID");

                entity.Property(e => e.DcfileNoteId)
                    .HasMaxLength(50)
                    .HasColumnName("DCFileNoteID");

                entity.Property(e => e.Instruction).HasColumnType("ntext");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");
            });

            modelBuilder.Entity<Ean>(entity =>
            {
                entity.ToTable("EAN", "Amazon");

                entity.HasIndex(e => e.Itemid, "_dta_index_EAN_16_1772585403__K3");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ean1)
                    .HasMaxLength(200)
                    .HasColumnName("EAN");

                entity.Property(e => e.Itemid).HasColumnName("itemid");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Eans)
                    .HasForeignKey(d => d.Itemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EAN_Item");
            });

            modelBuilder.Entity<EditHistory>(entity =>
            {
                entity.ToTable("EditHistory", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.FieldName).HasMaxLength(100);

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.PrimaryKey).HasMaxLength(100);

                entity.Property(e => e.PrimaryKeyId).HasColumnName("PrimaryKeyID");

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<Email>(entity =>
            {
                entity.ToTable("Email", "Claim");

                entity.HasIndex(e => new { e.Emailid, e.FromFnol }, "IXNC_Email_Emailid_FromFNOL_37ADF");

                entity.HasIndex(e => e.FromFnol, "IXNC_Email_FromFNOL_0670F");

                entity.HasIndex(e => new { e.Recived, e.Emailid, e.FromFnol }, "IXNC_Email_Recived_Emailid_FromFNOL_A6923");

                entity.HasIndex(e => new { e.FromFnol, e.InsuranceClaimId }, "_dta_index_Email_9_1329439810__K11_K8_1");

                entity.HasIndex(e => new { e.FromFnol, e.InsuranceClaimId, e.Id }, "_dta_index_Email_9_1329439810__K11_K8_K1");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.Read }, "_dta_index_Email_9_1329439810__K8_K9_1_2_3_7");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cc)
                    .HasMaxLength(200)
                    .HasColumnName("CC");

                entity.Property(e => e.Emailid)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                entity.Property(e => e.Epdq)
                    .HasColumnName("EPDQ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.From).HasMaxLength(200);

                entity.Property(e => e.FromFnol).HasColumnName("FromFNOL");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.Recived).HasColumnType("datetime");

                entity.Property(e => e.Subject).HasMaxLength(200);

                entity.Property(e => e.To).HasMaxLength(200);
            });

            modelBuilder.Entity<EmailAttachment>(entity =>
            {
                entity.ToTable("EmailAttachment", "Claim");

                entity.HasIndex(e => e.Eid, "_dta_index_EmailAttachment_9_1453964256__K6_1_3");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Eid)
                    .HasColumnName("EID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(200)
                    .HasColumnName("EmailID");

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.MimeType).HasMaxLength(200);
            });

            modelBuilder.Entity<EmailScrap>(entity =>
            {
                entity.ToTable("EmailScrap", "FNOL");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.EmailId).HasColumnName("EmailID");

                entity.Property(e => e.HomePhone).HasMaxLength(200);

                entity.Property(e => e.Mobile).HasMaxLength(200);

                entity.Property(e => e.PolicyExcess).HasMaxLength(200);

                entity.Property(e => e.PolicyHolderEmail).HasMaxLength(200);

                entity.Property(e => e.PolicyHolderName).HasMaxLength(200);

                entity.Property(e => e.PostCode).HasMaxLength(200);

                entity.Property(e => e.WorkPhone).HasMaxLength(200);
            });

            modelBuilder.Entity<EmailSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Email_Settings", "Accounts");

                entity.Property(e => e.EmsBccAccount)
                    .HasMaxLength(50)
                    .HasColumnName("ems_bcc_account");

                entity.Property(e => e.EmsCancelMessage)
                    .HasMaxLength(2000)
                    .HasColumnName("ems_cancel_message");

                entity.Property(e => e.EmsClaimWindowUrl)
                    .HasMaxLength(200)
                    .HasColumnName("ems_claim_window_url");

                entity.Property(e => e.EmsClaimsDocFolder)
                    .HasMaxLength(100)
                    .HasColumnName("ems_claims_doc_folder");

                entity.Property(e => e.EmsDocFolder)
                    .HasMaxLength(100)
                    .HasColumnName("ems_doc_folder");

                entity.Property(e => e.EmsFpBccAccountExceptions)
                    .HasMaxLength(50)
                    .HasColumnName("ems_fp_bcc_account_exceptions");

                entity.Property(e => e.EmsFpBccAccountStandard)
                    .HasMaxLength(50)
                    .HasColumnName("ems_fp_bcc_account_standard");

                entity.Property(e => e.EmsFpEmailFromAccount)
                    .HasMaxLength(50)
                    .HasColumnName("ems_fp_email_from_account");

                entity.Property(e => e.EmsFromAccountSms)
                    .HasMaxLength(50)
                    .HasColumnName("ems_from_account_sms");

                entity.Property(e => e.EmsGoodsSupplierEmail)
                    .HasMaxLength(50)
                    .HasColumnName("ems_goods_supplier_email");

                entity.Property(e => e.EmsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ems_id");

                entity.Property(e => e.EmsNewPhFollowUpSms)
                    .HasMaxLength(200)
                    .HasColumnName("ems_new_ph_follow_up_sms");

                entity.Property(e => e.EmsNewPoChaseUpMessage)
                    .HasMaxLength(2000)
                    .HasColumnName("ems_new_po_chase_up_message");

                entity.Property(e => e.EmsNewPoConfirmationMessage)
                    .HasMaxLength(2000)
                    .HasColumnName("ems_new_po_confirmation_message");

                entity.Property(e => e.EmsNewPoMessage)
                    .HasMaxLength(2000)
                    .HasColumnName("ems_new_po_message");

                entity.Property(e => e.EmsNewPoRevisedMessage)
                    .HasMaxLength(2000)
                    .HasColumnName("ems_new_po_revised_message");

                entity.Property(e => e.EmsNewPolicyholderEmailMessage)
                    .HasMaxLength(2000)
                    .HasColumnName("ems_new_policyholder_email_message");

                entity.Property(e => e.EmsNewSmsMessage)
                    .HasMaxLength(200)
                    .HasColumnName("ems_new_sms_message");

                entity.Property(e => e.EmsPoMessage)
                    .HasMaxLength(2000)
                    .HasColumnName("ems_po_message");

                entity.Property(e => e.EmsSmsRelayCo)
                    .HasMaxLength(50)
                    .HasColumnName("ems_sms_relay_co");

                entity.Property(e => e.EmsSmtpMailserver)
                    .HasMaxLength(50)
                    .HasColumnName("ems_smtp_mailserver");
            });

            modelBuilder.Entity<Error>(entity =>
            {
                entity.ToTable("Error", "Supplier");

                entity.HasIndex(e => e.Ponumber, "IXNC_Error_PONumber_3F9F8");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Error1)
                    .IsUnicode(false)
                    .HasColumnName("Error");

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            });

            modelBuilder.Entity<ErrorLog>(entity =>
            {
                entity.HasKey(e => e.ElId);

                entity.ToTable("Error_Log", "Accounts");

                entity.HasIndex(e => e.ElStoredProcedure, "IXNC_Error_Log_el_stored_procedure_B35A7");

                entity.Property(e => e.ElId).HasColumnName("el_id");

                entity.Property(e => e.ElDate)
                    .HasColumnType("datetime")
                    .HasColumnName("el_date");

                entity.Property(e => e.ElErrorMessage)
                    .HasMaxLength(200)
                    .HasColumnName("el_error_message");

                entity.Property(e => e.ElStoredProcedure)
                    .HasMaxLength(50)
                    .HasColumnName("el_stored_procedure");
            });

            modelBuilder.Entity<EsureSurveyResult>(entity =>
            {
                entity.ToTable("EsureSurveyResults", "Claim");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Complete)
                    .HasMaxLength(255)
                    .HasColumnName("complete");

                entity.Property(e => e.Custom1)
                    .HasMaxLength(255)
                    .HasColumnName("custom1");

                entity.Property(e => e.Custom2)
                    .HasMaxLength(255)
                    .HasColumnName("custom2");

                entity.Property(e => e.Custom3)
                    .HasMaxLength(255)
                    .HasColumnName("custom3");

                entity.Property(e => e.Datetime)
                    .HasMaxLength(255)
                    .HasColumnName("datetime");

                entity.Property(e => e.Device)
                    .HasMaxLength(255)
                    .HasColumnName("device");

                entity.Property(e => e.Firstname)
                    .HasMaxLength(255)
                    .HasColumnName("firstname");

                entity.Property(e => e.Group)
                    .HasMaxLength(255)
                    .HasColumnName("group");

                entity.Property(e => e.Lastname)
                    .HasMaxLength(255)
                    .HasColumnName("lastname");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .HasColumnName("number");

                entity.Property(e => e.PostCode).HasMaxLength(255);

                entity.Property(e => e.Question1).HasMaxLength(255);

                entity.Property(e => e.Question2).HasMaxLength(255);

                entity.Property(e => e.Question3).HasMaxLength(255);
            });

            modelBuilder.Entity<ExampleSla66>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Example_SLA_66", "Site");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExchangeRate>(entity =>
            {
                entity.ToTable("ExchangeRate", "Accounts");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ExchangeRate1).HasColumnName("ExchangeRate");

                entity.Property(e => e.SourceCurrency)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Exclude>(entity =>
            {
                entity.HasKey(e => e.MieId)
                    .HasName("PK_MI_Exclude");

                entity.ToTable("Exclude", "MI");

                entity.Property(e => e.MieId).HasColumnName("mie_id");

                entity.Property(e => e.MieClaimId).HasColumnName("mie_claim_id");

                entity.Property(e => e.MieReason)
                    .HasMaxLength(2000)
                    .HasColumnName("mie_reason");
            });

            modelBuilder.Entity<ExtendedFamily>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExtendedFamily", "Product");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasColumnName("name");

                entity.HasOne(d => d.Family)
                    .WithMany()
                    .HasForeignKey(d => d.FamilyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExtendedFamily_Family");
            });

            modelBuilder.Entity<ExtendedFamilyAttributeValue>(entity =>
            {
                entity.ToTable("ExtendedFamily_AttributeValue", "Product");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.ExtendedFamilyId).HasColumnName("ExtendedFamilyID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<ExternalProduct>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.ToTable("ExternalProduct", "Site");

                entity.Property(e => e.AliasProductId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.Category)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DataProviderId).HasDefaultValueSql("((1))");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateSynchronized).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastSynchronized).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType).HasDefaultValueSql("((1))");

                entity.Property(e => e.PurchaseNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((5000))");

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.SageProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((4000))");

                entity.Property(e => e.SbsproductId).HasColumnName("SBSProductId");

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.SuperceededBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededComments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededDate).HasColumnType("datetime");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AAA')");
            });

            modelBuilder.Entity<Family>(entity =>
            {
                entity.ToTable("Family", "Product");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.BrandWeighting).HasDefaultValueSql("((100))");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.FamilyName).HasMaxLength(200);

                entity.Property(e => e.LinkedFamilyId).HasColumnName("LinkedFamilyID");

                entity.Property(e => e.PgId).HasColumnName("pgID");
            });

            modelBuilder.Entity<FamilyAttribute>(entity =>
            {
                entity.ToTable("FamilyAttribute", "Product");

                entity.HasIndex(e => new { e.FamilyId, e.FilterTypeId, e.AttributeId }, "_dta_index_FamilyAttribute_16_1152723159__K2_K7_K3");

                entity.HasIndex(e => e.AttributeId, "_dta_index_FamilyAttribute_16_1152723159__K3_7_8");

                entity.HasIndex(e => new { e.FilterTypeId, e.AttributeId, e.FamilyId }, "_dta_index_FamilyAttribute_16_1152723159__K7_K3_K2");

                entity.HasIndex(e => new { e.AttributeId, e.FamilyId, e.Id }, "_dta_index_FamilyAttribute_9_1152723159__K3_K2_K1_7_8");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FilterType)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.FilterTypeId).HasColumnName("FilterTypeID");
            });

            modelBuilder.Entity<Fee>(entity =>
            {
                entity.ToTable("Fee", "Supplier");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.OldProductId).HasColumnName("OldProductID");

                entity.Property(e => e.Source).HasMaxLength(200);

                entity.Property(e => e.TypeId)
                    .HasColumnName("TypeID")
                    .HasDefaultValueSql("((5))");

                entity.HasOne(d => d.OldProduct)
                    .WithMany(p => p.Fees)
                    .HasForeignKey(d => d.OldProductId)
                    .HasConstraintName("fk_fee_oldproducts");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Fees)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fee_Fee_Type");
            });

            modelBuilder.Entity<FeeAttributeValue>(entity =>
            {
                entity.ToTable("Fee_AttributeValue", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.OperationId).HasColumnName("OperationID");

                entity.Property(e => e.Value).HasColumnType("decimal(9, 2)");
            });

            modelBuilder.Entity<FeeCategory>(entity =>
            {
                entity.ToTable("FeeCategory", "MI");

                entity.Property(e => e.FeeCategoryId).HasColumnName("FeeCategoryID");

                entity.Property(e => e.FeeCategory1)
                    .HasMaxLength(100)
                    .HasColumnName("FeeCategory");
            });

            modelBuilder.Entity<FeeCategoryProduct>(entity =>
            {
                entity.ToTable("FeeCategory_Product", "MI");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FeeCategoryId).HasColumnName("FeeCategoryID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");
            });

            modelBuilder.Entity<FeeFnolvalue>(entity =>
            {
                entity.ToTable("Fee_FNOLValue", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<FeeInsuranceCompany>(entity =>
            {
                entity.ToTable("Fee_InsuranceCompany", "Supplier");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Markup).HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Price).HasColumnType("money");
            });

            modelBuilder.Entity<FeeProductType>(entity =>
            {
                entity.ToTable("Fee_ProductType", "Supplier");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.FeeProductTypes)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fee_ProductType_Fee");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.FeeProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fee_ProductType_Value");
            });

            modelBuilder.Entity<FeeType>(entity =>
            {
                entity.ToTable("Fee_Type", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<FinanceType>(entity =>
            {
                entity.ToTable("FinanceType", "MI");

                entity.Property(e => e.FinanceTypeId).HasColumnName("FinanceTypeID");

                entity.Property(e => e.FinanceType1)
                    .HasMaxLength(50)
                    .HasColumnName("FinanceType");
            });

            modelBuilder.Entity<Findsupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("findsupplier", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId).ValueGeneratedOnAdd();

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Fitter>(entity =>
            {
                entity.HasKey(e => e.FlFitterId)
                    .HasName("Fitter_pk");

                entity.ToTable("Fitter", "Flooring");

                entity.Property(e => e.FlFitterId).HasColumnName("fl_fitter_id");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.ContactEmail).HasMaxLength(75);

                entity.Property(e => e.ContactName).HasMaxLength(30);

                entity.Property(e => e.ContactTelephone1).HasMaxLength(45);

                entity.Property(e => e.ContactTelephone2).HasMaxLength(45);

                entity.Property(e => e.Name)
                    .HasMaxLength(75)
                    .HasColumnName("name");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Fitters)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("Fitter_Supplier_SupplierId_fk");
            });

            modelBuilder.Entity<FitterPricing>(entity =>
            {
                entity.HasKey(e => e.FlFitterpricing)
                    .HasName("FitterPricing_pk");

                entity.ToTable("FitterPricing", "Flooring");

                entity.Property(e => e.FlFitterpricing).HasColumnName("fl_fitterpricing");

                entity.Property(e => e.Buyrate)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("buyrate");

                entity.Property(e => e.FitterId).HasColumnName("fitter_id");

                entity.Property(e => e.FittingcostId).HasColumnName("fittingcost_id");

                entity.Property(e => e.Sellrate)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("sellrate");

                entity.HasOne(d => d.Fitter)
                    .WithMany(p => p.FitterPricings)
                    .HasForeignKey(d => d.FitterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FitterPricing_Fitter_fl_fitter_id_fk");

                entity.HasOne(d => d.Fittingcost)
                    .WithMany(p => p.FitterPricings)
                    .HasForeignKey(d => d.FittingcostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FitterPricing_FittingCost_fl_fittingcost_id_fk");
            });

            modelBuilder.Entity<FittingCost>(entity =>
            {
                entity.HasKey(e => e.FlFittingcostId)
                    .HasName("FittingCost_pk");

                entity.ToTable("FittingCost", "Flooring");

                entity.Property(e => e.FlFittingcostId).HasColumnName("fl_fittingcost_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(75)
                    .HasColumnName("name");

                entity.Property(e => e.RrpIncVat)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("rrp_inc_vat");

                entity.Property(e => e.SbsCostPrice)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("sbs_cost_price");

                entity.Property(e => e.SpId).HasColumnName("sp_id");

                entity.Property(e => e.SupplierServiceId).HasColumnName("supplier_service_id");

                entity.Property(e => e.Unit)
                    .HasMaxLength(25)
                    .HasColumnName("unit");

                entity.HasOne(d => d.Sp)
                    .WithMany(p => p.FittingCosts)
                    .HasForeignKey(d => d.SpId)
                    .HasConstraintName("FittingCost_Product_ProductId_fk");

                entity.HasOne(d => d.SupplierService)
                    .WithMany(p => p.FittingCosts)
                    .HasForeignKey(d => d.SupplierServiceId)
                    .HasConstraintName("FittingCost_Service_Id_fk");
            });

            modelBuilder.Entity<FlagUpdate>(entity =>
            {
                entity.ToTable("Flag_Update", "MI");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DoUpdate).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Flooring>(entity =>
            {
                entity.HasKey(e => e.FlFlooringId)
                    .HasName("Flooring_pk")
                    .IsClustered(false);

                entity.ToTable("Flooring", "Flooring");

                entity.Property(e => e.FlFlooringId).HasColumnName("fl_flooring_id");

                entity.Property(e => e.Archived).HasColumnName("archived");

                entity.Property(e => e.Brand)
                    .HasMaxLength(127)
                    .HasColumnName("brand");

                entity.Property(e => e.Category).HasColumnName("category");

                entity.Property(e => e.Description)
                    .HasMaxLength(672)
                    .HasColumnName("description");

                entity.Property(e => e.Disabled).HasColumnName("disabled");

                entity.Property(e => e.DisabledOn)
                    .HasColumnType("date")
                    .HasColumnName("disabled_on");

                entity.Property(e => e.FlooringWidth1)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("flooring_width1");

                entity.Property(e => e.FlooringWidth2)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("flooring_width2 ");

                entity.Property(e => e.FlooringWidth3)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("flooring_width3");

                entity.Property(e => e.FlooringWidth4)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("flooring_width4");

                entity.Property(e => e.FlooringWidth5)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("flooring_width5");

                entity.Property(e => e.Isvoucher).HasColumnName("isvoucher");

                entity.Property(e => e.MetresPerPack)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("metres_per_pack");

                entity.Property(e => e.Name)
                    .HasMaxLength(127)
                    .HasColumnName("name");

                entity.Property(e => e.NoOfColours).HasColumnName("no_of_colours");

                entity.Property(e => e.PacksPerPallet).HasColumnName("packs_per_pallet");

                entity.Property(e => e.PileContent)
                    .HasMaxLength(255)
                    .HasColumnName("pile_content");

                entity.Property(e => e.SbsCostPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sbs_cost_price");

                entity.Property(e => e.SpId).HasColumnName("sp_id");

                entity.Property(e => e.SrpIncVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("srp_inc_vat");

                entity.Property(e => e.Suitability)
                    .HasMaxLength(127)
                    .HasColumnName("suitability");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SupplierRefNo)
                    .HasMaxLength(64)
                    .HasColumnName("supplier_ref_no");

                entity.Property(e => e.Thickness)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("thickness");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasColumnName("type");

                entity.Property(e => e.WearLayerMm)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("wear_layer_mm");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("weight");

                entity.HasOne(d => d.CategoryNavigation)
                    .WithMany(p => p.Floorings)
                    .HasForeignKey(d => d.Category)
                    .HasConstraintName("Flooring_FlooringCategory_fl_cat_id_fk");

                entity.HasOne(d => d.Sp)
                    .WithMany(p => p.Floorings)
                    .HasForeignKey(d => d.SpId)
                    .HasConstraintName("Flooring_Product_ProductId_fk");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Floorings)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("Flooring_FlooringSupplier_fl_supplier_id_fk");
            });

            modelBuilder.Entity<FlooringAiimage>(entity =>
            {
                entity.ToTable("FlooringAIImages", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentName)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.FlooringType)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlooringAndFurnitureBot>(entity =>
            {
                entity.ToTable("FlooringAndFurnitureBot", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PerilId).HasColumnName("PerilID");

                entity.Property(e => e.Question).IsUnicode(false);

                entity.Property(e => e.QuestionId).HasColumnName("QuestionID");
            });

            modelBuilder.Entity<FlooringCategory>(entity =>
            {
                entity.HasKey(e => e.FlCatId)
                    .HasName("FlooringCategory_pk");

                entity.ToTable("FlooringCategory", "Flooring");

                entity.Property(e => e.FlCatId).HasColumnName("fl_cat_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(16)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<FlooringColour>(entity =>
            {
                entity.HasKey(e => e.FlColourId)
                    .HasName("FlooringSupplierColours_pk")
                    .IsClustered(false);

                entity.ToTable("FlooringColours", "Flooring");

                entity.HasComment("Colours specific to a supplier");

                entity.HasIndex(e => e.FlColourId, "FlooringSupplierColours_fl_colour_id_uindex")
                    .IsUnique();

                entity.Property(e => e.FlColourId).HasColumnName("fl_colour_id");

                entity.Property(e => e.FlooringId).HasColumnName("flooring_id");

                entity.Property(e => e.GenericColourName)
                    .HasMaxLength(80)
                    .HasColumnName("generic_colour_name");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.HasOne(d => d.Flooring)
                    .WithMany(p => p.FlooringColours)
                    .HasForeignKey(d => d.FlooringId)
                    .HasConstraintName("FlooringSupplierColours_Flooring_fl_flooring_id_fk");
            });

            modelBuilder.Entity<FlooringSupplier>(entity =>
            {
                entity.HasKey(e => e.FlSupplierId)
                    .HasName("FlooringSupplier_pk");

                entity.ToTable("FlooringSupplier", "Flooring");

                entity.Property(e => e.FlSupplierId).HasColumnName("fl_supplier_id");

                entity.Property(e => e.CanFreetypeProducts).HasColumnName("canFreetypeProducts");

                entity.Property(e => e.Name)
                    .HasMaxLength(80)
                    .HasColumnName("name");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.VoucherOnlySupplier).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.FlooringSuppliers)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FlooringSupplier_Supplier_SupplierId_fk");
            });

            modelBuilder.Entity<Fnolsource>(entity =>
            {
                entity.ToTable("FNOLSource", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Frmonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FRMonthly", "MI");

                entity.Property(e => e.M1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m1")
                    .IsFixedLength();

                entity.Property(e => e.M10)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m10")
                    .IsFixedLength();

                entity.Property(e => e.M11)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m11")
                    .IsFixedLength();

                entity.Property(e => e.M12)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m12")
                    .IsFixedLength();

                entity.Property(e => e.M2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m2")
                    .IsFixedLength();

                entity.Property(e => e.M3)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m3")
                    .IsFixedLength();

                entity.Property(e => e.M4)
                    .HasMaxLength(50)
                    .HasColumnName("m4");

                entity.Property(e => e.M5)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m5")
                    .IsFixedLength();

                entity.Property(e => e.M6)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m6")
                    .IsFixedLength();

                entity.Property(e => e.M7)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m7")
                    .IsFixedLength();

                entity.Property(e => e.M8)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m8")
                    .IsFixedLength();

                entity.Property(e => e.M9)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m9")
                    .IsFixedLength();
            });

            modelBuilder.Entity<GemCaratMapping>(entity =>
            {
                entity.ToTable("GemCaratMapping", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.HasOne(d => d.GemCarat)
                    .WithMany(p => p.GemCaratMappingGemCarats)
                    .HasForeignKey(d => d.GemCaratId)
                    .HasConstraintName("FK_GemCaratMapping_GemCaratMapping");

                entity.HasOne(d => d.GemCut)
                    .WithMany(p => p.GemCaratMappingGemCuts)
                    .HasForeignKey(d => d.GemCutId)
                    .HasConstraintName("FK_GemCaratMapping_CutValue");

                entity.HasOne(d => d.GemDimensions)
                    .WithMany(p => p.GemCaratMappingGemDimensions)
                    .HasForeignKey(d => d.GemDimensionsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GemCaratMapping_DimensionValue");

                entity.HasOne(d => d.GemType)
                    .WithMany(p => p.GemCaratMappingGemTypes)
                    .HasForeignKey(d => d.GemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GemCaratMapping_TypeValue");
            });

            modelBuilder.Entity<GemCaratMappingBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GemCaratMapping_Backup", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<GemClarity>(entity =>
            {
                entity.ToTable("GemClarity", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClarityId).HasColumnName("ClarityID");

                entity.Property(e => e.GemId).HasColumnName("GemID");

                entity.HasOne(d => d.Clarity)
                    .WithMany(p => p.GemClarityClarities)
                    .HasForeignKey(d => d.ClarityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GemClarity_Value1");

                entity.HasOne(d => d.Gem)
                    .WithMany(p => p.GemClarityGems)
                    .HasForeignKey(d => d.GemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GemClarity_Value");
            });

            modelBuilder.Entity<GemCost>(entity =>
            {
                entity.ToTable("GemCost", "Jewellery");

                entity.HasIndex(e => e.FnolvalueId, "IXNC_GemCost_FNOLvalueID_8E89A");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClarityId).HasColumnName("ClarityID");

                entity.Property(e => e.ColourId).HasColumnName("ColourID");

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLvalueID");

                entity.Property(e => e.LowerBound).HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ShapeId).HasColumnName("ShapeID");

                entity.Property(e => e.UpperBound).HasColumnType("decimal(6, 3)");
            });

            modelBuilder.Entity<GemMargin>(entity =>
            {
                entity.ToTable("GemMargin", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.GemId).HasColumnName("GemID");

                entity.Property(e => e.QualityId).HasColumnName("QualityID");

                entity.Property(e => e.ShapeId).HasColumnName("ShapeID");
            });

            modelBuilder.Entity<GemValMapping>(entity =>
            {
                entity.ToTable("GemValMapping", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.GemValId).HasColumnName("GemValID");

                entity.Property(e => e.SpecificGravity)
                    .HasColumnType("decimal(18, 0)")
                    .HasDefaultValueSql("((4))");

                entity.HasOne(d => d.Fnolvalue)
                    .WithMany(p => p.GemValMappings)
                    .HasForeignKey(d => d.FnolvalueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GemValMapping_Value");
            });

            modelBuilder.Entity<GenBetter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_better", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenCarriage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_carriage", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_credit", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenExcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_excess", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenInspect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_inspect", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenRepair>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_Repair", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenReplace>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_Replace", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Replaceitems).HasColumnName("replaceitems");

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenReplaceTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_Replace_test", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Replaceitems).HasColumnName("replaceitems");

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenSageTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEN_sage_total", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenaccBetter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENACC_better", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenaccCarriage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENACC_carriage", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenaccCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENACC_credit", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenaccExcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENACC_excess", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenaccInspect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENACC_inspect", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenaccRepair>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENACC_Repair", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenaccReplace>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENACC_Replace", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Replaceitems).HasColumnName("replaceitems");

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenaccSageTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENACC_sage_total", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenfixBetter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENFIX_better", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenfixCarriage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENFIX_carriage", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenfixCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENFIX_credit", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenfixExcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENFIX_excess", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenfixInspect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENFIX_inspect", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenfixRepair>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENFIX_repair", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenfixReplace>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENFIX_replace", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Replaceitems).HasColumnName("replaceitems");

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GenfixSagetotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GENFIX_sagetotal", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.Thisval).HasColumnName("thisval");
            });

            modelBuilder.Entity<GoodWord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GoodWords", "Claim");

                entity.Property(e => e.GoodWord1)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("GoodWord");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<GpDetail>(entity =>
            {
                entity.HasKey(e => e.GpdId)
                    .HasName("PK_GP_Detaill");

                entity.ToTable("GP_Detail", "Accounts");

                entity.Property(e => e.GpdId).HasColumnName("gpd_id");

                entity.Property(e => e.GpdClaimId).HasColumnName("gpd_claimID");

                entity.Property(e => e.GpdDate)
                    .HasColumnType("date")
                    .HasColumnName("gpd_date");

                entity.Property(e => e.GpdNet)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gpd_net");

                entity.Property(e => e.GpdOriginalDate)
                    .HasColumnType("date")
                    .HasColumnName("gpd_originalDate");

                entity.Property(e => e.GpdRef)
                    .HasMaxLength(50)
                    .HasColumnName("gpd_ref");

                entity.Property(e => e.GpdSourceCode).HasColumnName("gpd_sourceCode");

                entity.Property(e => e.GpdSourceName)
                    .HasMaxLength(150)
                    .HasColumnName("gpd_sourceName");
            });

            modelBuilder.Entity<GpDetailNew>(entity =>
            {
                entity.HasKey(e => e.GpdId);

                entity.ToTable("GP_Detail_New", "Accounts");

                entity.HasIndex(e => new { e.GpdClaimId, e.GpdSourceCode }, "IXNC_GP_Detail_New_gpd_claimID_gpd_sourceCode_39BCE");

                entity.HasIndex(e => new { e.GpdClaimId, e.GpdSourceCode }, "IXNC_GP_Detail_New_gpd_claimID_gpd_sourceCode_B4EC8");

                entity.HasIndex(e => new { e.GpdDate, e.GpdMiProfitDate }, "IXNC_GP_Detail_New_gpd_date_gpd_MI_Profit_Date_C8620");

                entity.HasIndex(e => e.GpdOriginalDate, "IXNC_GP_Detail_New_gpd_originalDate_76DB7");

                entity.HasIndex(e => e.GpdOriginalDate, "_dta_index_GP_Detail_New_16_1319011780__K3_4_8");

                entity.Property(e => e.GpdId).HasColumnName("gpd_id");

                entity.Property(e => e.GpdClaimId).HasColumnName("gpd_claimID");

                entity.Property(e => e.GpdDate)
                    .HasColumnType("date")
                    .HasColumnName("gpd_date");

                entity.Property(e => e.GpdMiProfitDate)
                    .HasColumnType("date")
                    .HasColumnName("gpd_MI_Profit_Date");

                entity.Property(e => e.GpdNet)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gpd_net");

                entity.Property(e => e.GpdOriginalDate)
                    .HasColumnType("date")
                    .HasColumnName("gpd_originalDate");

                entity.Property(e => e.GpdRef)
                    .HasMaxLength(50)
                    .HasColumnName("gpd_ref");

                entity.Property(e => e.GpdSourceCode).HasColumnName("gpd_sourceCode");

                entity.Property(e => e.GpdSourceName)
                    .HasMaxLength(150)
                    .HasColumnName("gpd_sourceName");
            });

            modelBuilder.Entity<GpDetailOld>(entity =>
            {
                entity.HasKey(e => e.GpdId)
                    .HasName("PK_GP_Detail");

                entity.ToTable("GP_Detail_Old", "Accounts");

                entity.HasIndex(e => e.GpdClaimId, "IXNC_GP_Detail_gpd_claimID_C81B1");

                entity.HasIndex(e => new { e.GpdRef, e.GpdSourceCode }, "IXNC_GP_Detail_gpd_ref_gpd_sourceCode_3D128");

                entity.HasIndex(e => new { e.GpdRef, e.GpdSourceCode }, "IXNC_GP_Detail_gpd_ref_gpd_sourceCode_48469");

                entity.Property(e => e.GpdId).HasColumnName("gpd_id");

                entity.Property(e => e.GpdClaimId).HasColumnName("gpd_claimID");

                entity.Property(e => e.GpdDate)
                    .HasColumnType("date")
                    .HasColumnName("gpd_date");

                entity.Property(e => e.GpdNet)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gpd_net");

                entity.Property(e => e.GpdOriginalDate)
                    .HasColumnType("date")
                    .HasColumnName("gpd_originalDate");

                entity.Property(e => e.GpdRef)
                    .HasMaxLength(50)
                    .HasColumnName("gpd_ref");

                entity.Property(e => e.GpdSourceCode).HasColumnName("gpd_sourceCode");

                entity.Property(e => e.GpdSourceName)
                    .HasMaxLength(150)
                    .HasColumnName("gpd_sourceName");

                entity.HasOne(d => d.GpdClaim)
                    .WithMany(p => p.GpDetailOlds)
                    .HasForeignKey(d => d.GpdClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GP_Detail_InsuranceClaim");
            });

            modelBuilder.Entity<GrossNonItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrossNonItems", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Desc");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.ToTable("Group", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.TeamleaderId).HasColumnName("TeamleaderID");

                entity.HasOne(d => d.Teamleader)
                    .WithMany(p => p.Groups)
                    .HasForeignKey(d => d.TeamleaderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Group_User");
            });

            modelBuilder.Entity<HealthCheckSalesLedger>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HealthCheckSalesLedger");

                entity.Property(e => e.OsCredits)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("os_credits");

                entity.Property(e => e.OsDebits)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("os_debits");

                entity.Property(e => e.PdCredits)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("pd_credits");

                entity.Property(e => e.PdDebits)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("pd_debits");

                entity.Property(e => e.PemGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pem_gross");

                entity.Property(e => e.PemId).HasColumnName("pem_id");
            });

            modelBuilder.Entity<HealthCheckSupplierDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HealthCheckSupplierData");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");
            });

            modelBuilder.Entity<HeathCheckPurchaseLedger>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HeathCheckPurchaseLedger");

                entity.Property(e => e.OsCredits)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("os_credits");

                entity.Property(e => e.OsDebits)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("os_debits");

                entity.Property(e => e.PdCredits)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("pd_credits");

                entity.Property(e => e.PdDebits)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("pd_debits");

                entity.Property(e => e.PemGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pem_gross");

                entity.Property(e => e.PemId).HasColumnName("pem_id");
            });

            modelBuilder.Entity<HeathLambertCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HeathLambertCheck", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.LcshistoryId).HasColumnName("LCSHistoryID");
            });

            modelBuilder.Entity<Heatlambertchnage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Heatlambertchnages", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MI_Id");
            });

            modelBuilder.Entity<HistoricalGemCost>(entity =>
            {
                entity.ToTable("HistoricalGemCost", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.GemId).HasColumnName("GemID");

                entity.Property(e => e.Price).HasColumnType("money");
            });

            modelBuilder.Entity<HistoricalMetalCost>(entity =>
            {
                entity.ToTable("HistoricalMetalCost", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MetalId).HasColumnName("MetalID");

                entity.Property(e => e.PricePerGram).HasColumnType("money");
            });

            modelBuilder.Entity<History>(entity =>
            {
                entity.ToTable("History", "phoneapp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.HistoryType).HasMaxLength(200);

                entity.Property(e => e.ValidationUserId).HasColumnName("ValidationUserID");
            });

            modelBuilder.Entity<History1>(entity =>
            {
                entity.ToTable("History", "Validation");

                entity.HasIndex(e => e.ClaimItemId, "IXNC_History_ClaimItemID_88332");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Price)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Supplier).HasMaxLength(50);

                entity.Property(e => e.Total)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Vat)
                    .HasMaxLength(20)
                    .HasColumnName("VAT")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Holiday>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Holidays", "MI");

                entity.Property(e => e.HolidayDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Holiday1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Holidays", "Site");

                entity.Property(e => e.HolidayDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<IEventType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("i_event_types", "MI");

                entity.Property(e => e.IEventTypeCustomEvent).HasColumnName("i_event_type_customEvent");

                entity.Property(e => e.IEventTypeId).HasColumnName("i_event_type_id");

                entity.Property(e => e.IEventTypeName)
                    .HasMaxLength(150)
                    .HasColumnName("i_event_type_name");

                entity.Property(e => e.IEventTypeOtlu).HasColumnName("i_event_type_otlu");
            });

            modelBuilder.Entity<IEventType1>(entity =>
            {
                entity.HasKey(e => e.IEventTypeId);

                entity.ToTable("i_event_types", "Site");

                entity.Property(e => e.IEventTypeId).HasColumnName("i_event_type_id");

                entity.Property(e => e.IEventTypeCustomEvent).HasColumnName("i_event_type_customEvent");

                entity.Property(e => e.IEventTypeName)
                    .HasMaxLength(150)
                    .HasColumnName("i_event_type_name");

                entity.Property(e => e.IEventTypeOtlu).HasColumnName("i_event_type_otlu");
            });

            modelBuilder.Entity<IInspectOutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("I_InspectOutcomes", "MI");

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("bmonth")
                    .IsFixedLength();

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.SInspCo).HasColumnName("s_insp_co");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspSupplierId).HasColumnName("s_insp_supplier_id");

                entity.Property(e => e.SInspUserId).HasColumnName("s_insp_user_id");

                entity.Property(e => e.SOutcomeId).HasColumnName("s_outcome_id");
            });

            modelBuilder.Entity<IInspection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("I_Inspection", "MI");

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("bmonth")
                    .IsFixedLength();

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");
            });

            modelBuilder.Entity<IStatusSlHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("i_status_sl_history", "MI");

                entity.Property(e => e.IStatusSlHistClaimId).HasColumnName("i_status_sl_hist_claim_id");

                entity.Property(e => e.IStatusSlHistDate)
                    .HasColumnType("datetime")
                    .HasColumnName("i_status_sl_hist_date");

                entity.Property(e => e.IStatusSlHistId).HasColumnName("i_status_sl_hist_id");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.IStatusSlHistUserId).HasColumnName("i_status_sl_hist_user_id");
            });

            modelBuilder.Entity<IStatusSlHistory1>(entity =>
            {
                entity.HasKey(e => e.IStatusSlHistId);

                entity.ToTable("i_status_sl_history", "Site");

                entity.Property(e => e.IStatusSlHistId).HasColumnName("i_status_sl_hist_id");

                entity.Property(e => e.IStatusSlHistClaimId).HasColumnName("i_status_sl_hist_claim_id");

                entity.Property(e => e.IStatusSlHistDate)
                    .HasColumnType("datetime")
                    .HasColumnName("i_status_sl_hist_date");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.IStatusSlHistUserId).HasColumnName("i_status_sl_hist_user_id");
            });

            modelBuilder.Entity<IStatusSlNextAction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("i_status_sl_next_action", "MI");

                entity.Property(e => e.IStatusSlAssociatedPath).HasColumnName("i_status_sl_associated_path");

                entity.Property(e => e.IStatusSlInstructiontype)
                    .HasMaxLength(150)
                    .HasColumnName("i_status_sl_instructiontype");

                entity.Property(e => e.IStatusSlLevel).HasColumnName("i_status_sl_level");

                entity.Property(e => e.IStatusSlNaId).HasColumnName("i_status_sl_na_id");

                entity.Property(e => e.IStatusSlNextaction1)
                    .HasMaxLength(150)
                    .HasColumnName("i_status_sl_nextaction");
            });

            modelBuilder.Entity<IStatusSlNextAction1>(entity =>
            {
                entity.HasKey(e => e.IStatusSlNaId)
                    .HasName("PK_I_status_sl_next_action");

                entity.ToTable("i_status_sl_next_action", "Site");

                entity.Property(e => e.IStatusSlNaId).HasColumnName("i_status_sl_na_id");

                entity.Property(e => e.IStatusSlAssociatedPath).HasColumnName("i_status_sl_associated_path");

                entity.Property(e => e.IStatusSlInstructiontype)
                    .HasMaxLength(150)
                    .HasColumnName("i_status_sl_instructiontype");

                entity.Property(e => e.IStatusSlLevel).HasColumnName("i_status_sl_level");

                entity.Property(e => e.IStatusSlNextaction)
                    .HasMaxLength(150)
                    .HasColumnName("i_status_sl_nextaction");

                entity.HasOne(d => d.IStatusSlAssociatedPathNavigation)
                    .WithMany(p => p.IStatusSlNextAction1s)
                    .HasForeignKey(d => d.IStatusSlAssociatedPath)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_i_status_sl_next_action_i_status_sl_paths");

                entity.HasOne(d => d.IStatusSlLevelNavigation)
                    .WithMany(p => p.IStatusSlNextAction1s)
                    .HasForeignKey(d => d.IStatusSlLevel)
                    .HasConstraintName("FK_i_status_sl_next_action_i_status_sl_types");
            });

            modelBuilder.Entity<IStatusSlPath>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("i_status_sl_paths", "MI");

                entity.Property(e => e.IStatusPathEnd).HasColumnName("i_status_path_end");

                entity.Property(e => e.IStatusPathEventType).HasColumnName("i_status_path_event_type");

                entity.Property(e => e.IStatusPathId).HasColumnName("i_status_path_id");

                entity.Property(e => e.IStatusPathStart).HasColumnName("i_status_path_start");
            });

            modelBuilder.Entity<IStatusSlPath1>(entity =>
            {
                entity.HasKey(e => e.IStatusPathId)
                    .HasName("PK_i_status_paths");

                entity.ToTable("i_status_sl_paths", "Site");

                entity.Property(e => e.IStatusPathId).HasColumnName("i_status_path_id");

                entity.Property(e => e.IStatusPathEnd).HasColumnName("i_status_path_end");

                entity.Property(e => e.IStatusPathEventType).HasColumnName("i_status_path_event_type");

                entity.Property(e => e.IStatusPathStart).HasColumnName("i_status_path_start");

                entity.HasOne(d => d.IStatusPathEndNavigation)
                    .WithMany(p => p.IStatusSlPath1IStatusPathEndNavigations)
                    .HasForeignKey(d => d.IStatusPathEnd)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_i_status_sl_paths_i_status_sl_types1");

                entity.HasOne(d => d.IStatusPathEventTypeNavigation)
                    .WithMany(p => p.IStatusSlPath1s)
                    .HasForeignKey(d => d.IStatusPathEventType)
                    .HasConstraintName("FK_i_status_sl_paths_i_event_types");

                entity.HasOne(d => d.IStatusPathStartNavigation)
                    .WithMany(p => p.IStatusSlPath1IStatusPathStartNavigations)
                    .HasForeignKey(d => d.IStatusPathStart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_i_status_sl_paths_i_status_sl_types");
            });

            modelBuilder.Entity<IStatusSlType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("i_status_sl_types", "MI");

                entity.Property(e => e.ISSlMiClosed).HasColumnName("i_s_sl_mi_closed");

                entity.Property(e => e.ISSlTypeCloses).HasColumnName("i_s_sl_type_closes");

                entity.Property(e => e.ISSlTypeId).HasColumnName("i_s_sl_type_id");

                entity.Property(e => e.ISSlTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("i_s_sl_type_name");

                entity.Property(e => e.ISSlTypeTime).HasColumnName("i_s_sl_type_time");

                entity.Property(e => e.ISSlTypeTl).HasColumnName("i_s_sl_type_tl");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");
            });

            modelBuilder.Entity<IStatusSlType1>(entity =>
            {
                entity.HasKey(e => e.ISSlTypeId)
                    .HasName("PK_i_status_types");

                entity.ToTable("i_status_sl_types", "Site");

                entity.Property(e => e.ISSlTypeId).HasColumnName("i_s_sl_type_id");

                entity.Property(e => e.ISSlMiClosed).HasColumnName("i_s_sl_mi_closed");

                entity.Property(e => e.ISSlTypeCloses).HasColumnName("i_s_sl_type_closes");

                entity.Property(e => e.ISSlTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("i_s_sl_type_name");

                entity.Property(e => e.ISSlTypeTime)
                    .HasColumnName("i_s_sl_type_time")
                    .HasDefaultValueSql("((1000))");

                entity.Property(e => e.ISSlTypeTl).HasColumnName("i_s_sl_type_tl");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");
            });

            modelBuilder.Entity<ImportSetting>(entity =>
            {
                entity.ToTable("ImportSettings", "FNOL");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddressRegion).HasMaxLength(200);

                entity.Property(e => e.DescriptionRegion).HasMaxLength(200);

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.HomePhoneRegion).HasMaxLength(200);

                entity.Property(e => e.InstructionTextRegion).HasMaxLength(200);

                entity.Property(e => e.Insurer).HasMaxLength(200);

                entity.Property(e => e.LarefRegion)
                    .HasMaxLength(200)
                    .HasColumnName("LARefRegion");

                entity.Property(e => e.MobileRegion).HasMaxLength(200);

                entity.Property(e => e.PolicyExcessRegion).HasMaxLength(200);

                entity.Property(e => e.PolicyHolderEmailRegion).HasMaxLength(200);

                entity.Property(e => e.PolicyHolderNameRegion).HasMaxLength(200);

                entity.Property(e => e.PolicyNumberRegion).HasMaxLength(200);

                entity.Property(e => e.PostCodeRegion).HasMaxLength(200);

                entity.Property(e => e.WorkPhoneRegion).HasMaxLength(200);
            });

            modelBuilder.Entity<ImportSuppProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ImportSuppProducts", "nCompass");

                entity.Property(e => e.Description).HasMaxLength(3000);

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .HasColumnName("EAN");

                entity.Property(e => e.Manufacturer).HasMaxLength(255);

                entity.Property(e => e.Mpncode)
                    .HasMaxLength(255)
                    .HasColumnName("MPNCode");

                entity.Property(e => e.Price).HasMaxLength(255);

                entity.Property(e => e.RetailPrice).HasMaxLength(255);

                entity.Property(e => e.Stock).HasMaxLength(255);

                entity.Property(e => e.Supplier).HasMaxLength(255);

                entity.Property(e => e.SupplierReference).HasMaxLength(255);

                entity.Property(e => e.Url)
                    .HasMaxLength(255)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<InflationRate>(entity =>
            {
                entity.ToTable("InflationRate", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cpivalue)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("CPIValue");
            });

            modelBuilder.Entity<Inspection>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Inspections", "MI");

                entity.Property(e => e.Closex).HasColumnName("closex");

                entity.Property(e => e.Consignment).HasMaxLength(50);

                entity.Property(e => e.FaultType)
                    .HasMaxLength(50)
                    .HasColumnName("Fault_type");

                entity.Property(e => e.FaultTypeId).HasColumnName("Fault_Type_id");

                entity.Property(e => e.InspCo)
                    .HasMaxLength(50)
                    .HasColumnName("Insp_Co");

                entity.Property(e => e.InspCoId).HasColumnName("Insp_co_id");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Openx).HasColumnName("openx");

                entity.Property(e => e.Outcome).HasMaxLength(50);

                entity.Property(e => e.OutcomeId).HasColumnName("Outcome_id");

                entity.Property(e => e.Updated).HasColumnName("updated");
            });

            modelBuilder.Entity<InspectionHistory>(entity =>
            {
                entity.ToTable("InspectionHistory", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InspectionImage>(entity =>
            {
                entity.ToTable("InspectionImage", "Inspection");

                entity.HasIndex(e => e.InspectionId, "IXNC_InspectionImage_InspectionID_BC945");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InspectionId).HasColumnName("InspectionID");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.InspectionImages)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspectionImage_ItemInspection");
            });

            modelBuilder.Entity<InspectionStatus>(entity =>
            {
                entity.ToTable("InspectionStatus", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InspectionType>(entity =>
            {
                entity.ToTable("InspectionType", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Inspections20140406Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Inspections_20140406_err", "MI");

                entity.Property(e => e.Closex).HasColumnName("closex");

                entity.Property(e => e.Consignment).HasMaxLength(50);

                entity.Property(e => e.FaultType)
                    .HasMaxLength(50)
                    .HasColumnName("Fault_type");

                entity.Property(e => e.FaultTypeId).HasColumnName("Fault_Type_id");

                entity.Property(e => e.InspCo)
                    .HasMaxLength(50)
                    .HasColumnName("Insp_Co");

                entity.Property(e => e.InspCoId).HasColumnName("Insp_co_id");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Openx).HasColumnName("openx");

                entity.Property(e => e.Outcome).HasMaxLength(50);

                entity.Property(e => e.OutcomeId).HasColumnName("Outcome_id");

                entity.Property(e => e.Updated).HasColumnName("updated");
            });

            modelBuilder.Entity<Inspections20140510Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Inspections_20140510_err", "MI");

                entity.Property(e => e.Closex).HasColumnName("closex");

                entity.Property(e => e.Consignment).HasMaxLength(50);

                entity.Property(e => e.FaultType)
                    .HasMaxLength(50)
                    .HasColumnName("Fault_type");

                entity.Property(e => e.FaultTypeId).HasColumnName("Fault_Type_id");

                entity.Property(e => e.InspCo)
                    .HasMaxLength(50)
                    .HasColumnName("Insp_Co");

                entity.Property(e => e.InspCoId).HasColumnName("Insp_co_id");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Openx).HasColumnName("openx");

                entity.Property(e => e.Outcome).HasMaxLength(50);

                entity.Property(e => e.OutcomeId).HasColumnName("Outcome_id");

                entity.Property(e => e.Updated).HasColumnName("updated");
            });

            modelBuilder.Entity<Inspections20141702>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Inspections_20141702", "MI");

                entity.Property(e => e.Closex).HasColumnName("closex");

                entity.Property(e => e.Consignment).HasMaxLength(50);

                entity.Property(e => e.FaultType)
                    .HasMaxLength(50)
                    .HasColumnName("Fault_type");

                entity.Property(e => e.FaultTypeId).HasColumnName("Fault_Type_id");

                entity.Property(e => e.InspCo)
                    .HasMaxLength(50)
                    .HasColumnName("Insp_Co");

                entity.Property(e => e.InspCoId).HasColumnName("Insp_co_id");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Openx).HasColumnName("openx");

                entity.Property(e => e.Outcome).HasMaxLength(50);

                entity.Property(e => e.OutcomeId).HasColumnName("Outcome_id");

                entity.Property(e => e.Updated).HasColumnName("updated");
            });

            modelBuilder.Entity<InspectionsPdh>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Inspections_pdh", "MI");

                entity.Property(e => e.Closex).HasColumnName("closex");

                entity.Property(e => e.Consignment).HasMaxLength(50);

                entity.Property(e => e.FaultType)
                    .HasMaxLength(50)
                    .HasColumnName("Fault_type");

                entity.Property(e => e.FaultTypeId).HasColumnName("Fault_Type_id");

                entity.Property(e => e.InspCo)
                    .HasMaxLength(50)
                    .HasColumnName("Insp_Co");

                entity.Property(e => e.InspCoId).HasColumnName("Insp_co_id");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Openx).HasColumnName("openx");

                entity.Property(e => e.Outcome).HasMaxLength(50);

                entity.Property(e => e.OutcomeId).HasColumnName("Outcome_id");

                entity.Property(e => e.Updated).HasColumnName("updated");
            });

            modelBuilder.Entity<InspectionsTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Inspections_Temp", "MI");

                entity.Property(e => e.Closex).HasColumnName("closex");

                entity.Property(e => e.Consignment).HasMaxLength(50);

                entity.Property(e => e.FaultType)
                    .HasMaxLength(50)
                    .HasColumnName("Fault_type");

                entity.Property(e => e.FaultTypeId).HasColumnName("Fault_Type_id");

                entity.Property(e => e.InspCo)
                    .HasMaxLength(50)
                    .HasColumnName("Insp_Co");

                entity.Property(e => e.InspCoId).HasColumnName("Insp_co_id");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Openx).HasColumnName("openx");

                entity.Property(e => e.Outcome).HasMaxLength(50);

                entity.Property(e => e.OutcomeId).HasColumnName("Outcome_id");

                entity.Property(e => e.Updated).HasColumnName("updated");
            });

            modelBuilder.Entity<Instruction>(entity =>
            {
                entity.HasKey(e => e.SbsRef);

                entity.ToTable("Instructions", "Site");

                entity.HasIndex(e => e.Deleted, "IXNC_Instructions_Deleted_DA85A");

                entity.HasIndex(e => e.LossAdjuster, "IXNC_Instructions_Loss_Adjuster_E1274");

                entity.Property(e => e.SbsRef).HasColumnName("SBS_REF");

                entity.Property(e => e.AddedBy)
                    .HasColumnName("Added_By")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AddedByName)
                    .HasMaxLength(50)
                    .HasColumnName("Added_By_Name");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.Address4).HasMaxLength(50);

                entity.Property(e => e.Arrived).HasColumnType("smalldatetime");

                entity.Property(e => e.CauseTypeId).HasColumnName("CauseTypeID");

                entity.Property(e => e.ClaimHandler).HasMaxLength(50);

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.DamageDetails).HasColumnType("ntext");

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelivAddress1).HasMaxLength(50);

                entity.Property(e => e.DelivAddress2).HasMaxLength(50);

                entity.Property(e => e.DelivAddress3).HasMaxLength(50);

                entity.Property(e => e.DelivAddress4).HasMaxLength(50);

                entity.Property(e => e.DelivPostCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Excess).HasColumnType("money");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FirstName2).HasMaxLength(50);

                entity.Property(e => e.HomeTel).HasMaxLength(50);

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.LastName2).HasMaxLength(50);

                entity.Property(e => e.LossAdjuster).HasColumnName("Loss_Adjuster");

                entity.Property(e => e.Method).HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.MonthIns).HasMaxLength(10);

                entity.Property(e => e.PickedUp)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Picked_Up");

                entity.Property(e => e.PolicyNumber).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.RefName)
                    .HasMaxLength(50)
                    .HasColumnName("REF_Name");

                entity.Property(e => e.RefNo)
                    .HasMaxLength(50)
                    .HasColumnName("REF_No");

                entity.Property(e => e.SalesPerson)
                    .HasColumnName("Sales_Person")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SingleArticleLimitAmount).HasColumnType("money");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("SubCauseTypeID");

                entity.Property(e => e.Title).HasMaxLength(20);

                entity.Property(e => e.Title2).HasMaxLength(50);

                entity.Property(e => e.Type).HasComment("For now, 0 -> Insurance claim instruction, 1 -> Warranty claim instruction");

                entity.Property(e => e.VatregNo)
                    .HasMaxLength(50)
                    .HasColumnName("VATRegNo");

                entity.Property(e => e.WorkTel).HasMaxLength(50);
            });

            modelBuilder.Entity<InstructionItem>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_FNOL.InstructionItem");

                entity.ToTable("InstructionItem", "FNOL");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.ItemPropertyIds)
                    .HasMaxLength(200)
                    .HasColumnName("ItemPropertyIDs");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.Source).HasMaxLength(50);

                entity.Property(e => e.UnconfirmedInstructionId).HasColumnName("UnconfirmedInstructionID");
            });

            modelBuilder.Entity<InstructionItem1>(entity =>
            {
                entity.HasKey(e => e.InstructionItemId);

                entity.ToTable("InstructionItem", "Site");

                entity.Property(e => e.InstructionItemId).HasColumnName("InstructionItemID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.ItemDescription).HasMaxLength(200);

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");
            });

            modelBuilder.Entity<InstructionItemValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("InstructionItem_Values", "FNOL");

                entity.Property(e => e.InstructionItemId).HasColumnName("InstructionItemID");

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<InsuranceClaim>(entity =>
            {
                entity.ToTable("InsuranceClaim", "MI");

                entity.HasComment("A table of all insurance claims");

                entity.Property(e => e.InsuranceClaimId)
                    .ValueGeneratedNever()
                    .HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ClaimDetails).HasColumnType("ntext");

                entity.Property(e => e.ClaimantId).HasColumnName("ClaimantID");

                entity.Property(e => e.DateClosed).HasColumnType("datetime");

                entity.Property(e => e.DateContacted).HasColumnType("datetime");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.FnolinstructionId).HasColumnName("FNOLInstructionID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.LossAdjusterHandler).HasMaxLength(50);

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.LossAdjusterRef).HasMaxLength(50);

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.PolicyNumber).HasMaxLength(50);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Claims')");
            });

            modelBuilder.Entity<InsuranceClaim1>(entity =>
            {
                entity.HasKey(e => e.InsuranceClaimId);

                entity.ToTable("InsuranceClaim", "Site");

                entity.HasIndex(e => new { e.Closed, e.ClosedDate }, "<Name of Missing Index, sysname,>");

                entity.HasIndex(e => e.Closed, "INDEX_InsuranceClaims_Closed");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_0108B");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_18067");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_72D82");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_AE31B");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_AF9E6");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_B83C1");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_E0452");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_EC5BC");

                entity.HasIndex(e => e.ActionId, "IXNC_InsuranceClaim_ActionID_F3311");

                entity.HasIndex(e => e.ClosedDate, "IXNC_InsuranceClaim_ClosedDate_E078F");

                entity.HasIndex(e => e.Closed, "IXNC_InsuranceClaim_Closed_2AE0E");

                entity.HasIndex(e => new { e.Closed, e.ClosedDate }, "IXNC_InsuranceClaim_Closed_ClosedDate_8AE59");

                entity.HasIndex(e => new { e.Closed, e.ClosedDate }, "IXNC_InsuranceClaim_Closed_ClosedDate_E0B2F");

                entity.HasIndex(e => e.DateCreated, "IXNC_InsuranceClaim_DateCreated_26EBF");

                entity.HasIndex(e => e.DateCreated, "IXNC_InsuranceClaim_DateCreated_69117");

                entity.HasIndex(e => e.DateCreated, "IXNC_InsuranceClaim_DateCreated_6B314");

                entity.HasIndex(e => e.DateInstructed, "IXNC_InsuranceClaim_DateInstructed_9B491");

                entity.HasIndex(e => new { e.DateInstructed, e.ClosedDate }, "IXNC_InsuranceClaim_DateInstructed_ClosedDate_62C19");

                entity.HasIndex(e => e.Guid, "IXNC_InsuranceClaim_GUID_6CFCA");

                entity.HasIndex(e => e.InsuranceCompanyId, "IXNC_InsuranceClaim_InsuranceCompanyId_CAF5B");

                entity.HasIndex(e => new { e.InsuredAddress1, e.InsuredPostCode }, "IXNC_InsuranceClaim_InsuredAddress1_InsuredPostCode_36CAA");

                entity.HasIndex(e => new { e.InsuredAddress1, e.InsuredPostCode, e.InsuranceClaimId }, "IXNC_InsuranceClaim_InsuredAddress1_InsuredPostCode_InsuranceClaimId_B0C1E");

                entity.HasIndex(e => new { e.InsuredAddress1, e.InsuredPostCode, e.LeadItemId }, "IXNC_InsuranceClaim_InsuredAddress1_InsuredPostCode_LeadItemID_2037D");

                entity.HasIndex(e => new { e.InsuredAddress1, e.InsuredPostCode, e.LeadItemId }, "IXNC_InsuranceClaim_InsuredAddress1_InsuredPostCode_LeadItemID_2A8DD");

                entity.HasIndex(e => e.LeadItemId, "IXNC_InsuranceClaim_LeadItemID_1C36C");

                entity.HasIndex(e => e.LossAdjusterId, "IXNC_InsuranceClaim_LossAdjusterId_E11E6");

                entity.HasIndex(e => e.UserId, "IXNC_InsuranceClaim_UserId_06D33");

                entity.HasIndex(e => new { e.UserId, e.Closed }, "IXNC_InsuranceClaim_UserId_Closed_15074");

                entity.HasIndex(e => new { e.Closed, e.ClosedDate }, "InsuranceClaim_Closed_index");

                entity.HasIndex(e => new { e.UserId, e.InsuranceCompanyId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_16_1291203700__K14_K5_K1");

                entity.HasIndex(e => e.AliasInsuranceClaimId, "_dta_index_InsuranceClaim_16_1291203700__K2");

                entity.HasIndex(e => e.DateInstructed, "_dta_index_InsuranceClaim_16_1291203700__K4_1");

                entity.HasIndex(e => new { e.LossAdjusterId, e.InsuranceClaimId, e.DateInstructed }, "_dta_index_InsuranceClaim_16_1291203700__K6_K1_K4");

                entity.HasIndex(e => new { e.DateCreated, e.Closed, e.UserId }, "_dta_index_InsuranceClaim_16_298484142__K93_K106_K14_1");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.UserId, e.InsuranceCompanyId, e.OutcomeId }, "_dta_index_InsuranceClaim_16_385436447__K1_K14_K5_K112_4_34_44_53");

                entity.HasIndex(e => new { e.Closed, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_17_1149247149__K106_K1_4_93_113");

                entity.HasIndex(e => e.DateInstructed, "_dta_index_InsuranceClaim_17_1149247149__K4_113");

                entity.HasIndex(e => e.UserId, "_dta_index_InsuranceClaim_8_1853965681__K14_93");

                entity.HasIndex(e => new { e.UserId, e.InsuranceCompanyId, e.Closed }, "_dta_index_InsuranceClaim_8_1853965681__K14_K5_K106_1_4_93_113");

                entity.HasIndex(e => new { e.DateInstructed, e.InsuranceCompanyId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_8_1853965681__K4_K5_K1_113");

                entity.HasIndex(e => e.DateCreated, "_dta_index_InsuranceClaim_8_1853965681__K93");

                entity.HasIndex(e => new { e.DateCreated, e.InsuranceClaimId, e.InsuranceCompanyId, e.Closed, e.DateInstructed, e.UserId }, "_dta_index_InsuranceClaim_8_1853965681__K93_K1_K5_K106_K4_K14_113");

                entity.HasIndex(e => new { e.ActionId, e.InsuranceClaimId, e.UserId, e.FnolperilDetail, e.LossAdjusterId, e.InsuranceCompanyId, e.OutcomeId }, "_dta_index_InsuranceClaim_9_1853965681__K105_K1_K14_K110_K6_K5_K112_4_7_34_44_106_133");

                entity.HasIndex(e => new { e.Closed, e.ClosedDate, e.InsuranceClaimId, e.UserId, e.InsuranceCompanyId }, "_dta_index_InsuranceClaim_9_1853965681__K106_K113_K1_K14_K5_7_44");

                entity.HasIndex(e => new { e.Closed, e.UserId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_9_1853965681__K106_K14_K1");

                entity.HasIndex(e => new { e.Closed, e.UserId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_9_1853965681__K106_K14_K1_105");

                entity.HasIndex(e => new { e.Closed, e.UserId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_9_1853965681__K106_K14_K1_93");

                entity.HasIndex(e => new { e.Closed, e.UserId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_9_1853965681__K106_K14_K1_95");

                entity.HasIndex(e => new { e.Closed, e.InsuranceClaimId, e.UserId, e.ActionId }, "_dta_index_InsuranceClaim_9_1853965681__K106_K1_K14_K105_93_95");

                entity.HasIndex(e => new { e.Closed, e.LossAdjusterId, e.InsuranceClaimId, e.FnolperilDetail }, "_dta_index_InsuranceClaim_9_1853965681__K106_K6_K1_K110_4_7_34_44");

                entity.HasIndex(e => new { e.OutcomeId, e.ClosedDate, e.FnolitemType, e.LossAdjusterId, e.InsuranceClaimId, e.InsuranceCompanyId }, "_dta_index_InsuranceClaim_9_1853965681__K112_K113_K108_K6_K1_K5_93");

                entity.HasIndex(e => new { e.ClosedDate, e.InsuranceCompanyId, e.LossAdjusterId, e.UserId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_9_1853965681__K113_K5_K6_K14_K1");

                entity.HasIndex(e => new { e.TaskHistoryId, e.UserId, e.ActionId, e.Closed }, "_dta_index_InsuranceClaim_9_1853965681__K129_K14_K105_K106_1_32_33_34_40_41_44_93");

                entity.HasIndex(e => new { e.Source, e.InsuranceClaimId, e.InsuredPostCode }, "_dta_index_InsuranceClaim_9_1853965681__K130_K1_K44");

                entity.HasIndex(e => new { e.UserId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_9_1853965681__K14_K1");

                entity.HasIndex(e => new { e.UserId, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_9_1853965681__K14_K1_32_33_34");

                entity.HasIndex(e => e.InsuranceClaimId, "_dta_index_InsuranceClaim_9_1853965681__K1_7_44");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.Closed, e.UserId, e.ActionId }, "_dta_index_InsuranceClaim_9_1853965681__K1_K106_K14_K105_93_95");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.InsuranceCompanyId, e.FnolitemType }, "_dta_index_InsuranceClaim_9_1853965681__K1_K5_K108");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.DateCreated, e.FnolitemType }, "_dta_index_InsuranceClaim_9_1853965681__K1_K93_K108_113");

                entity.HasIndex(e => new { e.HomeTelephone, e.Mobile, e.InsuranceClaimId }, "_dta_index_InsuranceClaim_9_1853965681__K58_K60_K1");

                entity.HasIndex(e => new { e.InsuranceCompanyId, e.InsuranceClaimId, e.FnolitemType }, "_dta_index_InsuranceClaim_9_1853965681__K5_K1_K108");

                entity.HasIndex(e => new { e.LossAdjusterId, e.Closed, e.InsuranceClaimId, e.FnolitemType, e.FnolperilDetail, e.LeadItemId }, "_dta_index_InsuranceClaim_9_1853965681__K6_K106_K1_K108_K110_K111_7_10_17_34_44_93_113");

                entity.HasIndex(e => new { e.LossAdjusterId, e.Closed, e.InsuranceClaimId, e.InsuranceCompanyId, e.LeadItemId, e.FnolperilDetail, e.FnolitemType }, "_dta_index_InsuranceClaim_9_1853965681__K6_K106_K1_K5_K111_K110_K108_7_10_17_34_44_93_113_133");

                entity.HasIndex(e => new { e.LossAdjusterId, e.ClosedDate, e.Closed, e.InsuranceClaimId, e.OutcomeId, e.FnolitemType, e.FnolperilDetail, e.LeadItemId, e.InsuranceCompanyId }, "_dta_index_InsuranceClaim_9_1853965681__K6_K113_K106_K1_K112_K108_K110_K111_K5_7_10_17_34_44_93_133");

                entity.HasIndex(e => new { e.DateCreated, e.OutcomeId, e.LossAdjusterId, e.InsuranceClaimId, e.UserId, e.TaskHistoryId, e.LeadItemId, e.FnolperilDetail, e.Fnolperil }, "_dta_index_InsuranceClaim_9_1853965681__K93_K112_K6_K1_K14_K129_K111_K110_K109_137");

                entity.HasIndex(e => new { e.UserId, e.InsuranceClaimId, e.InsuredLastName, e.PolicyNumber, e.TaskHistoryId, e.Lareference, e.ActionId }, "_dta_index_InsuranceClaim_9_385436447__K14_K1_K34_K10_K129_K7_K105_32_33_40_41_44_93_106");

                entity.HasIndex(e => e.Source, "_dta_index_InsuranceClaim_9_54165454334");

                entity.HasIndex(e => new { e.Closed, e.ClosedDate }, "closed_insurance_clainm_index");

                entity.Property(e => e.AccidentComments).HasMaxLength(4000);

                entity.Property(e => e.AccidentCommentsFromPh).HasColumnName("AccidentCommentsFromPH");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ActionId)
                    .HasColumnName("ActionID")
                    .HasDefaultValueSql("((13))");

                entity.Property(e => e.AllianzClaimId).HasColumnName("AllianzClaimID");

                entity.Property(e => e.AvivaAssignmentId).HasColumnName("AvivaAssignmentID");

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.Carriage).HasColumnType("money");

                entity.Property(e => e.CashSettlementAmount).HasColumnType("money");

                entity.Property(e => e.ClaimDetails)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CollectionAddress1).HasMaxLength(60);

                entity.Property(e => e.CollectionAddress2).HasMaxLength(60);

                entity.Property(e => e.CollectionAddress3).HasMaxLength(60);

                entity.Property(e => e.CollectionAddress4).HasMaxLength(60);

                entity.Property(e => e.CollectionContactPerson).HasMaxLength(60);

                entity.Property(e => e.CollectionName).HasMaxLength(60);

                entity.Property(e => e.CollectionPostCode).HasMaxLength(10);

                entity.Property(e => e.CollectionTelephone).HasMaxLength(32);

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.CreditPhRaised)
                    .HasColumnName("Credit_Ph_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Raised_Date");

                entity.Property(e => e.CreditPhReq)
                    .HasColumnName("Credit_Ph_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Req_Date");

                entity.Property(e => e.CreditPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Ph_Sage");

                entity.Property(e => e.CreditPhSync)
                    .HasColumnName("Credit_Ph_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Sync_Date");

                entity.Property(e => e.CreditPhVat)
                    .HasColumnName("Credit_Ph_VAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CrimeNumber).HasMaxLength(30);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateInstructed)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateXschanged)
                    .HasColumnType("datetime")
                    .HasColumnName("DateXSChanged");

                entity.Property(e => e.DelegatedAuthorityId).HasColumnName("DelegatedAuthorityID");

                entity.Property(e => e.DeliveryAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryCountryId).HasDefaultValueSql("((1))");

                entity.Property(e => e.DeliveryName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExcessDeducted).HasColumnType("money");

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Finalise).HasDefaultValueSql("((0))");

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.Fnolaccepted).HasColumnName("FNOLAccepted");

                entity.Property(e => e.FnolitemType).HasColumnName("FNOLItemType");

                entity.Property(e => e.Fnolperil).HasColumnName("FNOLPeril");

                entity.Property(e => e.FnolperilDetail).HasColumnName("FNOLPerilDetail");

                entity.Property(e => e.FnolsourceId).HasColumnName("FNOLSourceID");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Handler)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.IncidentDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Title)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredCompanyName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredCountryId)
                    .HasColumnName("InsuredCountryID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredTitle)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InsurerCashSettlmentValue).HasColumnType("money");

                entity.Property(e => e.InvPhRaised)
                    .HasColumnName("Inv_Ph_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Raised_Date");

                entity.Property(e => e.InvPhReq)
                    .HasColumnName("Inv_Ph_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Req_Date");

                entity.Property(e => e.InvPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Ph_Sage");

                entity.Property(e => e.InvPhSync)
                    .HasColumnName("Inv_Ph_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Sync_Date");

                entity.Property(e => e.InvPhVat)
                    .HasColumnName("Inv_Ph_VAT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvVatPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_VAT_Ph_Sage");

                entity.Property(e => e.InvoiceCarriage).HasColumnType("money");

                entity.Property(e => e.InvoiceValue).HasColumnType("money");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress")
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.IsInsuredAcompany).HasColumnName("IsInsuredACompany");

                entity.Property(e => e.IsVatregistered).HasColumnName("IsVATRegistered");

                entity.Property(e => e.ItemTypeId).HasDefaultValueSql("((11))");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.LastActionDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LeadItemId).HasColumnName("LeadItemID");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.PhaseId)
                    .HasColumnName("PhaseID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Pocarriage)
                    .HasColumnType("money")
                    .HasColumnName("POCarriage");

                entity.Property(e => e.PolicyExcess)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PolicyHolderDateOfBirth).HasColumnType("datetime");

                entity.Property(e => e.PolicyInceptionDate).HasColumnType("datetime");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Povalue)
                    .HasColumnType("money")
                    .HasColumnName("POValue");

                entity.Property(e => e.Profit).HasColumnType("money");

                entity.Property(e => e.QuoteComments).IsUnicode(false);

                entity.Property(e => e.SingleArticleLimit).HasColumnType("money");

                entity.Property(e => e.Source)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(N'FNOL')");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.TaskHistoryId).HasColumnName("TaskHistoryID");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TotalExcess).HasColumnType("money");

                entity.Property(e => e.VatregistrationNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("VATRegistrationNumber");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.XschangedBy)
                    .HasMaxLength(50)
                    .HasColumnName("XSChangedBy");

                entity.Property(e => e.Xspaid).HasColumnName("XSPaid");

                entity.HasOne(d => d.LeadItem)
                    .WithMany(p => p.InsuranceClaim1s)
                    .HasForeignKey(d => d.LeadItemId)
                    .HasConstraintName("FK_InsuranceClaim_ClaimItem");

                entity.HasOne(d => d.TaskHistory)
                    .WithMany(p => p.InsuranceClaim1s)
                    .HasForeignKey(d => d.TaskHistoryId)
                    .HasConstraintName("FK_InsuranceClaim_TaskHistory");
            });

            modelBuilder.Entity<InsuranceClaimCommentsHistory>(entity =>
            {
                entity.HasKey(e => e.ClaimCommentsHistoryId);

                entity.ToTable("InsuranceClaimCommentsHistory", "Claim");

                entity.HasIndex(e => e.CreatedBy, "IXNC_InsuranceClaimCommentsHistory_CreatedBy_DED31");

                entity.HasIndex(e => e.InsuranceClaimId, "IXNC_InsuranceClaimCommentsHistory_InsuranceClaimId_DEEDB");

                entity.HasIndex(e => e.InsuranceClaimId, "Missing_IXNC_InsuranceClaimCommentsHistory_InsuranceClaimId_8FA8A");

                entity.HasIndex(e => new { e.ClaimCommentsHistoryId, e.ReasonId }, "_dta_index_InsuranceClaimCommentsHistory_9_1181247263__K1_K8");

                entity.HasIndex(e => e.InsuranceClaimId, "_dta_index_InsuranceClaimCommentsHistory_9_1181247263__K2_3_4");

                entity.HasIndex(e => e.InsuranceClaimId, "_dta_index_InsuranceClaimCommentsHistory_9_1181247264__K2_3_4");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");

                entity.Property(e => e.Sapupdated).HasColumnName("SAPUpdated");
            });

            modelBuilder.Entity<InsuranceClaimDocument>(entity =>
            {
                entity.HasKey(e => e.DocumentId);

                entity.ToTable("InsuranceClaimDocument", "Site");

                entity.HasIndex(e => new { e.DocTypeId, e.DateAdded }, "ICD_DocTypeID_DateAdded_Index");

                entity.HasIndex(e => e.DateAdded, "IXNC_InsuranceClaimDocument_DateAdded_3661D");

                entity.HasIndex(e => e.Guid, "IXNC_InsuranceClaimDocument_GUID_3437D");

                entity.HasIndex(e => e.InsuranceClaimId, "IXNC_InsuranceClaimDocument_InsuranceClaimID_D7DE6");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.DocTypeId }, "IXNC_InsuranceClaimDocument_InsuranceClaimID_DocTypeID_306DE");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DateAdded)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocDescrip).HasMaxLength(100);

                entity.Property(e => e.DocName).HasMaxLength(100);

                entity.Property(e => e.DocTypeId).HasColumnName("DocTypeID");

                entity.Property(e => e.DocumentHtml).HasColumnName("DocumentHTML");

                entity.Property(e => e.DocumentTagId).HasColumnName("DocumentTagID");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.OrigDocName).HasMaxLength(100);

                entity.HasOne(d => d.InsuranceClaim)
                    .WithMany(p => p.InsuranceClaimDocuments)
                    .HasForeignKey(d => d.InsuranceClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsuranceClaimDocument_InsuranceClaim");
            });

            modelBuilder.Entity<InsuranceClaimStatus>(entity =>
            {
                entity.ToTable("InsuranceClaimStatus", "Site");

                entity.HasIndex(e => e.Description, "IX_InsuranceClaimStatus")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InsuranceClaimStatusHistory>(entity =>
            {
                entity.ToTable("InsuranceClaimStatusHistory", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.StatusComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<InsuranceCompany>(entity =>
            {
                entity.ToTable("InsuranceCompany", "Site");

                entity.HasIndex(e => e.DisplayOnWeb, "IXNC_InsuranceCompany_DisplayOnWeb_7CA27");

                entity.HasIndex(e => new { e.InsuranceCompanyId, e.Description }, "_dta_index_InsuranceCompany_9_1325247776__K1_K4");

                entity.Property(e => e.AccountsNotes).HasMaxLength(4000);

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreditController).HasDefaultValueSql("((9))");

                entity.Property(e => e.Dalimit)
                    .HasColumnType("money")
                    .HasColumnName("DALimit");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Emailalert).HasColumnName("emailalert");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SbsfaxContact)
                    .HasMaxLength(50)
                    .HasColumnName("SBSFaxContact");

                entity.Property(e => e.SbsphoneContact)
                    .HasMaxLength(50)
                    .HasColumnName("SBSPhoneContact");

                entity.Property(e => e.UserName)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VouchersAtRetailPrice)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<InsuranceCompanyType>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("InsuranceCompanyType", "Site");

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<InsurancePricing>(entity =>
            {
                entity.HasKey(e => e.FlInsurancePricingId)
                    .HasName("InsurancePricing_pk");

                entity.ToTable("InsurancePricing", "Flooring");

                entity.Property(e => e.FlInsurancePricingId).HasColumnName("fl_insurance_pricing_id");

                entity.Property(e => e.InsurerId).HasColumnName("insurer_id");

                entity.Property(e => e.PricingTypeId).HasColumnName("pricing_type_id");

                entity.HasOne(d => d.Insurer)
                    .WithMany(p => p.InsurancePricings)
                    .HasForeignKey(d => d.InsurerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("InsurancePricing_InsuranceCompany_InsuranceCompanyId_fk");

                entity.HasOne(d => d.PricingType)
                    .WithMany(p => p.InsurancePricings)
                    .HasForeignKey(d => d.PricingTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("InsurancePricing_InsurancePricingType_fl_insurance_pricing_type_id_fk");
            });

            modelBuilder.Entity<InsurancePricingType>(entity =>
            {
                entity.HasKey(e => e.FlInsurancePricingTypeId)
                    .HasName("InsurancePricingType_pk");

                entity.ToTable("InsurancePricingType", "Flooring");

                entity.Property(e => e.FlInsurancePricingTypeId).HasColumnName("fl_insurance_pricing_type_id");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("adjustment");

                entity.Property(e => e.FlatAdjustment)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("flatAdjustment");

                entity.Property(e => e.Name)
                    .HasMaxLength(80)
                    .HasColumnName("name");

                entity.Property(e => e.RemoveVat).HasColumnName("removeVAT");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INVOICE", "MI");

                entity.HasIndex(e => new { e.AccountRef, e.InvoiceDate }, "IXNC_INVOICE_ACCOUNT_REF_INVOICE_DATE_0E8F6");

                entity.HasIndex(e => new { e.AccountRef, e.InvoiceDate }, "IXNC_INVOICE_ACCOUNT_REF_INVOICE_DATE_69731");

                entity.HasIndex(e => e.Consignment, "IXNC_INVOICE_CONSIGNMENT_06F94");

                entity.HasIndex(e => e.InvoiceDate, "IXNC_INVOICE_INVOICE_DATE_834EE");

                entity.HasIndex(e => e.InvoiceDate, "IXNC_INVOICE_INVOICE_DATE_E41A3");

                entity.HasIndex(e => e.InvoiceDate, "IXNC_INVOICE_INVOICE_DATE_E90A7");

                entity.HasIndex(e => e.InvoiceNumber, "IXNC_INVOICE_INVOICE_NUMBER_B59BA");

                entity.HasIndex(e => new { e.InvoiceTypeCode, e.AccountRef, e.PostedCode, e.InvoiceDate }, "IXNC_INVOICE_INVOICE_TYPE_CODE_ACCOUNT_REF_POSTED_CODE_INVOICE_DATE_41F2F");

                entity.HasIndex(e => e.InvoiceTypeCode, "IXNC_INVOICE_INVOICE_TYPE_CODE_FA1D5");

                entity.HasIndex(e => new { e.InvoiceTypeCode, e.PostedCode, e.InvoiceDate }, "IXNC_INVOICE_INVOICE_TYPE_CODE_POSTED_CODE_INVOICE_DATE_A75AE");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_1");

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_2");

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_3");

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_4");

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_5");

                entity.Property(e => e.AmountPrepaid).HasColumnName("AMOUNT_PREPAID");

                entity.Property(e => e.CAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_1");

                entity.Property(e => e.CAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_2");

                entity.Property(e => e.CAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_3");

                entity.Property(e => e.CAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_4");

                entity.Property(e => e.CAddress5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_5");

                entity.Property(e => e.CarrDeptName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CARR_DEPT_NAME");

                entity.Property(e => e.CarrDeptNumber).HasColumnName("CARR_DEPT_NUMBER");

                entity.Property(e => e.CarrGross).HasColumnName("CARR_GROSS");

                entity.Property(e => e.CarrNet).HasColumnName("CARR_NET");

                entity.Property(e => e.CarrNomCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CARR_NOM_CODE");

                entity.Property(e => e.CarrTax).HasColumnName("CARR_TAX");

                entity.Property(e => e.CarrTaxCode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CARR_TAX_CODE");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_NAME");

                entity.Property(e => e.CourierName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COURIER_NAME");

                entity.Property(e => e.CourierNumber).HasColumnName("COURIER_NUMBER");

                entity.Property(e => e.Currency).HasColumnName("CURRENCY");

                entity.Property(e => e.CurrencyType).HasColumnName("CURRENCY_TYPE");

                entity.Property(e => e.CustDiscRate).HasColumnName("CUST_DISC_RATE");

                entity.Property(e => e.CustOrderNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUST_ORDER_NUMBER");

                entity.Property(e => e.CustTelNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUST_TEL_NUMBER");

                entity.Property(e => e.DelAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_1");

                entity.Property(e => e.DelAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_2");

                entity.Property(e => e.DelAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_3");

                entity.Property(e => e.DelAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_4");

                entity.Property(e => e.DelAddress5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_5");

                entity.Property(e => e.DelName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_NAME");

                entity.Property(e => e.EuroGross).HasColumnName("EURO_GROSS");

                entity.Property(e => e.EuroRate).HasColumnName("EURO_RATE");

                entity.Property(e => e.ForeignAmountPrepaid).HasColumnName("FOREIGN_AMOUNT_PREPAID");

                entity.Property(e => e.ForeignCarrGross).HasColumnName("FOREIGN_CARR_GROSS");

                entity.Property(e => e.ForeignCarrNet).HasColumnName("FOREIGN_CARR_NET");

                entity.Property(e => e.ForeignCarrTax).HasColumnName("FOREIGN_CARR_TAX");

                entity.Property(e => e.ForeignInvoiceGross).HasColumnName("FOREIGN_INVOICE_GROSS");

                entity.Property(e => e.ForeignInvoiceNet).HasColumnName("FOREIGN_INVOICE_NET");

                entity.Property(e => e.ForeignInvoiceTax).HasColumnName("FOREIGN_INVOICE_TAX");

                entity.Property(e => e.ForeignItemsGross).HasColumnName("FOREIGN_ITEMS_GROSS");

                entity.Property(e => e.ForeignItemsNet).HasColumnName("FOREIGN_ITEMS_NET");

                entity.Property(e => e.ForeignItemsTax).HasColumnName("FOREIGN_ITEMS_TAX");

                entity.Property(e => e.ForeignRate).HasColumnName("FOREIGN_RATE");

                entity.Property(e => e.ForeignSettlementDiscAmount).HasColumnName("FOREIGN_SETTLEMENT_DISC_AMOUNT");

                entity.Property(e => e.ForeignSettlementTotal).HasColumnName("FOREIGN_SETTLEMENT_TOTAL");

                entity.Property(e => e.GlobalDeptName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_DEPT_NAME");

                entity.Property(e => e.GlobalDeptNumber).HasColumnName("GLOBAL_DEPT_NUMBER");

                entity.Property(e => e.GlobalDetails)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_DETAILS");

                entity.Property(e => e.GlobalNomCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_NOM_CODE");

                entity.Property(e => e.GlobalTaxCode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("GLOBAL_TAX_CODE");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceGross).HasColumnName("INVOICE_GROSS");

                entity.Property(e => e.InvoiceNet).HasColumnName("INVOICE_NET");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceOrCredit)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_OR_CREDIT");

                entity.Property(e => e.InvoiceTax).HasColumnName("INVOICE_TAX");

                entity.Property(e => e.InvoiceType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TYPE");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");

                entity.Property(e => e.ItemsGross).HasColumnName("ITEMS_GROSS");

                entity.Property(e => e.ItemsNet).HasColumnName("ITEMS_NET");

                entity.Property(e => e.ItemsTax).HasColumnName("ITEMS_TAX");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.NetAmount1).HasColumnName("NET_AMOUNT_1");

                entity.Property(e => e.NetAmount2).HasColumnName("NET_AMOUNT_2");

                entity.Property(e => e.NetAmount3).HasColumnName("NET_AMOUNT_3");

                entity.Property(e => e.NetAmount4).HasColumnName("NET_AMOUNT_4");

                entity.Property(e => e.NetAmount5).HasColumnName("NET_AMOUNT_5");

                entity.Property(e => e.Notes1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NOTES_1");

                entity.Property(e => e.Notes2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NOTES_2");

                entity.Property(e => e.Notes3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NOTES_3");

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.PaymentRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENT_REF");

                entity.Property(e => e.Posted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("POSTED");

                entity.Property(e => e.PostedCode).HasColumnName("POSTED_CODE");

                entity.Property(e => e.Printed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINTED");

                entity.Property(e => e.PrintedCode).HasColumnName("PRINTED_CODE");

                entity.Property(e => e.SettlementDiscAmount).HasColumnName("SETTLEMENT_DISC_AMOUNT");

                entity.Property(e => e.SettlementDiscRate).HasColumnName("SETTLEMENT_DISC_RATE");

                entity.Property(e => e.SettlementDueDays).HasColumnName("SETTLEMENT_DUE_DAYS");

                entity.Property(e => e.SettlementTotal).HasColumnName("SETTLEMENT_TOTAL");

                entity.Property(e => e.TakenBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TAKEN_BY");

                entity.Property(e => e.TaxAmount1).HasColumnName("TAX_AMOUNT_1");

                entity.Property(e => e.TaxAmount2).HasColumnName("TAX_AMOUNT_2");

                entity.Property(e => e.TaxAmount3).HasColumnName("TAX_AMOUNT_3");

                entity.Property(e => e.TaxAmount4).HasColumnName("TAX_AMOUNT_4");

                entity.Property(e => e.TaxAmount5).HasColumnName("TAX_AMOUNT_5");

                entity.Property(e => e.TaxRate1).HasColumnName("TAX_RATE_1");

                entity.Property(e => e.TaxRate2).HasColumnName("TAX_RATE_2");

                entity.Property(e => e.TaxRate3).HasColumnName("TAX_RATE_3");

                entity.Property(e => e.TaxRate4).HasColumnName("TAX_RATE_4");

                entity.Property(e => e.TaxRate5).HasColumnName("TAX_RATE_5");
            });

            modelBuilder.Entity<Invoice1>(entity =>
            {
                entity.ToTable("Invoice", "Supplier");

                entity.HasIndex(e => e.Ponumber, "IXNC_Invoice_PONumber_5070B");

                entity.HasIndex(e => e.Ponumber, "IXNC_Invoice_PONumber_62021");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CustomerAddress).HasMaxLength(2000);

                entity.Property(e => e.CustomerContactNumber).HasMaxLength(2000);

                entity.Property(e => e.CustomerName).HasMaxLength(2000);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryAddress).HasMaxLength(2000);

                entity.Property(e => e.DeliveryContactNumber).HasMaxLength(2000);

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryName).HasMaxLength(2000);

                entity.Property(e => e.DeliveryVat).HasColumnName("DeliveryVAT");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.InvoiceNumber).HasMaxLength(2000);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.SupplierName).HasMaxLength(200);

                entity.Property(e => e.TotalVat).HasColumnName("TotalVAT");
            });

            modelBuilder.Entity<InvoiceDetailFinance>(entity =>
            {
                entity.ToTable("InvoiceDetailFinance", "MI");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.InvoiceDetailId).HasColumnName("InvoiceDetailID");

                entity.Property(e => e.InvoiceMasterId).HasColumnName("InvoiceMasterID");
            });

            modelBuilder.Entity<InvoiceException>(entity =>
            {
                entity.HasKey(e => e.IeId);

                entity.ToTable("InvoiceExceptions", "Accounts");

                entity.Property(e => e.IeId).HasColumnName("ie_id");

                entity.Property(e => e.IeCashSettlement).HasColumnName("ie_cash_settlement");

                entity.Property(e => e.IeProductId).HasColumnName("ie_ProductId");

                entity.Property(e => e.IeVrId).HasColumnName("ie_vr_id");
            });

            modelBuilder.Entity<InvoiceItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INVOICE_ITEM", "MI");

                entity.HasIndex(e => e.GrossAmount, "IXNC_INVOICE_ITEM_GROSS_AMOUNT_E3D76");

                entity.HasIndex(e => new { e.InvoiceNumber, e.GrossAmount }, "IXNC_INVOICE_ITEM_INVOICE_NUMBER_GROSS_AMOUNT_EFDCF");

                entity.HasIndex(e => new { e.StockCode, e.GrossAmount }, "IXNC_INVOICE_ITEM_STOCK_CODE_GROSS_AMOUNT_10D2A");

                entity.Property(e => e.AddDiscRate).HasColumnName("ADD_DISC_RATE");

                entity.Property(e => e.Comment1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COMMENT_1");

                entity.Property(e => e.Comment2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COMMENT_2");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DELIVERY_DATE");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DEPT_NAME");

                entity.Property(e => e.DeptNumber).HasColumnName("DEPT_NUMBER");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountAmount).HasColumnName("DISCOUNT_AMOUNT");

                entity.Property(e => e.DiscountRate).HasColumnName("DISCOUNT_RATE");

                entity.Property(e => e.ExtOrderLineRef).HasColumnName("EXT_ORDER_LINE_REF");

                entity.Property(e => e.ExtOrderRef)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EXT_ORDER_REF");

                entity.Property(e => e.ForeignDiscountAmount).HasColumnName("FOREIGN_DISCOUNT_AMOUNT");

                entity.Property(e => e.ForeignFullNetAmount).HasColumnName("FOREIGN_FULL_NET_AMOUNT");

                entity.Property(e => e.ForeignGrossAmount).HasColumnName("FOREIGN_GROSS_AMOUNT");

                entity.Property(e => e.ForeignNetAmount).HasColumnName("FOREIGN_NET_AMOUNT");

                entity.Property(e => e.ForeignTaxAmount).HasColumnName("FOREIGN_TAX_AMOUNT");

                entity.Property(e => e.ForeignUnitPrice).HasColumnName("FOREIGN_UNIT_PRICE");

                entity.Property(e => e.FullNetAmount).HasColumnName("FULL_NET_AMOUNT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.ItemNumber).HasColumnName("ITEM_NUMBER");

                entity.Property(e => e.JobNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("JOB_NUMBER");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.NominalCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("NOMINAL_CODE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.ServiceFlag).HasColumnName("SERVICE_FLAG");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TaxRate).HasColumnName("TAX_RATE");

                entity.Property(e => e.Text)
                    .HasColumnType("text")
                    .HasColumnName("TEXT");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_OF_SALE");

                entity.Property(e => e.UnitPrice).HasColumnName("UNIT_PRICE");
            });

            modelBuilder.Entity<InvoiceProduct>(entity =>
            {
                entity.ToTable("InvoiceProduct", "Supplier");

                entity.HasIndex(e => e.Invoiceid, "IXNC_InvoiceProduct_invoiceid_63260");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Invoiceid).HasColumnName("invoiceid");

                entity.Property(e => e.Vat).HasColumnName("VAT");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceProducts)
                    .HasForeignKey(d => d.Invoiceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceProduct_Invoice");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.ToTable("Item", "Amazon");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ItemBrand)
                    .HasMaxLength(500)
                    .HasColumnName("item_brand");

                entity.Property(e => e.ItemFeatures)
                    .HasColumnType("text")
                    .HasColumnName("item_features");

                entity.Property(e => e.ItemPackageQuantity)
                    .HasMaxLength(500)
                    .HasColumnName("item_package_quantity");

                entity.Property(e => e.ItemPartNumber)
                    .HasMaxLength(500)
                    .HasColumnName("item_part_number");
            });

            modelBuilder.Entity<Item1>(entity =>
            {
                entity.HasKey(e => e.ItemId);

                entity.ToTable("Item", "Site");

                entity.HasIndex(e => e.ItemNumber, "IX_Item_1")
                    .IsUnique();

                entity.Property(e => e.BuyerAddress1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerAddress2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerAddress3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCounty)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerPostcode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerTitleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerTown)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ConsignmentReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ContractReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DeliveryReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionDetails)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Make)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Model)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.NotifyDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SaleDate).HasColumnType("datetime");

                entity.Property(e => e.SaleType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesChannel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalesComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SalesPrice).HasColumnType("money");

                entity.Property(e => e.SalesRef)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDate).HasColumnType("datetime");

                entity.Property(e => e.StockConditionDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tag)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Warranty)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DeliverAdvice)
                    .WithMany(p => p.Item1s)
                    .HasForeignKey(d => d.DeliverAdviceId)
                    .HasConstraintName("FK_Item_DeliveryAdvice");

                entity.HasOne(d => d.ItemType)
                    .WithMany(p => p.Item1s)
                    .HasForeignKey(d => d.ItemTypeId)
                    .HasConstraintName("FK_Item_ItemType");

                entity.HasOne(d => d.StockCondition)
                    .WithMany(p => p.Item1s)
                    .HasForeignKey(d => d.StockConditionId)
                    .HasConstraintName("FK_Item_StockCondition");
            });

            modelBuilder.Entity<ItemActionHistory>(entity =>
            {
                entity.ToTable("ItemActionHistory", "Claim");

                entity.HasIndex(e => e.ClaimItemId, "IXNC_ItemActionHistory_ClaimItemID_1619E");

                entity.HasIndex(e => new { e.ClaimItemId, e.Id }, "_dta_index_ItemActionHistory_9_263671987__K2_K1_6");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.OutcomeOptionsId).HasColumnName("OutcomeOptionsID");

                entity.Property(e => e.User).HasMaxLength(50);

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ItemActionHistories)
                    .HasForeignKey(d => d.ActionId)
                    .HasConstraintName("FK_ItemActionHistory_Action");

                entity.HasOne(d => d.ClaimItem)
                    .WithMany(p => p.ItemActionHistories)
                    .HasForeignKey(d => d.ClaimItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemActionHistory_ClaimItem");

                entity.HasOne(d => d.OutcomeOptions)
                    .WithMany(p => p.ItemActionHistories)
                    .HasForeignKey(d => d.OutcomeOptionsId)
                    .HasConstraintName("FK_ItemActionHistory_ClaimActionOutcomes");
            });

            modelBuilder.Entity<ItemAttribute>(entity =>
            {
                entity.ToTable("ItemAttributes", "Claim");

                entity.HasIndex(e => e.ClaimItemId, "IXNC_ItemAttributes_ClaimItemID_42590");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.Property(e => e.ValueName).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemAttribute1>(entity =>
            {
                entity.HasKey(e => e.ItemAttributeId);

                entity.ToTable("ItemAttribute", "Site");

                entity.Property(e => e.AttributeName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.AttributeValue)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.InspectionAttributeValue)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemDeliveredLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemDelivered_Log", "Accounts");

                entity.Property(e => e.ClaimOrderId).HasColumnName("ClaimOrderID");

                entity.Property(e => e.DateChecked).HasColumnType("datetime");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.PoNewStatus).HasColumnName("PO_NewStatus");

                entity.Property(e => e.PoReq).HasColumnName("PO_Req");

                entity.Property(e => e.PoStatus).HasColumnName("PO_Status");

                entity.Property(e => e.RetVal).HasColumnName("Ret_Val");
            });

            modelBuilder.Entity<ItemFinance>(entity =>
            {
                entity.ToTable("ItemFinance", "MI");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.FinanceTypeId).HasColumnName("FinanceTypeID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemFinances)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemFinance_FinanceType");
            });

            modelBuilder.Entity<ItemInspection>(entity =>
            {
                entity.HasKey(e => e.InspectionId);

                entity.ToTable("ItemInspection", "Inspection");

                entity.HasIndex(e => new { e.ActionId, e.Read }, "IXNC_ItemInspection_ActionID_Read_77C9C");

                entity.HasIndex(e => e.AgentId, "IXNC_ItemInspection_AgentID_5D03B");

                entity.HasIndex(e => e.AgentId, "IXNC_ItemInspection_AgentID_A7DE0");

                entity.HasIndex(e => e.Alerted, "IXNC_ItemInspection_Alerted_02F9A");

                entity.HasIndex(e => e.ClaimItemId, "IXNC_ItemInspection_ClaimItemID_0EB70");

                entity.HasIndex(e => new { e.ClaimItemId, e.Closed }, "IXNC_ItemInspection_ClaimItemID_Closed_5514B");

                entity.HasIndex(e => new { e.ClaimItemId, e.Closed }, "IXNC_ItemInspection_ClaimItemID_Closed_94256");

                entity.HasIndex(e => e.Closed, "IXNC_ItemInspection_Closed_4E795");

                entity.HasIndex(e => e.Closed, "IXNC_ItemInspection_Closed_7DDCE");

                entity.HasIndex(e => e.OldInspectionFlag, "IXNC_ItemInspection_OldInspectionFlag_7BDFF");

                entity.HasIndex(e => e.OldInspectionId, "IXNC_ItemInspection_OldInspectionID_52933");

                entity.HasIndex(e => new { e.ClaimItemId, e.InspectionId, e.CallMadeIfDifferent, e.CallBookedDate }, "_dta_index_ItemInspection_9_1255675521__K2_K1_K18_K17");

                entity.HasIndex(e => new { e.ClaimItemId, e.InspectionId, e.AgentId, e.ActionId, e.OldInspectionFlag, e.InspectionTypeId, e.DateReported }, "_dta_index_ItemInspection_9_1255675521__K2_K1_K3_K15_K41_K5_K6_4_14_26_28_29_39");

                entity.HasIndex(e => e.AgentId, "_dta_index_ItemInspection_9_1255675521__K3");

                entity.HasIndex(e => new { e.AgentId, e.InspectionId, e.Postcode, e.ClaimItemId, e.ActionId, e.InspectionTypeId }, "_dta_index_ItemInspection_9_1255675521__K3_K1_K26_K2_K15_K5_4");

                entity.HasIndex(e => e.DateReceived, "_dta_index_ItemInspection_9_1255675521__K4");

                entity.HasIndex(e => e.DateReceived, "_dta_index_ItemInspection_9_1255675521__K4_17");

                entity.Property(e => e.InspectionId).HasColumnName("InspectionID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.Address4).HasMaxLength(50);

                entity.Property(e => e.AgentId).HasColumnName("AgentID");

                entity.Property(e => e.BackupDate).HasColumnType("datetime");

                entity.Property(e => e.BackupDetails).HasColumnType("ntext");

                entity.Property(e => e.CallBookedDate).HasColumnType("datetime");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.Concerns).HasColumnType("ntext");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateReported).HasColumnType("datetime");

                entity.Property(e => e.EtarepairComplete).HasColumnName("ETARepairComplete");

                entity.Property(e => e.FittingDate).HasColumnType("datetime");

                entity.Property(e => e.Guid)
                    .HasMaxLength(200)
                    .HasColumnName("GUID");

                entity.Property(e => e.InspectionScheduled).HasColumnType("datetime");

                entity.Property(e => e.InspectionTypeId).HasColumnName("InspectionTypeID");

                entity.Property(e => e.LastModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OldInspectionId).HasColumnName("OldInspectionID");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.Postcode).HasMaxLength(50);

                entity.Property(e => e.QuarantineEnd).HasColumnType("datetime");

                entity.Property(e => e.QuarantineStart).HasColumnType("datetime");

                entity.Property(e => e.Read)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Report).HasColumnType("ntext");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.HasOne(d => d.ClaimItem)
                    .WithMany(p => p.ItemInspections)
                    .HasForeignKey(d => d.ClaimItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemInspection_ClaimItem");
            });

            modelBuilder.Entity<ItemInvoiced>(entity =>
            {
                entity.HasKey(e => e.IiId);

                entity.ToTable("ItemInvoiced", "Accounts");

                entity.HasIndex(e => e.IiClaimOrderId, "_dta_index_ItemInvoiced_9_875150163__K2");

                entity.Property(e => e.IiId).HasColumnName("ii_id");

                entity.Property(e => e.IiClaimOrderId).HasColumnName("ii_ClaimOrderId");
            });

            modelBuilder.Entity<ItemOutcome>(entity =>
            {
                entity.HasKey(e => e.OutcomeId)
                    .HasName("PK_ClaimItemOutcome");

                entity.ToTable("ItemOutcome", "MI");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.OldMioutcome).HasColumnName("OldMIOutcome");

                entity.Property(e => e.OutcomeName).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemPart>(entity =>
            {
                entity.ToTable("ItemPart", "Site");

                entity.Property(e => e.CostPrice).HasColumnType("money");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SalesPrice).HasColumnType("money");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemParts)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemPart_Item");
            });

            modelBuilder.Entity<ItemPhaseHistory>(entity =>
            {
                entity.ToTable("ItemPhaseHistory", "Claim");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.User).HasMaxLength(50);

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.ItemPhaseHistories)
                    .HasForeignKey(d => d.PhaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemPhaseHistory_Phase");
            });

            modelBuilder.Entity<ItemProperty>(entity =>
            {
                entity.HasKey(e => e.PropertyId)
                    .HasName("PK_FNOL.ItemProperties");

                entity.ToTable("ItemProperties", "FNOL");

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.ParentParameterId)
                    .HasColumnName("ParentParameterID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentValueId)
                    .HasColumnName("ParentValueID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PropertyText).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemRepair>(entity =>
            {
                entity.ToTable("ItemRepair", "Inspection");

                entity.HasIndex(e => e.InspectionId, "_dta_index_ItemRepair_9_1287675635__K2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateReported).HasColumnType("datetime");

                entity.Property(e => e.InspectionId).HasColumnName("InspectionID");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.ItemRepairs)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemRepair_ItemInspection");
            });

            modelBuilder.Entity<ItemReportStat>(entity =>
            {
                entity.ToTable("ItemReportStats", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionTime).HasColumnType("datetime");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<ItemStatus>(entity =>
            {
                entity.ToTable("ItemStatus", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NewActionId).HasColumnName("NewActionID");

                entity.Property(e => e.Stage).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemStatusHistory>(entity =>
            {
                entity.ToTable("ItemStatusHistory", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ItemStatusHistory1>(entity =>
            {
                entity.HasKey(e => e.ItemStatusHistoryId);

                entity.ToTable("ItemStatusHistory", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDate).HasColumnType("datetime");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemStatusHistory1s)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemStatusHistory_Item");
            });

            modelBuilder.Entity<ItemTaskHistory>(entity =>
            {
                entity.ToTable("ItemTaskHistory", "Claim");

                entity.HasIndex(e => e.ActionId, "IXNC_ItemTaskHistory_ActionID_25EDA");

                entity.HasIndex(e => e.ActionId, "IXNC_ItemTaskHistory_ActionID_27B05");

                entity.HasIndex(e => e.ClaimItemId, "IXNC_ItemTaskHistory_ClaimItemID_35B59");

                entity.HasIndex(e => new { e.Id, e.ClaimItemId }, "_dta_index_ItemTaskHistory_9_455672671__K1_K2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionId)
                    .HasColumnName("ActionID")
                    .HasComment("The ID for the action that generated this task");

                entity.Property(e => e.Allowedhours)
                    .HasColumnName("allowedhours")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ClaimItemId)
                    .HasColumnName("ClaimItemID")
                    .HasComment("The item that this task relates to");

                entity.Property(e => e.Complete).HasComment("Is this task complete? Non-persistent tasks will be fulfilled the moment a new task is created");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasComment("The date this task was generated");

                entity.Property(e => e.DateCompleted)
                    .HasColumnType("datetime")
                    .HasComment("The date this task was completed");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsPersistent).HasComment("A persistent task is only fulfilled by a specific action against this item. That actions CompletingActionID must match this tasks ActionID");

                entity.Property(e => e.Text).HasComment("The test description of this task");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Workflow')")
                    .HasComment("A task can be 'Workflow' - generated automatically from an action, or 'Adhoc'");

                entity.Property(e => e.User)
                    .HasMaxLength(50)
                    .HasColumnName("user");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ItemTaskHistories)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemTaskHistory_Action");

                entity.HasOne(d => d.ClaimItem)
                    .WithMany(p => p.ItemTaskHistories)
                    .HasForeignKey(d => d.ClaimItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemTaskHistory_ClaimItem");

                entity.HasOne(d => d.OutcomeOptionsNavigation)
                    .WithMany(p => p.ItemTaskHistories)
                    .HasForeignKey(d => d.OutcomeOptions)
                    .HasConstraintName("FK_ItemTaskHistory_ClaimActionOutcomes");
            });

            modelBuilder.Entity<ItemTaskHistory1>(entity =>
            {
                entity.ToTable("ItemTaskHistory", "nCompass");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateCompleted).HasColumnType("datetime");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Workflow')");
            });

            modelBuilder.Entity<ItemType>(entity =>
            {
                entity.ToTable("ItemType", "Site");

                entity.HasIndex(e => e.Description, "IX_ItemType")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemTypeAttribute>(entity =>
            {
                entity.ToTable("ItemTypeAttribute", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JdstransactionLog>(entity =>
            {
                entity.ToTable("JDSTransactionLog", "nCompass");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<JdsvalidatedItem>(entity =>
            {
                entity.ToTable("JDSValidatedItem", "nCompass");

                entity.HasIndex(e => e.ClaimId, "IXNC_JDSValidatedItem_ClaimID_66224");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AsianshortcountryoriginField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortcountryoriginField");

                entity.Property(e => e.AsianshortgoldcategoryField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortgoldcategoryField");

                entity.Property(e => e.AsianshortgoldfixusedField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortgoldfixusedField");

                entity.Property(e => e.AsianshortgoldqualitypriceField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortgoldqualitypriceField");

                entity.Property(e => e.AsianshortgotweightField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortgotweightField");

                entity.Property(e => e.AsianshortgrammeweightField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortgrammeweightField");

                entity.Property(e => e.AsianshortpurchmonthField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortpurchmonthField");

                entity.Property(e => e.AsianshortpurchpriceField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortpurchpriceField");

                entity.Property(e => e.AsianshortpurchyearField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortpurchyearField");

                entity.Property(e => e.AsianshortstonesetField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortstonesetField");

                entity.Property(e => e.AsianshortweightcalculatedField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortweightcalculatedField");

                entity.Property(e => e.AsianshortweightgivenField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortweightgivenField");

                entity.Property(e => e.AsianshortweightinputstringField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortweightinputstringField");

                entity.Property(e => e.AsianshortweightinputunitsField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortweightinputunitsField");

                entity.Property(e => e.AsianshortzakatField)
                    .HasMaxLength(2000)
                    .HasColumnName("asianshortzakatField");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.ClaimamountField)
                    .HasMaxLength(2000)
                    .HasColumnName("claimamountField");

                entity.Property(e => e.ClassgroupField)
                    .HasMaxLength(2000)
                    .HasColumnName("classgroupField");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descriptiontype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("descriptiontype1Field");

                entity.Property(e => e.Descriptiontype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("descriptiontype2Field");

                entity.Property(e => e.Descriptiontype3Field)
                    .HasMaxLength(2000)
                    .HasColumnName("descriptiontype3Field");

                entity.Property(e => e.DesignercompanyidField)
                    .HasMaxLength(2000)
                    .HasColumnName("designercompanyidField");

                entity.Property(e => e.DesigneritemrefField)
                    .HasMaxLength(2000)
                    .HasColumnName("designeritemrefField");

                entity.Property(e => e.GemsetField)
                    .HasMaxLength(2000)
                    .HasColumnName("gemsetField");

                entity.Property(e => e.GiftedField)
                    .HasMaxLength(2000)
                    .HasColumnName("giftedField");

                entity.Property(e => e.GiftedbynameField)
                    .HasMaxLength(2000)
                    .HasColumnName("giftedbynameField");

                entity.Property(e => e.GiftedcountryField)
                    .HasMaxLength(2000)
                    .HasColumnName("giftedcountryField");

                entity.Property(e => e.GiftedmonthField)
                    .HasMaxLength(2000)
                    .HasColumnName("giftedmonthField");

                entity.Property(e => e.GiftednewusedField)
                    .HasMaxLength(2000)
                    .HasColumnName("giftednewusedField");

                entity.Property(e => e.GiftedvalueField)
                    .HasMaxLength(2000)
                    .HasColumnName("giftedvalueField");

                entity.Property(e => e.GiftedyearField)
                    .HasMaxLength(2000)
                    .HasColumnName("giftedyearField");

                entity.Property(e => e.Group1gemcolorclarityField)
                    .HasMaxLength(2000)
                    .HasColumnName("group1gemcolorclarityField");

                entity.Property(e => e.Group1gempriceidField).HasColumnName("group1gempriceidField");

                entity.Property(e => e.Group1gemsettingField)
                    .HasMaxLength(2000)
                    .HasColumnName("group1gemsettingField");

                entity.Property(e => e.Group1gemshapeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group1gemshapeField");

                entity.Property(e => e.Group1gemsizeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group1gemsizeField");

                entity.Property(e => e.Group1gemstonetype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group1gemstonetype1Field");

                entity.Property(e => e.Group1gemstonetype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group1gemstonetype2Field");

                entity.Property(e => e.Group1gemstotalField)
                    .HasMaxLength(2000)
                    .HasColumnName("group1gemstotalField");

                entity.Property(e => e.Group2gemcolorclarityField)
                    .HasMaxLength(2000)
                    .HasColumnName("group2gemcolorclarityField");

                entity.Property(e => e.Group2gempriceidField)
                    .HasMaxLength(2000)
                    .HasColumnName("group2gempriceidField");

                entity.Property(e => e.Group2gemsettingField)
                    .HasMaxLength(2000)
                    .HasColumnName("group2gemsettingField");

                entity.Property(e => e.Group2gemshapeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group2gemshapeField");

                entity.Property(e => e.Group2gemsizeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group2gemsizeField");

                entity.Property(e => e.Group2gemstonetype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group2gemstonetype1Field");

                entity.Property(e => e.Group2gemstonetype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group2gemstonetype2Field");

                entity.Property(e => e.Group2gemstotalField).HasColumnName("group2gemstotalField");

                entity.Property(e => e.Group3gemcolorclarityField)
                    .HasMaxLength(2000)
                    .HasColumnName("group3gemcolorclarityField");

                entity.Property(e => e.Group3gempriceidField).HasColumnName("group3gempriceidField");

                entity.Property(e => e.Group3gemsettingField)
                    .HasMaxLength(2000)
                    .HasColumnName("group3gemsettingField");

                entity.Property(e => e.Group3gemshapeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group3gemshapeField");

                entity.Property(e => e.Group3gemsizeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group3gemsizeField");

                entity.Property(e => e.Group3gemstonetype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group3gemstonetype1Field");

                entity.Property(e => e.Group3gemstonetype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group3gemstonetype2Field");

                entity.Property(e => e.Group3gemstotalField).HasColumnName("group3gemstotalField");

                entity.Property(e => e.Group4gemcolorclarityField)
                    .HasMaxLength(2000)
                    .HasColumnName("group4gemcolorclarityField");

                entity.Property(e => e.Group4gempriceidField).HasColumnName("group4gempriceidField");

                entity.Property(e => e.Group4gemsettingField)
                    .HasMaxLength(2000)
                    .HasColumnName("group4gemsettingField");

                entity.Property(e => e.Group4gemshapeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group4gemshapeField");

                entity.Property(e => e.Group4gemsizeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group4gemsizeField");

                entity.Property(e => e.Group4gemstonetype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group4gemstonetype1Field");

                entity.Property(e => e.Group4gemstonetype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group4gemstonetype2Field");

                entity.Property(e => e.Group4gemstotalField).HasColumnName("group4gemstotalField");

                entity.Property(e => e.Group5gemcolorclarityField)
                    .HasMaxLength(2000)
                    .HasColumnName("group5gemcolorclarityField");

                entity.Property(e => e.Group5gempriceidField).HasColumnName("group5gempriceidField");

                entity.Property(e => e.Group5gemsettingField)
                    .HasMaxLength(2000)
                    .HasColumnName("group5gemsettingField");

                entity.Property(e => e.Group5gemshapeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group5gemshapeField");

                entity.Property(e => e.Group5gemsizeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group5gemsizeField");

                entity.Property(e => e.Group5gemstonetype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group5gemstonetype1Field");

                entity.Property(e => e.Group5gemstonetype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group5gemstonetype2Field");

                entity.Property(e => e.Group5gemstotalField).HasColumnName("group5gemstotalField");

                entity.Property(e => e.Group6gemcolorclarityField)
                    .HasMaxLength(2000)
                    .HasColumnName("group6gemcolorclarityField");

                entity.Property(e => e.Group6gempriceidField)
                    .HasMaxLength(2000)
                    .HasColumnName("group6gempriceidField");

                entity.Property(e => e.Group6gemsettingField)
                    .HasMaxLength(2000)
                    .HasColumnName("group6gemsettingField");

                entity.Property(e => e.Group6gemshapeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group6gemshapeField");

                entity.Property(e => e.Group6gemsizeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group6gemsizeField");

                entity.Property(e => e.Group6gemstonetype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group6gemstonetype1Field");

                entity.Property(e => e.Group6gemstonetype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group6gemstonetype2Field");

                entity.Property(e => e.Group6gemstotalField)
                    .HasMaxLength(2000)
                    .HasColumnName("group6gemstotalField");

                entity.Property(e => e.Group7gemcolorclarityField)
                    .HasMaxLength(2000)
                    .HasColumnName("group7gemcolorclarityField");

                entity.Property(e => e.Group7gempriceidField)
                    .HasMaxLength(2000)
                    .HasColumnName("group7gempriceidField");

                entity.Property(e => e.Group7gemsettingField)
                    .HasMaxLength(2000)
                    .HasColumnName("group7gemsettingField");

                entity.Property(e => e.Group7gemshapeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group7gemshapeField");

                entity.Property(e => e.Group7gemsizeField)
                    .HasMaxLength(2000)
                    .HasColumnName("group7gemsizeField");

                entity.Property(e => e.Group7gemstonetype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group7gemstonetype1Field");

                entity.Property(e => e.Group7gemstonetype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("group7gemstonetype2Field");

                entity.Property(e => e.Group7gemstotalField)
                    .HasMaxLength(2000)
                    .HasColumnName("group7gemstotalField");

                entity.Property(e => e.InsurerpriceField)
                    .HasMaxLength(2000)
                    .HasColumnName("insurerpriceField");

                entity.Property(e => e.ItemdescriptionField)
                    .HasMaxLength(2000)
                    .HasColumnName("itemdescriptionField");

                entity.Property(e => e.ItemregistrationnumberField)
                    .HasMaxLength(2000)
                    .HasColumnName("itemregistrationnumberField");

                entity.Property(e => e.ManufacturetypeField)
                    .HasMaxLength(2000)
                    .HasColumnName("manufacturetypeField");

                entity.Property(e => e.Metalsubtype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metalsubtype1Field");

                entity.Property(e => e.Metalsubtype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metalsubtype2Field");

                entity.Property(e => e.Metalsubtype3Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metalsubtype3Field");

                entity.Property(e => e.Metalsubtype4Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metalsubtype4Field");

                entity.Property(e => e.Metalsubtype5Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metalsubtype5Field");

                entity.Property(e => e.Metaltype1Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metaltype1Field");

                entity.Property(e => e.Metaltype2Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metaltype2Field");

                entity.Property(e => e.Metaltype3Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metaltype3Field");

                entity.Property(e => e.Metaltype4Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metaltype4Field");

                entity.Property(e => e.Metaltype5Field)
                    .HasMaxLength(2000)
                    .HasColumnName("metaltype5Field");

                entity.Property(e => e.NumberofmetalsField)
                    .HasMaxLength(2000)
                    .HasColumnName("numberofmetalsField");

                entity.Property(e => e.NumgemstotalField).HasColumnName("numgemstotalField");

                entity.Property(e => e.PatternfinishField)
                    .HasMaxLength(2000)
                    .HasColumnName("patternfinishField");

                entity.Property(e => e.PurchasedgotreceiptField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedgotreceiptField");

                entity.Property(e => e.PurchasedmonthField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedmonthField");

                entity.Property(e => e.PurchasednewusedField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasednewusedField");

                entity.Property(e => e.PurchasedpriceField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedpriceField");

                entity.Property(e => e.PurchasedpriceinflationadjustedField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedpriceinflationadjustedField");

                entity.Property(e => e.PurchasedproofacceptedField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedproofacceptedField");

                entity.Property(e => e.PurchasedvendorcountryField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedvendorcountryField");

                entity.Property(e => e.PurchasedvendornameField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedvendornameField");

                entity.Property(e => e.PurchasedvendortownField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedvendortownField");

                entity.Property(e => e.PurchasedyearField)
                    .HasMaxLength(2000)
                    .HasColumnName("purchasedyearField");

                entity.Property(e => e.QuantumcrosssectionField)
                    .HasMaxLength(2000)
                    .HasColumnName("quantumcrosssectionField");

                entity.Property(e => e.QuantumgoldcaratField)
                    .HasMaxLength(2000)
                    .HasColumnName("quantumgoldcaratField");

                entity.Property(e => e.QuantumgraduatedField)
                    .HasMaxLength(2000)
                    .HasColumnName("quantumgraduatedField");

                entity.Property(e => e.QuantumgrammesField)
                    .HasMaxLength(2000)
                    .HasColumnName("quantumgrammesField");

                entity.Property(e => e.QuantumlengthField)
                    .HasMaxLength(2000)
                    .HasColumnName("quantumlengthField");

                entity.Property(e => e.QuantumwidthField)
                    .HasMaxLength(2000)
                    .HasColumnName("quantumwidthField");

                entity.Property(e => e.RefField).HasColumnName("refField");

                entity.Property(e => e.RetailpriceField)
                    .HasMaxLength(2000)
                    .HasColumnName("retailpriceField");

                entity.Property(e => e.ShapetypeField)
                    .HasMaxLength(2000)
                    .HasColumnName("shapetypeField");

                entity.Property(e => e.TextnoteField)
                    .HasMaxLength(2000)
                    .HasColumnName("textnoteField");

                entity.Property(e => e.Username).HasMaxLength(2000);

                entity.Property(e => e.ValidationforcedField)
                    .HasMaxLength(2000)
                    .HasColumnName("validationforcedField");
            });

            modelBuilder.Entity<JewelleryBot>(entity =>
            {
                entity.ToTable("JewelleryBot", "Claim");

                entity.Property(e => e.JewelleryBotId).HasColumnName("JewelleryBotID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.Item1Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Item2Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PerilId).HasColumnName("PerilID");

                entity.Property(e => e.Question).IsUnicode(false);

                entity.Property(e => e.QuestionId).HasColumnName("QuestionID");
            });

            modelBuilder.Entity<KeithCahnhgeinsurnceco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Keith_Cahnhgeinsurnceco", "Site");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompanyId).ValueGeneratedOnAdd();

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KeithCheckInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KeithCheckInvoice", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ISSlMiClosed).HasColumnName("i_s_sl_mi_closed");

                entity.Property(e => e.ISSlTypeCloses).HasColumnName("i_s_sl_type_closes");

                entity.Property(e => e.ISSlTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("i_s_sl_type_name");

                entity.Property(e => e.ISSlTypeTime).HasColumnName("i_s_sl_type_time");

                entity.Property(e => e.ISSlTypeTl).HasColumnName("i_s_sl_type_tl");

                entity.Property(e => e.LcshistoryId).HasColumnName("LCSHistoryID");
            });

            modelBuilder.Entity<LaAlert>(entity =>
            {
                entity.ToTable("la_alert", "Site");

                entity.Property(e => e.LaAlertId).HasColumnName("la_alert_id");

                entity.Property(e => e.LaAlertEmail)
                    .HasMaxLength(50)
                    .HasColumnName("la_alert_email")
                    .HasDefaultValueSql("(N'SBS@Liverpool-Victoria.co.uk')");

                entity.Property(e => e.LaAlertGroupId)
                    .HasColumnName("la_alert_group_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LaAlertLaId).HasColumnName("la_alert_la_id");

                entity.Property(e => e.LaAlertMethod)
                    .HasMaxLength(10)
                    .HasColumnName("la_alert_method")
                    .HasDefaultValueSql("(N'LV')");
            });

            modelBuilder.Entity<LaAlertSublevel>(entity =>
            {
                entity.HasKey(e => e.LaAlertSlId);

                entity.ToTable("la_alert_sublevel", "Site");

                entity.Property(e => e.LaAlertSlId).HasColumnName("la_alert_sl_id");

                entity.Property(e => e.LaAlertSlGroupId)
                    .HasColumnName("la_alert_sl_group_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LaAlertSlNextAction)
                    .HasMaxLength(500)
                    .HasColumnName("la_alert_sl_nextAction");

                entity.Property(e => e.LaAlertSlNumDays).HasColumnName("la_alert_sl_numDays");

                entity.Property(e => e.LaAlertSlSlId).HasColumnName("la_alert_sl_sl_id");

                entity.Property(e => e.LaAlertSlTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("la_alert_sl_type_id")
                    .HasDefaultValueSql("(N'LV')");
            });

            modelBuilder.Entity<LaGroupMember>(entity =>
            {
                entity.HasKey(e => e.GmId)
                    .HasName("PK_MI_LA_Group_Members");

                entity.ToTable("LA_Group_Members", "MI");

                entity.Property(e => e.GmId).HasColumnName("gm_id");

                entity.Property(e => e.GmGnId).HasColumnName("gm_gn_id");

                entity.Property(e => e.GmLaId).HasColumnName("gm_la_id");
            });

            modelBuilder.Entity<LaGroupName>(entity =>
            {
                entity.HasKey(e => e.GnId)
                    .HasName("PK_MI_LA_Group_Name");

                entity.ToTable("LA_Group_Name", "MI");

                entity.Property(e => e.GnId).HasColumnName("gn_id");

                entity.Property(e => e.GnName)
                    .HasMaxLength(150)
                    .HasColumnName("gn_name");
            });

            modelBuilder.Entity<LaLagroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LA_LAGroup", "MI");

                entity.Property(e => e.LlgGroupId).HasColumnName("llg_GroupID");

                entity.Property(e => e.LlgId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("llg_ID");

                entity.Property(e => e.LlgLossadjusterId).HasColumnName("llg_LossadjusterID");
            });

            modelBuilder.Entity<Lagroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LAGroup", "MI");

                entity.Property(e => e.LgId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("lg_ID");

                entity.Property(e => e.LgName)
                    .HasMaxLength(100)
                    .HasColumnName("lg_Name");
            });

            modelBuilder.Entity<LastClosedStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LastClosedStatus", "MI");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.LcshistoryId).HasColumnName("LCSHistoryID");
            });

            modelBuilder.Entity<LastFewJanuaryClaimsWithoutOutcomesToGoLive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("lastFewJanuaryClaimsWithoutOutcomesToGoLive");

                entity.Property(e => e.ClaimId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("claim_id");

                entity.Property(e => e.Outcome)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LatePo>(entity =>
            {
                entity.HasKey(e => e.LpId);

                entity.ToTable("Late_PO", "Accounts");

                entity.Property(e => e.LpId).HasColumnName("lp_id");

                entity.Property(e => e.LpClaimId).HasColumnName("lp_claim_id");

                entity.Property(e => e.LpClaimOrderId).HasColumnName("lp_ClaimOrderId");

                entity.Property(e => e.LpNotes)
                    .HasMaxLength(4000)
                    .HasColumnName("lp_notes");

                entity.Property(e => e.LpPodId).HasColumnName("lp_pod_id");

                entity.Property(e => e.LpPomId).HasColumnName("lp_pom_id");

                entity.Property(e => e.LpStatus).HasColumnName("lp_status");

                entity.Property(e => e.LpUserId).HasColumnName("lp_user_id");
            });

            modelBuilder.Entity<Lbguser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LBGUsers", "Validation");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<LgBordereau>(entity =>
            {
                entity.HasKey(e => e.LgbId);

                entity.ToTable("LG_Bordereau", "Accounts");

                entity.Property(e => e.LgbId).HasColumnName("lgb_id");

                entity.Property(e => e.LgbDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lgb_date");

                entity.Property(e => e.LgbExcess)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lgb_excess");

                entity.Property(e => e.LgbExcessFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("lgb_excess_flag")
                    .IsFixedLength();

                entity.Property(e => e.LgbFI)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("lgb_F_I")
                    .IsFixedLength();

                entity.Property(e => e.LgbFeeCon)
                    .HasMaxLength(10)
                    .HasColumnName("lgb_fee_con");

                entity.Property(e => e.LgbGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("lgb_gross");

                entity.Property(e => e.LgbInvNo).HasColumnName("lgb_inv_no");

                entity.Property(e => e.LgbLaRef)
                    .HasMaxLength(20)
                    .HasColumnName("lgb_la_ref");

                entity.Property(e => e.LgbPostcode)
                    .HasMaxLength(20)
                    .HasColumnName("lgb_postcode");

                entity.Property(e => e.LgbSimId).HasColumnName("lgb_sim_id");
            });

            modelBuilder.Entity<LittleJotter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LittleJotter", "Claim");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ClaimNote).HasMaxLength(4000);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("Logs_pk")
                    .IsClustered(false);

                entity.ToTable("Logs", "Logging");

                entity.HasIndex(e => e.LogId, "Logs_LogID_uindex")
                    .IsUnique();

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AdditionalComments).HasMaxLength(1000);

                entity.Property(e => e.EventTime).HasColumnType("datetime");

                entity.Property(e => e.ExceptionMessage).HasMaxLength(1000);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<LoginAttempt>(entity =>
            {
                entity.ToTable("LoginAttempt", "PolicyHolderPortal");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttemptTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ClaimId)
                    .HasMaxLength(10)
                    .HasColumnName("ClaimID");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(40)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.Postcode).HasMaxLength(10);
            });

            modelBuilder.Entity<LoginHistory>(entity =>
            {
                entity.ToTable("LoginHistory", "Role");

                entity.HasIndex(e => new { e.UserId, e.Date }, "_dta_index_LoginHistory_8_1537440551__K2_K3");

                entity.HasIndex(e => e.Date, "_dta_index_LoginHistory_8_1537440551__K3");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.LoginHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LoginHistory_User");
            });

            modelBuilder.Entity<LossAdjuster>(entity =>
            {
                entity.ToTable("LossAdjuster", "Site");

                entity.HasIndex(e => e.Deleted, "IXNC_LossAdjuster_Deleted_66E77");

                entity.HasIndex(e => new { e.LossAdjusterId, e.InsCompanyId, e.AccountName }, "_dta_index_LossAdjuster_9_1677249030__K1_K32_K4");

                entity.HasIndex(e => new { e.LossAdjusterId, e.AccountName }, "_dta_index_LossAdjuster_9_1677249030__K1_K4");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AccountsNotes).HasMaxLength(4000);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InsCompanyId)
                    .HasColumnName("InsCompanyID")
                    .HasDefaultValueSql("((14))");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress")
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.LossAdjusterGroupId).HasDefaultValueSql("((0))");

                entity.Property(e => e.MinimumValueToQuote)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.NfuType)
                    .HasColumnName("NFU_Type")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PostCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId)
                    .HasColumnName("RegionID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AAA')");

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.InsCompany)
                    .WithMany(p => p.LossAdjusters)
                    .HasForeignKey(d => d.InsCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LossAdjuster_LossAdjuster");
            });

            modelBuilder.Entity<LossAdjusterUpdate>(entity =>
            {
                entity.HasKey(e => e.LauId);

                entity.ToTable("LossAdjusterUpdates", "Site");

                entity.Property(e => e.LauId).HasColumnName("lau_ID");

                entity.Property(e => e.LauClaimId).HasColumnName("lau_ClaimID");

                entity.Property(e => e.LauContactMethod)
                    .HasMaxLength(200)
                    .HasColumnName("lau_ContactMethod");

                entity.Property(e => e.LauDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lau_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LauDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lau_DeliveryDate");

                entity.Property(e => e.LauDetails)
                    .HasMaxLength(1000)
                    .HasColumnName("lau_Details");

                entity.Property(e => e.LauFirstContact).HasColumnName("lau_FirstContact");

                entity.Property(e => e.LauNextAction)
                    .HasMaxLength(200)
                    .HasColumnName("lau_NextAction");

                entity.Property(e => e.LauNextActionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lau_NextActionDate");

                entity.Property(e => e.LauSent).HasColumnName("lau_Sent");

                entity.Property(e => e.LauStatusName)
                    .HasMaxLength(100)
                    .HasColumnName("lau_StatusName");
            });

            modelBuilder.Entity<Markup>(entity =>
            {
                entity.ToTable("Markup", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.InsuranceCompanyId)
                    .HasColumnName("InsuranceCompanyID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Markup1).HasColumnName("Markup");
            });

            modelBuilder.Entity<MazumaOrderImei>(entity =>
            {
                entity.HasKey(e => e.MazumaId);

                entity.ToTable("MazumaOrderIMEI", "Claim");

                entity.Property(e => e.MazumaId).HasColumnName("Mazuma_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.Imei)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IMEI");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MazumaDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Mazuma_Date");

                entity.Property(e => e.PoNumber).HasColumnName("PO_Number");

                entity.Property(e => e.Product)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Product_Type");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.ToTable("Menu", "Site");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((50))");

                entity.Property(e => e.FeatherIcon).HasMaxLength(50);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.PathId).HasColumnName("PathID");

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.ToTable("Message", "phoneapp");

                entity.HasIndex(e => e.ClaimId, "IXNC_Message_ClaimID_2EF4D");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BarCodeData).HasMaxLength(200);

                entity.Property(e => e.BarCodeType).HasMaxLength(200);

                entity.Property(e => e.CallBackDateTime).HasColumnType("datetime");

                entity.Property(e => e.CallBackMpn)
                    .HasMaxLength(200)
                    .HasColumnName("CallBackMPN");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Datelogged)
                    .HasColumnType("datetime")
                    .HasColumnName("datelogged")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Deleted).HasColumnName("deleted");

                entity.Property(e => e.Jsonmessage).HasColumnName("JSONMessage");

                entity.Property(e => e.Message1).HasColumnName("Message");

                entity.Property(e => e.MessageSubject).HasMaxLength(200);

                entity.Property(e => e.MessageType).HasMaxLength(200);

                entity.Property(e => e.PaymentTaken).HasMaxLength(200);

                entity.Property(e => e.ProductDescription).HasMaxLength(2000);

                entity.Property(e => e.Productid).HasColumnName("productid");
            });

            modelBuilder.Entity<Message1>(entity =>
            {
                entity.ToTable("Message", "RiverDynamics");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MessageType).HasMaxLength(200);
            });

            modelBuilder.Entity<Message2>(entity =>
            {
                entity.HasKey(e => e.MsgId);

                entity.ToTable("Messages", "Site");

                entity.HasIndex(e => e.MsgRead, "IXNC_Messages_MsgRead_7A72A");

                entity.Property(e => e.MsgArchive).HasDefaultValueSql("((0))");

                entity.Property(e => e.MsgClaimId).HasDefaultValueSql("((0))");

                entity.Property(e => e.MsgComplete).HasColumnType("smalldatetime");

                entity.Property(e => e.MsgRead).HasColumnType("smalldatetime");

                entity.Property(e => e.MsgSent)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MsgText).HasColumnType("ntext");

                entity.Property(e => e.MsgThread).HasDefaultValueSql("((0))");

                entity.Property(e => e.MsgTitle).HasMaxLength(200);

                entity.Property(e => e.MsgType).HasDefaultValueSql("((0))");

                entity.Property(e => e.Msgoutcome).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MessageImage>(entity =>
            {
                entity.ToTable("MessageImage", "phoneapp");

                entity.HasIndex(e => e.MessageId, "IXNC_MessageImage_MessageId_B4E89");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ImageType).HasMaxLength(200);

                entity.Property(e => e.MimeType).HasMaxLength(50);
            });

            modelBuilder.Entity<MessageOutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MessageOutcomes", "Site");

                entity.Property(e => e.MsgOutcome).HasMaxLength(200);

                entity.Property(e => e.MsgOutcomeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MsgOutcomeID");
            });

            modelBuilder.Entity<MessageProduct>(entity =>
            {
                entity.ToTable("MessageProduct", "phoneapp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.BarCodeData).HasMaxLength(200);

                entity.Property(e => e.BarCodeScanned).HasDefaultValueSql("((0))");

                entity.Property(e => e.BarCodeType).HasMaxLength(200);

                entity.Property(e => e.Brand).HasMaxLength(200);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Insurer).HasMaxLength(200);

                entity.Property(e => e.JewelleryType).HasMaxLength(200);

                entity.Property(e => e.Laref)
                    .HasMaxLength(200)
                    .HasColumnName("LARef");

                entity.Property(e => e.Length).HasMaxLength(200);

                entity.Property(e => e.MessageType).HasMaxLength(200);

                entity.Property(e => e.Model).HasMaxLength(200);

                entity.Property(e => e.OrigionalProductId).HasColumnName("OrigionalProductID");

                entity.Property(e => e.PolicyName).HasMaxLength(200);

                entity.Property(e => e.PostalCode).HasMaxLength(200);

                entity.Property(e => e.ProductDescription).HasMaxLength(2000);

                entity.Property(e => e.Productid).HasColumnName("productid");

                entity.Property(e => e.RoomType).HasMaxLength(2000);

                entity.Property(e => e.Width).HasMaxLength(200);

                entity.HasOne(d => d.Message)
                    .WithMany(p => p.MessageProducts)
                    .HasForeignKey(d => d.Messageid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MessageProduct_Message");
            });

            modelBuilder.Entity<MessageProductRoom>(entity =>
            {
                entity.ToTable("MessageProductRoom", "phoneapp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Length).HasMaxLength(200);

                entity.Property(e => e.RoomType).HasMaxLength(200);

                entity.Property(e => e.Width).HasMaxLength(200);
            });

            modelBuilder.Entity<MessageType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MessageTypes", "Site");

                entity.Property(e => e.MsgType).HasMaxLength(200);

                entity.Property(e => e.MsgTypeFrom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MsgTypeId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<MetalCaratValue>(entity =>
            {
                entity.ToTable("MetalCaratValues", "Jewellery");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratId).HasColumnName("CaratID");
            });

            modelBuilder.Entity<Missingclaimsstatus1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("missingclaimsstatus1", "Site");

                entity.Property(e => e.Cb1)
                    .HasMaxLength(32)
                    .HasColumnName("cb1");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .HasColumnName("comment");

                entity.Property(e => e.Dc1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dc1");

                entity.Property(e => e.Dm1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dm1");

                entity.Property(e => e.Mb1)
                    .HasMaxLength(32)
                    .HasColumnName("mb1");

                entity.Property(e => e.Statdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("statdate");

                entity.Property(e => e.Statid).HasColumnName("statid");
            });

            modelBuilder.Entity<Monthly>(entity =>
            {
                entity.HasKey(e => e.MiId);

                entity.ToTable("Monthly", "MI");

                entity.HasIndex(e => new { e.Closex, e.ItemTypeId }, "IXNC_Monthly_Closex_Item_Type_id_386EA");

                entity.HasIndex(e => new { e.Closex, e.SubCauseTypeId }, "IXNC_Monthly_Closex_Sub_Cause_Type_Id_A147B");

                entity.HasIndex(e => e.Consignment, "IXNC_Monthly_Consignment_BAE10");

                entity.HasIndex(e => new { e.MiCat, e.Closex }, "IXNC_Monthly_MI_Cat_Closex_1353F");

                entity.HasIndex(e => new { e.MiCat, e.Closex, e.Lossadjusterid, e.ItemTypeId }, "IXNC_Monthly_MI_Cat_Closex_Lossadjusterid_Item_Type_id_97326");

                entity.HasIndex(e => e.OpenDate, "IXNC_Monthly_Open_date_7D6D9");

                entity.HasIndex(e => new { e.OpenDate, e.Closed, e.Closex }, "_dta_index_Monthly_16_257435991__K7_K4_K17_2");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.FnolCategoryId).HasColumnName("Fnol_category_id");

                entity.Property(e => e.FnolItemTypeId).HasColumnName("Fnol_Item_Type_id");

                entity.Property(e => e.FnolPerilDetailId).HasColumnName("Fnol_Peril_Detail_id");

                entity.Property(e => e.FnolPerilId).HasColumnName("Fnol_Peril_id");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.Newclosedate)
                    .HasColumnType("date")
                    .HasColumnName("newclosedate");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Monthly20140406Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_20140406_err", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.FnolCategoryId).HasColumnName("Fnol_category_id");

                entity.Property(e => e.FnolItemTypeId).HasColumnName("Fnol_Item_Type_id");

                entity.Property(e => e.FnolPerilDetailId).HasColumnName("Fnol_Peril_Detail_id");

                entity.Property(e => e.FnolPerilId).HasColumnName("Fnol_Peril_id");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.Newclosedate)
                    .HasColumnType("date")
                    .HasColumnName("newclosedate");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Monthly20140510Err>(entity =>
            {
                entity.HasKey(e => e.MiId)
                    .HasName("PK_MI_Monthly");

                entity.ToTable("Monthly_20140510_err", "MI");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.FnolCategoryId).HasColumnName("Fnol_category_id");

                entity.Property(e => e.FnolItemTypeId).HasColumnName("Fnol_Item_Type_id");

                entity.Property(e => e.FnolPerilDetailId).HasColumnName("Fnol_Peril_Detail_id");

                entity.Property(e => e.FnolPerilId).HasColumnName("Fnol_Peril_id");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.Newclosedate)
                    .HasColumnType("date")
                    .HasColumnName("newclosedate");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Monthly20141702>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_20141702", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.FnolCategoryId).HasColumnName("Fnol_category_id");

                entity.Property(e => e.FnolItemTypeId).HasColumnName("Fnol_Item_Type_id");

                entity.Property(e => e.FnolPerilDetailId).HasColumnName("Fnol_Peril_Detail_id");

                entity.Property(e => e.FnolPerilId).HasColumnName("Fnol_Peril_id");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.Newclosedate)
                    .HasColumnType("date")
                    .HasColumnName("newclosedate");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<MonthlyDelete>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_delete", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<MonthlyNewClaim>(entity =>
            {
                entity.ToTable("MonthlyNewClaims", "MI");

                entity.HasIndex(e => e.ClaimRef, "IXNC_MonthlyNewClaims_ClaimRef_B7D6F");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountName).HasMaxLength(255);

                entity.Property(e => e.Commodity).HasMaxLength(255);

                entity.Property(e => e.DateClosed)
                    .HasColumnType("datetime")
                    .HasColumnName("Date closed");

                entity.Property(e => e.DeliverypostCode).HasMaxLength(255);

                entity.Property(e => e.ForTheMonth)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("For_The_Month");

                entity.Property(e => e.ForTheYear).HasColumnName("For_The_Year");

                entity.Property(e => e.InstructionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction date");

                entity.Property(e => e.Laid).HasColumnName("LAid");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(255)
                    .HasColumnName("LAReference");

                entity.Property(e => e.PolicyNumber).HasMaxLength(255);

                entity.Property(e => e.UserName).HasMaxLength(255);
            });

            modelBuilder.Entity<MonthlyOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_old", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<MonthlyOld2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_old2", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.FnolCategoryId).HasColumnName("Fnol_category_id");

                entity.Property(e => e.FnolItemTypeId).HasColumnName("Fnol_Item_Type_id");

                entity.Property(e => e.FnolPerilDetailId).HasColumnName("Fnol_Peril_Detail_id");

                entity.Property(e => e.FnolPerilId).HasColumnName("Fnol_Peril_id");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.Newclosedate)
                    .HasColumnType("date")
                    .HasColumnName("newclosedate");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<MonthlyOldversion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_oldversion", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<MonthlyPdh>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_pdh", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.FnolCategoryId).HasColumnName("Fnol_category_id");

                entity.Property(e => e.FnolItemTypeId).HasColumnName("Fnol_Item_Type_id");

                entity.Property(e => e.FnolPerilDetailId).HasColumnName("Fnol_Peril_Detail_id");

                entity.Property(e => e.FnolPerilId).HasColumnName("Fnol_Peril_id");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.Newclosedate)
                    .HasColumnType("date")
                    .HasColumnName("newclosedate");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<MonthlySteve>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_Steve", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore)
                    .HasColumnName("bi_score")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi)
                    .HasColumnName("hasbi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<MonthlyTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Monthly_Temp", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.BiScore).HasColumnName("bi_score");

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.Claimtime).HasColumnName("claimtime");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.CurrentStatus).HasColumnName("Current_Status");

                entity.Property(e => e.CvCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_cost");

                entity.Property(e => e.CvInspCost)
                    .HasColumnType("money")
                    .HasColumnName("cv_insp_cost");

                entity.Property(e => e.CvSample).HasColumnName("cv_sample");

                entity.Property(e => e.CvSaving)
                    .HasColumnType("money")
                    .HasColumnName("cv_saving");

                entity.Property(e => e.CvValue)
                    .HasColumnType("money")
                    .HasColumnName("cv_value");

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.FnolCategoryId).HasColumnName("Fnol_category_id");

                entity.Property(e => e.FnolItemTypeId).HasColumnName("Fnol_Item_Type_id");

                entity.Property(e => e.FnolPerilDetailId).HasColumnName("Fnol_Peril_Detail_id");

                entity.Property(e => e.FnolPerilId).HasColumnName("Fnol_Peril_id");

                entity.Property(e => e.GrossRepair).HasColumnType("money");

                entity.Property(e => e.GrossReplace).HasColumnType("money");

                entity.Property(e => e.Hasbi).HasColumnName("hasbi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.MiVer).HasColumnName("mi_ver");

                entity.Property(e => e.Newclosedate)
                    .HasColumnType("date")
                    .HasColumnName("newclosedate");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<Mpn>(entity =>
            {
                entity.ToTable("MPN", "Amazon");

                entity.HasIndex(e => e.ItemId, "_dta_index_MPN_16_1580584719__K2_1");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Mpn1)
                    .HasMaxLength(200)
                    .HasColumnName("MPN");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Mpns)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPN_Item");
            });

            modelBuilder.Entity<NMiClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nMI_Claims", "MI");

                entity.Property(e => e.AccidentComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AliasInsuranceClaimId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.Carriage).HasColumnType("money");

                entity.Property(e => e.ClaimDetails)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimValue).HasColumnType("money");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.Consignment)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("consignment");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CreditPhRaised).HasColumnName("Credit_Ph_Raised");

                entity.Property(e => e.CreditPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Raised_Date");

                entity.Property(e => e.CreditPhReq).HasColumnName("Credit_Ph_Req");

                entity.Property(e => e.CreditPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Req_Date");

                entity.Property(e => e.CreditPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Ph_Sage");

                entity.Property(e => e.CreditPhSync).HasColumnName("Credit_Ph_Sync");

                entity.Property(e => e.CreditPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Sync_Date");

                entity.Property(e => e.CreditPhVat).HasColumnName("Credit_Ph_VAT");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DateXschanged)
                    .HasColumnType("datetime")
                    .HasColumnName("DateXSChanged");

                entity.Property(e => e.DeliveryAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.Fnolaccepted).HasColumnName("FNOLAccepted");

                entity.Property(e => e.Handler)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Title)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredCompanyName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredTitle)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InvPhRaised).HasColumnName("Inv_Ph_Raised");

                entity.Property(e => e.InvPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Raised_Date");

                entity.Property(e => e.InvPhReq).HasColumnName("Inv_Ph_Req");

                entity.Property(e => e.InvPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Req_Date");

                entity.Property(e => e.InvPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Ph_Sage");

                entity.Property(e => e.InvPhSync).HasColumnName("Inv_Ph_Sync");

                entity.Property(e => e.InvPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Sync_Date");

                entity.Property(e => e.InvPhVat).HasColumnName("Inv_Ph_VAT");

                entity.Property(e => e.InvVatPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_VAT_Ph_Sage");

                entity.Property(e => e.InvoiceCarriage).HasColumnType("money");

                entity.Property(e => e.InvoiceValue).HasColumnType("money");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.IsInsuredAcompany).HasColumnName("IsInsuredACompany");

                entity.Property(e => e.IsVatregistered).HasColumnName("IsVATRegistered");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.LastActionDate).HasColumnType("datetime");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Pocarriage)
                    .HasColumnType("money")
                    .HasColumnName("POCarriage");

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Povalue)
                    .HasColumnType("money")
                    .HasColumnName("POValue");

                entity.Property(e => e.Profit).HasColumnType("money");

                entity.Property(e => e.QuoteComments)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.SingleArticleLimit).HasColumnType("money");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VatregistrationNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("VATRegistrationNumber");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.XschangedBy)
                    .HasMaxLength(50)
                    .HasColumnName("XSChangedBy");

                entity.Property(e => e.Xspaid).HasColumnName("XSPaid");
            });

            modelBuilder.Entity<NMiClaimStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nMI_ClaimStatus", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentStatus)
                    .HasMaxLength(50)
                    .HasColumnName("currentStatus");

                entity.Property(e => e.ISSlTypeCloses).HasColumnName("i_s_sl_type_closes");

                entity.Property(e => e.ISSlTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("i_s_sl_type_name");

                entity.Property(e => e.IStatusSlHistClaimId).HasColumnName("i_status_sl_hist_claim_id");

                entity.Property(e => e.IStatusSlHistDate)
                    .HasColumnType("datetime")
                    .HasColumnName("i_status_sl_hist_date");

                entity.Property(e => e.IStatusSlHistId).HasColumnName("i_status_sl_hist_id");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.IStatusSlHistUserId).HasColumnName("i_status_sl_hist_user_id");

                entity.Property(e => e.Ntlogon)
                    .HasMaxLength(50)
                    .HasColumnName("NTLogon");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NMiSage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nMi_sage", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.CarrGross).HasColumnName("CARR_GROSS");

                entity.Property(e => e.CarrNet).HasColumnName("CARR_NET");

                entity.Property(e => e.CarrTax).HasColumnName("CARR_TAX");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("consignment");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.InvoiceGross).HasColumnName("INVOICE_GROSS");

                entity.Property(e => e.InvoiceNet).HasColumnName("INVOICE_NET");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceTax).HasColumnName("INVOICE_TAX");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<NSla58>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSLA_58", "MI");

                entity.Property(e => e.Firstdate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstdate");

                entity.Property(e => e.IStatusSlHistDate)
                    .HasColumnType("datetime")
                    .HasColumnName("i_status_sl_hist_date");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.Std1)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("std1")
                    .IsFixedLength();

                entity.Property(e => e.Tdiff).HasColumnName("tdiff");
            });

            modelBuilder.Entity<NSla581>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSLA_58_1", "MI");

                entity.Property(e => e.Claimid).HasColumnName("claimid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<NSla582>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSla_58_2", "MI");

                entity.Property(e => e.Ccount).HasColumnName("ccount");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Firstdate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstdate");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");
            });

            modelBuilder.Entity<NSla591>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSLA_59_1", "MI");

                entity.Property(e => e.Claimid).HasColumnName("claimid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<NSla592>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSla_59_2", "MI");

                entity.Property(e => e.Ccount).HasColumnName("ccount");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Firstdate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstdate");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");
            });

            modelBuilder.Entity<NSla60>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSla_60", "MI");

                entity.Property(e => e.Claimid).HasColumnName("claimid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<NSla61>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSla_61", "MI");

                entity.Property(e => e.Claimid).HasColumnName("claimid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<NSla62>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSLA_62", "Site");

                entity.Property(e => e.Claimid).HasColumnName("claimid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<NSla631>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSLA_63_1", "MI");

                entity.Property(e => e.Claimid).HasColumnName("claimid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<NSla632>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSla_63_2", "MI");

                entity.Property(e => e.Ccount).HasColumnName("ccount");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Firstdate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstdate");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");
            });

            modelBuilder.Entity<NSla64>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSla_64", "Site");

                entity.Property(e => e.Enddate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<NSla66>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSla_66", "MI");

                entity.Property(e => e.Claimid).HasColumnName("claimid");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Enddate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<NSla671>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nSLA_67_1", "MI");

                entity.Property(e => e.Callcount).HasColumnName("callcount");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<NTblCall>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblCalls", "MI");

                entity.HasIndex(e => e.CallProfId, "IXNC_nTblCalls_CallProfID_D84AB");

                entity.Property(e => e.CallId).HasColumnName("CallID");

                entity.Property(e => e.CallNotes).HasColumnType("ntext");

                entity.Property(e => e.CallOn).HasColumnType("smalldatetime");

                entity.Property(e => e.CallProfId).HasColumnName("CallProfID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.WarrantyClaimId).HasColumnName("WarrantyClaimID");
            });

            modelBuilder.Entity<NTblCallProfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblCallProfiles", "MI");

                entity.Property(e => e.CallProfId).HasColumnName("CallProfID");

                entity.Property(e => e.EventId).HasColumnName("EventID");
            });

            modelBuilder.Entity<NTblCallReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblCallReason", "MI");

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");
            });

            modelBuilder.Entity<NTblCallType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblCallType", "MI");

                entity.Property(e => e.CallType).HasMaxLength(255);
            });

            modelBuilder.Entity<NTblCaller>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblCaller", "MI");

                entity.Property(e => e.Caller).HasMaxLength(255);

                entity.Property(e => e.CallerId).HasColumnName("CallerID");
            });

            modelBuilder.Entity<NTblCustomerAttitude>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblCustomerAttitude", "MI");

                entity.Property(e => e.CaClaimId).HasColumnName("ca_ClaimId");

                entity.Property(e => e.CaConcernDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("ca_ConcernDetails");

                entity.Property(e => e.CaEvasive).HasColumnName("ca_Evasive");

                entity.Property(e => e.CaHostile).HasColumnName("ca_Hostile");

                entity.Property(e => e.CaId).HasColumnName("ca_Id");

                entity.Property(e => e.CaInformedNextSteps).HasColumnName("ca_InformedNextSteps");

                entity.Property(e => e.CaOtherConcerns).HasColumnName("ca_OtherConcerns");

                entity.Property(e => e.CaProductUnderYear).HasColumnName("ca_ProductUnderYear");

                entity.Property(e => e.CaPushy).HasColumnName("ca_Pushy");

                entity.Property(e => e.CaQuestionableCircumstances).HasColumnName("ca_QuestionableCircumstances");

                entity.Property(e => e.CaSubstantiation)
                    .HasColumnType("ntext")
                    .HasColumnName("ca_Substantiation");

                entity.Property(e => e.CaUnsatisfactoryDocumentation).HasColumnName("ca_UnsatisfactoryDocumentation");
            });

            modelBuilder.Entity<NTblDpa>(entity =>
            {
                entity.ToTable("nTblDPA", "nCompass");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<NTblHoliday>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblHolidays", "MI");

                entity.Property(e => e.HolidayDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<NTblMessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblMessages", "MI");

                entity.Property(e => e.MsgComplete).HasColumnType("smalldatetime");

                entity.Property(e => e.MsgRead).HasColumnType("smalldatetime");

                entity.Property(e => e.MsgSent).HasColumnType("smalldatetime");

                entity.Property(e => e.MsgText).HasColumnType("ntext");

                entity.Property(e => e.MsgTitle).HasMaxLength(200);
            });

            modelBuilder.Entity<NTblMessageOutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblMessageOutcomes", "MI");

                entity.Property(e => e.MsgOutcome).HasMaxLength(200);

                entity.Property(e => e.MsgOutcomeId).HasColumnName("MsgOutcomeID");
            });

            modelBuilder.Entity<NTblMessageType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblMessageTypes", "MI");

                entity.Property(e => e.MsgType).HasMaxLength(200);

                entity.Property(e => e.MsgTypeFrom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<NTblPortalAssoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblPortalAssoc", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");
            });

            modelBuilder.Entity<NTblTitle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTblTitles", "MI");

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.TitleId).HasColumnName("Title_ID");
            });

            modelBuilder.Entity<NTblcriterion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nTBLCriteria", "MI");

                entity.Property(e => e.Criteria).HasMaxLength(50);

                entity.Property(e => e.CriteriaId).HasColumnName("CriteriaID");
            });

            modelBuilder.Entity<NViewInspection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("nView_Inspections", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SCreatedon)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_createdon");

                entity.Property(e => e.SFContact)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_contact");

                entity.Property(e => e.SFPhone)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_phone");

                entity.Property(e => e.SFPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_postcode");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NcTblBiCallFlow>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTbl_BI_CallFlow", "nCompass");

                entity.Property(e => e.CallFlowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CallFlow_ID");

                entity.Property(e => e.CallFlowOrder).HasColumnName("CallFlow_Order");

                entity.Property(e => e.CallFlowStageId).HasColumnName("CallFlow_Stage_ID");

                entity.Property(e => e.CallFlowText)
                    .HasColumnType("ntext")
                    .HasColumnName("CallFlow_Text");

                entity.Property(e => e.CallFlowTypeId).HasColumnName("CallFlowType_ID");
            });

            modelBuilder.Entity<NcTblBiCallFlowStage>(entity =>
            {
                entity.HasKey(e => e.CallFlowRelId);

                entity.ToTable("ncTbl_BI_CallFlowStage", "nCompass");

                entity.Property(e => e.CallFlowRelId).HasColumnName("CallFlow_Rel_ID");

                entity.Property(e => e.BiTypeId).HasColumnName("BI_Type_ID");

                entity.Property(e => e.CallFlowStage)
                    .HasMaxLength(250)
                    .HasColumnName("CallFlow_Stage");

                entity.Property(e => e.CallFlowStageId).HasColumnName("CallFlow_Stage_ID");

                entity.Property(e => e.CallFlowStageOrder).HasColumnName("CallFlow_Stage_Order");

                entity.Property(e => e.CallFlowText)
                    .HasColumnType("ntext")
                    .HasColumnName("CallFlow_Text");

                entity.Property(e => e.CallFlowTypeId)
                    .HasColumnName("CallFlow_Type_ID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DisplayName).HasMaxLength(250);

                entity.Property(e => e.ScenarioId).HasColumnName("ScenarioID");
            });

            modelBuilder.Entity<NcTblBiCallFlowType>(entity =>
            {
                entity.HasKey(e => e.CallFlowTypeId);

                entity.ToTable("ncTbl_BI_CallFlowType", "nCompass");

                entity.Property(e => e.CallFlowTypeId).HasColumnName("CallFlow_Type_ID");

                entity.Property(e => e.CallFlowTypeText)
                    .HasMaxLength(50)
                    .HasColumnName("CallFlow_Type_Text");
            });

            modelBuilder.Entity<NcTblBiDescription>(entity =>
            {
                entity.HasKey(e => e.BiDescriptionId);

                entity.ToTable("ncTbl_BI_Description", "nCompass");

                entity.Property(e => e.BiDescriptionId).HasColumnName("BI_Description_ID");

                entity.Property(e => e.BiDescription)
                    .HasMaxLength(200)
                    .HasColumnName("BI_Description");

                entity.Property(e => e.BiStageId).HasColumnName("BI_Stage_ID");

                entity.Property(e => e.BiTypeId).HasColumnName("BI_Type_ID");

                entity.HasOne(d => d.BiType)
                    .WithMany(p => p.NcTblBiDescriptions)
                    .HasForeignKey(d => d.BiTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ncTbl_BI_Description_ncTbl_BI_Types");
            });

            modelBuilder.Entity<NcTblBiOption>(entity =>
            {
                entity.HasKey(e => e.BiOptionId);

                entity.ToTable("ncTBl_BI_Options", "nCompass");

                entity.Property(e => e.BiOptionId).HasColumnName("BI_Option_ID");

                entity.Property(e => e.BiControl)
                    .HasMaxLength(10)
                    .HasColumnName("BI_Control");

                entity.Property(e => e.BiDescriptionId).HasColumnName("BI_Description_ID");

                entity.Property(e => e.BiOption)
                    .HasMaxLength(50)
                    .HasColumnName("BI_Option");

                entity.Property(e => e.BiScore).HasColumnName("BI_Score");
            });

            modelBuilder.Entity<NcTblBiResponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTbl_BI_Response", "nCompass");

                entity.Property(e => e.BiDescriptionId).HasColumnName("BI_description_Id");

                entity.Property(e => e.BiOptionId).HasColumnName("BI_Option_ID");

                entity.Property(e => e.BiResponseId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BI_Response_ID");

                entity.Property(e => e.BiScore).HasColumnName("BI_Score");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<NcTblBiType>(entity =>
            {
                entity.HasKey(e => e.BiTypeId);

                entity.ToTable("ncTbl_BI_Types", "nCompass");

                entity.Property(e => e.BiTypeId).HasColumnName("BI_Type_ID");

                entity.Property(e => e.BiTypeDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("BI_Type_Description");
            });

            modelBuilder.Entity<NcTblCBiCallFlow>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTblC_BI_CallFlow", "nCompass");

                entity.Property(e => e.CallFlowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CallFlow_ID");

                entity.Property(e => e.CallFlowOrder).HasColumnName("CallFlow_Order");

                entity.Property(e => e.CallFlowStageId).HasColumnName("CallFlow_Stage_ID");

                entity.Property(e => e.CallFlowText)
                    .HasColumnType("ntext")
                    .HasColumnName("CallFlow_Text");

                entity.Property(e => e.CallFlowTypeId).HasColumnName("CallFlowType_ID");
            });

            modelBuilder.Entity<NcTblCBiCallFlowStage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTblC_BI_CallFlowStage", "nCompass");

                entity.Property(e => e.BiTypeId).HasColumnName("BI_Type_ID");

                entity.Property(e => e.CallFlowRelId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CallFlow_Rel_ID");

                entity.Property(e => e.CallFlowStage)
                    .HasMaxLength(250)
                    .HasColumnName("CallFlow_Stage");

                entity.Property(e => e.CallFlowStageId).HasColumnName("CallFlow_Stage_ID");

                entity.Property(e => e.CallFlowStageOrder).HasColumnName("CallFlow_Stage_Order");

                entity.Property(e => e.CallFlowText)
                    .HasColumnType("ntext")
                    .HasColumnName("CallFlow_Text");

                entity.Property(e => e.CallFlowTypeId).HasColumnName("CallFlow_Type_ID");
            });

            modelBuilder.Entity<NcTblCBiCallFlowType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTblC_BI_CallFlowType", "nCompass");

                entity.Property(e => e.CallFlowTypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CallFlow_Type_ID");

                entity.Property(e => e.CallFlowTypeText)
                    .HasMaxLength(50)
                    .HasColumnName("CallFlow_Type_Text");
            });

            modelBuilder.Entity<NcTblCBiDescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTblC_BI_Description", "nCompass");

                entity.Property(e => e.BiDescription)
                    .HasMaxLength(200)
                    .HasColumnName("BI_Description");

                entity.Property(e => e.BiDescriptionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BI_Description_ID");

                entity.Property(e => e.BiStageId).HasColumnName("BI_Stage_ID");

                entity.Property(e => e.BiTypeId).HasColumnName("BI_Type_ID");
            });

            modelBuilder.Entity<NcTblCBiOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTBlC_BI_Options", "nCompass");

                entity.Property(e => e.BiControl)
                    .HasMaxLength(10)
                    .HasColumnName("BI_Control");

                entity.Property(e => e.BiDescriptionId).HasColumnName("BI_Description_ID");

                entity.Property(e => e.BiOption)
                    .HasMaxLength(50)
                    .HasColumnName("BI_Option");

                entity.Property(e => e.BiOptionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BI_Option_ID");

                entity.Property(e => e.BiScore).HasColumnName("BI_Score");
            });

            modelBuilder.Entity<NcTblCBiResponse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTblC_BI_Response", "nCompass");

                entity.Property(e => e.BiDescriptionId).HasColumnName("BI_description_Id");

                entity.Property(e => e.BiOptionId).HasColumnName("BI_Option_ID");

                entity.Property(e => e.BiResponseId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BI_Response_ID");

                entity.Property(e => e.BiScore).HasColumnName("BI_Score");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<NcTblCBiType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ncTblC_BI_Types", "nCompass");

                entity.Property(e => e.BiTypeDescription)
                    .HasMaxLength(1000)
                    .HasColumnName("BI_Type_Description");

                entity.Property(e => e.BiTypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BI_Type_ID");
            });

            modelBuilder.Entity<NeilBvalidationStat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NeilBValidationStats", "Validation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insurer)
                    .HasMaxLength(50)
                    .HasColumnName("insurer");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.PolicyNumber).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.SbsclaimId).HasColumnName("SBSClaimID");

                entity.Property(e => e.SearchString).HasMaxLength(100);

                entity.Property(e => e.Use).HasMaxLength(200);

                entity.Property(e => e.User)
                    .HasMaxLength(200)
                    .HasColumnName("user");

                entity.Property(e => e.When).HasColumnType("datetime");
            });

            modelBuilder.Entity<NewFormat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("New_Format", "MI");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.MiDesc)
                    .HasMaxLength(200)
                    .HasColumnName("mi_desc");

                entity.Property(e => e.MiId).HasColumnName("mi_id");

                entity.Property(e => e.MiKey).HasColumnName("mi_key");

                entity.Property(e => e.MiType)
                    .HasMaxLength(50)
                    .HasColumnName("mi_type");

                entity.Property(e => e.SortOrder).HasColumnName("Sort_Order");
            });

            modelBuilder.Entity<NewGrossItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NewGrossItems", "MI");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Consignment).HasMaxLength(10);

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");
            });

            modelBuilder.Entity<NewValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NewValue", "FNOL");

                entity.Property(e => e.CauseTypeId).HasColumnName("CauseTypeID");

                entity.Property(e => e.GfkfamilyId).HasColumnName("GFKFamilyID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(200)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ParentValueId).HasColumnName("ParentValueID");

                entity.Property(e => e.SubcauseTypeId).HasColumnName("SubcauseTypeID");
            });

            modelBuilder.Entity<NewmiDateClosed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NEWMI_DateClosed", "MI");

                entity.Property(e => e.DateClosed).HasColumnType("datetime");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");
            });

            modelBuilder.Entity<NextAction>(entity =>
            {
                entity.ToTable("NextActions", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NextActionId).HasColumnName("NextActionID");

                entity.Property(e => e.PrevActionId).HasColumnName("PrevActionID");

                entity.HasOne(d => d.NextActionNavigation)
                    .WithMany(p => p.NextActionNextActionNavigations)
                    .HasForeignKey(d => d.NextActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NextActions_Action");

                entity.HasOne(d => d.PrevAction)
                    .WithMany(p => p.NextActionPrevActions)
                    .HasForeignKey(d => d.PrevActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NextActions_Action1");
            });

            modelBuilder.Entity<NextRefNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NextRefNo", "Accounts");

                entity.Property(e => e.NrnCn1Prefix)
                    .HasMaxLength(10)
                    .HasColumnName("nrn_cn1_prefix");

                entity.Property(e => e.NrnCn2Prefix)
                    .HasMaxLength(10)
                    .HasColumnName("nrn_cn2_prefix");

                entity.Property(e => e.NrnId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("nrn_id");

                entity.Property(e => e.NrnInv1Prefix)
                    .HasMaxLength(10)
                    .HasColumnName("nrn_inv1_prefix")
                    .HasComment("Prefix letter(s) for sequence 1");

                entity.Property(e => e.NrnInv2Prefix)
                    .HasMaxLength(10)
                    .HasColumnName("nrn_inv2_prefix");

                entity.Property(e => e.NrnInvoice1)
                    .HasColumnName("nrn_invoice1")
                    .HasComment("Next invoice number");

                entity.Property(e => e.NrnInvoice2)
                    .HasColumnName("nrn_invoice2")
                    .HasComment("(If using secondary sequence)");

                entity.Property(e => e.NrnJeRef)
                    .HasColumnName("nrn_je_ref")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrnLgBordereau).HasColumnName("nrn_LG_bordereau");

                entity.Property(e => e.NrnMiSalesInv)
                    .HasColumnName("nrn_mi_sales_inv")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.NrnPlAllocRef).HasColumnName("nrn_pl_alloc_ref");

                entity.Property(e => e.NrnPoLocked).HasColumnName("nrn_po_locked");

                entity.Property(e => e.NrnPoNumber1)
                    .HasColumnName("nrn_po_number1")
                    .HasComment("Next credit note number");

                entity.Property(e => e.NrnPoNumber2)
                    .HasColumnName("nrn_po_number2")
                    .HasComment("(If using secondary sequence)");

                entity.Property(e => e.NrnSiLocked).HasColumnName("nrn_si_locked");

                entity.Property(e => e.NrnSlAllocRef).HasColumnName("nrn_sl_alloc_ref");
            });

            modelBuilder.Entity<NfuBordereau>(entity =>
            {
                entity.HasKey(e => e.NfubId);

                entity.ToTable("NFU_Bordereau", "Accounts");

                entity.Property(e => e.NfubId).HasColumnName("nfub_id");

                entity.Property(e => e.NfubIncidentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nfub_incident_date");

                entity.Property(e => e.NfubSettlementType)
                    .HasMaxLength(50)
                    .HasColumnName("nfub_settlement_type");

                entity.Property(e => e.NfubSimId).HasColumnName("nfub_sim_id");
            });

            modelBuilder.Entity<NfuInv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nfu_inv", "Accounts");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Gross)
                    .HasColumnType("money")
                    .HasColumnName("gross");
            });

            modelBuilder.Entity<NfuType>(entity =>
            {
                entity.HasKey(e => e.NfutId);

                entity.ToTable("NFU_Type", "Accounts");

                entity.Property(e => e.NfutId).HasColumnName("nfut_id");

                entity.Property(e => e.NfutName)
                    .HasMaxLength(50)
                    .HasColumnName("nfut_name");
            });

            modelBuilder.Entity<NfuagencyDetail>(entity =>
            {
                entity.HasKey(e => e.IntermediaryClrf)
                    .HasName("PK__NFUAgenc__8C4F252F3D3A0B93");

                entity.ToTable("NFUAgencyDetails", "MI");

                entity.Property(e => e.IntermediaryClrf)
                    .HasMaxLength(50)
                    .HasColumnName("Intermediary_CLRF");

                entity.Property(e => e.AddressLine1)
                    .HasMaxLength(50)
                    .HasColumnName("Address_Line_1");

                entity.Property(e => e.AddressLine2)
                    .HasMaxLength(50)
                    .HasColumnName("Address_Line_2");

                entity.Property(e => e.AddressLine3)
                    .HasMaxLength(50)
                    .HasColumnName("Address_Line_3");

                entity.Property(e => e.AddressLine4)
                    .HasMaxLength(50)
                    .HasColumnName("Address_Line_4");

                entity.Property(e => e.AddressLine5)
                    .HasMaxLength(50)
                    .HasColumnName("Address_Line_5");

                entity.Property(e => e.AddressLine6)
                    .HasMaxLength(50)
                    .HasColumnName("Address_Line_6");

                entity.Property(e => e.AlsoKnownAs)
                    .HasMaxLength(50)
                    .HasColumnName("Also_Known_as");

                entity.Property(e => e.BoomerangName)
                    .HasMaxLength(50)
                    .HasColumnName("Boomerang_Name");

                entity.Property(e => e.BoomerangNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Boomerang_Number");

                entity.Property(e => e.BranchNumber).HasColumnName("Branch_Number");

                entity.Property(e => e.Column15)
                    .HasMaxLength(1)
                    .HasColumnName("Column_15");

                entity.Property(e => e.Commissioned).HasMaxLength(50);

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("Email_Address");

                entity.Property(e => e.Postcode).HasMaxLength(50);
            });

            modelBuilder.Entity<Nfumagency>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NFUMAgency", "MI");

                entity.Property(e => e.AgencyId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AgencyID");

                entity.Property(e => e.AgencyType)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");
            });

            modelBuilder.Entity<NfumagencyType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NFUMAgencyType", "MI");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Type)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NfumclaimAgency>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NFUMClaimAgency", "Claim");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ValClaimId).HasColumnName("ValClaimID");
            });

            modelBuilder.Entity<NfummissingItemDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NFUMMissingItemDetails", "MI");

                entity.Property(e => e.ClaimCenterReference).HasColumnName("Claim_center_Reference");

                entity.Property(e => e.ClaimNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Claim_Number");

                entity.Property(e => e.ItemGuid)
                    .HasMaxLength(50)
                    .HasColumnName("ItemGUID");

                entity.Property(e => e.SbsinstructionUidNfum)
                    .HasMaxLength(50)
                    .HasColumnName("SBSInstructionUID_NFUM");

                entity.Property(e => e.SuggestedFulfilment).HasMaxLength(50);
            });

            modelBuilder.Entity<Nfumregion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NFUMRegion", "MI");

                entity.Property(e => e.RegionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RegionID");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Nfuupdate>(entity =>
            {
                entity.HasKey(e => e.UpdateId);

                entity.ToTable("NFUUpdates", "Supplier");

                entity.Property(e => e.UpdateId).HasColumnName("UpdateID");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateUpdateRequired).HasColumnType("datetime");
            });

            modelBuilder.Entity<NlAccount>(entity =>
            {
                entity.HasKey(e => e.NlaId);

                entity.ToTable("NL_Accounts", "Accounts");

                entity.Property(e => e.NlaId).HasColumnName("nla_id");

                entity.Property(e => e.NlaActive)
                    .HasColumnName("nla_active")
                    .HasComment("To disable postings to redundant accounts");

                entity.Property(e => e.NlaBank)
                    .HasColumnName("nla_bank")
                    .HasComment("=1 if this is a \"bank type\" account");

                entity.Property(e => e.NlaCode)
                    .HasColumnName("nla_code")
                    .HasComment("NL Code (eg Sage code)");

                entity.Property(e => e.NlaCreatedBy).HasColumnName("nla_created_by");

                entity.Property(e => e.NlaCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("nla_created_on");

                entity.Property(e => e.NlaCurrentYearBf)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nla_current_year_bf");

                entity.Property(e => e.NlaEditedBy).HasColumnName("nla_edited_by");

                entity.Property(e => e.NlaEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("nla_edited_on");

                entity.Property(e => e.NlaName)
                    .HasMaxLength(50)
                    .HasColumnName("nla_name");

                entity.Property(e => e.NlaNlsId)
                    .HasColumnName("nla_nls_id")
                    .HasComment("Link to NL structure table");

                entity.Property(e => e.NlaPriorYearBf)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nla_prior_year_bf");
            });

            modelBuilder.Entity<NlDefault>(entity =>
            {
                entity.HasKey(e => e.NldId);

                entity.ToTable("NL_Defaults", "Accounts");

                entity.Property(e => e.NldId).HasColumnName("nld_id");

                entity.Property(e => e.NldCode)
                    .HasMaxLength(10)
                    .HasColumnName("nld_code")
                    .HasComment("see stDocumentation");

                entity.Property(e => e.NldComment)
                    .HasMaxLength(2000)
                    .HasColumnName("nld_comment");

                entity.Property(e => e.NldNlaId)
                    .HasColumnName("nld_nla_id")
                    .HasComment("NL Account ID");
            });

            modelBuilder.Entity<NlMonthly>(entity =>
            {
                entity.HasKey(e => e.NlmId);

                entity.ToTable("NL_Monthly", "Accounts");

                entity.Property(e => e.NlmId).HasColumnName("nlm_id");

                entity.Property(e => e.NlmAccountingPeriod).HasColumnName("nlm_accounting_period");

                entity.Property(e => e.NlmNlaId).HasColumnName("nlm_nla_id");

                entity.Property(e => e.NlmPostingType)
                    .HasMaxLength(1)
                    .HasColumnName("nlm_posting_type");

                entity.Property(e => e.NlmValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nlm_value");
            });

            modelBuilder.Entity<NlStructure>(entity =>
            {
                entity.HasKey(e => e.NlsId);

                entity.ToTable("NL_Structure", "Accounts");

                entity.Property(e => e.NlsId).HasColumnName("nls_id");

                entity.Property(e => e.NlsCreatedBy).HasColumnName("nls_created_by");

                entity.Property(e => e.NlsCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("nls_created_on");

                entity.Property(e => e.NlsDcAltGroup)
                    .HasColumnName("nls_dc_alt_group")
                    .HasComment("If negative (see above), move to this group");

                entity.Property(e => e.NlsDcExpected)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("nls_dc_expected")
                    .IsFixedLength()
                    .HasComment("Expected value (Debit or Credit) - if not, show as -ve");

                entity.Property(e => e.NlsEditedBy).HasColumnName("nls_edited_by");

                entity.Property(e => e.NlsEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("nls_edited_on");

                entity.Property(e => e.NlsName)
                    .HasMaxLength(50)
                    .HasColumnName("nls_name")
                    .HasComment("eg. Turnover, Cost of Sales");

                entity.Property(e => e.NlsOrder)
                    .HasColumnName("nls_order")
                    .HasComment("Order to present groups");

                entity.Property(e => e.NlsPb)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("nls_PB")
                    .IsFixedLength()
                    .HasComment("P&L or Balance Sheet");
            });

            modelBuilder.Entity<NmiDummy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Nmi_dummy", "MI");

                entity.Property(e => e.Consingnment)
                    .HasMaxLength(10)
                    .HasColumnName("consingnment");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.ToTable("Notification", "Claim");

                entity.HasIndex(e => e.Read, "IXNC_Notification_Read_02494");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.ClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Notification_InsuranceClaim");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Notification_User");
            });

            modelBuilder.Entity<NovemberCleansed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("November_Cleansed", "MI");

                entity.Property(e => e.AdditionalGoodSordered)
                    .HasMaxLength(255)
                    .HasColumnName("Additional_Good_Sordered");

                entity.Property(e => e.AgreedDeliveryDate)
                    .HasMaxLength(255)
                    .HasColumnName("Agreed_Delivery_Date");

                entity.Property(e => e.AssignOutcome)
                    .HasMaxLength(255)
                    .HasColumnName("Assign_Outcome");

                entity.Property(e => e.AwaitingCarpetSample)
                    .HasMaxLength(255)
                    .HasColumnName("Awaiting_Carpet_Sample");

                entity.Property(e => e.AwaitingFittingDate)
                    .HasMaxLength(255)
                    .HasColumnName("Awaiting_Fitting_Date");

                entity.Property(e => e.AwaitingProofOfPurchase)
                    .HasMaxLength(255)
                    .HasColumnName("Awaiting_Proof_Of_Purchase");

                entity.Property(e => e.Berack).HasMaxLength(255);

                entity.Property(e => e.BettermentAgreed)
                    .HasMaxLength(255)
                    .HasColumnName("Betterment_Agreed");

                entity.Property(e => e.BiToolUsed)
                    .HasMaxLength(255)
                    .HasColumnName("Bi_Tool_Used");

                entity.Property(e => e.BuyRate).HasColumnName("Buy_Rate");

                entity.Property(e => e.CancelledDuringTransit)
                    .HasMaxLength(255)
                    .HasColumnName("Cancelled_During_Transit");

                entity.Property(e => e.CarpetDryingCompleted)
                    .HasMaxLength(255)
                    .HasColumnName("Carpet_Drying_Completed");

                entity.Property(e => e.CarpetDryingStarted)
                    .HasMaxLength(255)
                    .HasColumnName("Carpet_Drying_Started");

                entity.Property(e => e.CarpetFitted)
                    .HasMaxLength(255)
                    .HasColumnName("Carpet_Fitted");

                entity.Property(e => e.CarpetSample)
                    .HasMaxLength(255)
                    .HasColumnName("Carpet_Sample");

                entity.Property(e => e.CarpetVoucherIssued)
                    .HasMaxLength(255)
                    .HasColumnName("Carpet_Voucher_Issued");

                entity.Property(e => e.CarpetVoucherRedeemed)
                    .HasMaxLength(255)
                    .HasColumnName("Carpet_Voucher_Redeemed");

                entity.Property(e => e.CashSettledByInsuranceCompany)
                    .HasMaxLength(255)
                    .HasColumnName("Cash_Settled_By_Insurance_Company");

                entity.Property(e => e.CashSettledBySbs)
                    .HasMaxLength(255)
                    .HasColumnName("Cash_Settled_By_Sbs");

                entity.Property(e => e.CauseOfDamage)
                    .HasMaxLength(255)
                    .HasColumnName("Cause_Of_Damage");

                entity.Property(e => e.ClaimAuthorityType)
                    .HasMaxLength(255)
                    .HasColumnName("Claim_Authority_Type");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_Id");

                entity.Property(e => e.ClaimItemRepudiated)
                    .HasMaxLength(255)
                    .HasColumnName("Claim_Item_Repudiated");

                entity.Property(e => e.ClaimItemWithdrawnByIc)
                    .HasMaxLength(255)
                    .HasColumnName("Claim_Item_Withdrawn_By_Ic");

                entity.Property(e => e.ClaimItemWithdrawnByPh)
                    .HasMaxLength(255)
                    .HasColumnName("Claim_Item_Withdrawn_By_Ph");

                entity.Property(e => e.ClaimOrderId).HasColumnName("Claim_Order_Id");

                entity.Property(e => e.ClaimOutcome)
                    .HasMaxLength(255)
                    .HasColumnName("Claim_Outcome");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(255)
                    .HasColumnName("Claim_Type");

                entity.Property(e => e.ClaimValue).HasColumnName("Claim_Value");

                entity.Property(e => e.CleaninProgress)
                    .HasMaxLength(255)
                    .HasColumnName("Cleanin_Progress");

                entity.Property(e => e.CloseClaim)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Claim");

                entity.Property(e => e.CloseItem)
                    .HasMaxLength(255)
                    .HasColumnName("Close_Item");

                entity.Property(e => e.Commodity).HasMaxLength(255);

                entity.Property(e => e.ConfirmedBySupplier)
                    .HasMaxLength(255)
                    .HasColumnName("Confirmed_By_Supplier");

                entity.Property(e => e.CostOfDelivery).HasColumnName("Cost_Of_Delivery");

                entity.Property(e => e.CustomerInformedOfInspectionResultsDate)
                    .HasMaxLength(255)
                    .HasColumnName("Customer_Informed_Of_Inspection_Results_Date");

                entity.Property(e => e.CustomerRejectedSettlement)
                    .HasMaxLength(255)
                    .HasColumnName("Customer_Rejected_Settlement");

                entity.Property(e => e.DateClosed)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Closed");

                entity.Property(e => e.DateInspectionAcknowledged)
                    .HasMaxLength(255)
                    .HasColumnName("Date_Inspection_Acknowledged");

                entity.Property(e => e.DateOpened)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Opened");

                entity.Property(e => e.DateRepairread)
                    .HasMaxLength(255)
                    .HasColumnName("Date_Repairread");

                entity.Property(e => e.DeadOnArrival)
                    .HasMaxLength(255)
                    .HasColumnName("Dead_On_Arrival");

                entity.Property(e => e.DpdCollectionDate)
                    .HasMaxLength(255)
                    .HasColumnName("Dpd_Collection_Date");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EngineerBooked)
                    .HasMaxLength(255)
                    .HasColumnName("Engineer_Booked");

                entity.Property(e => e.EngineerName)
                    .HasMaxLength(255)
                    .HasColumnName("Engineer_Name");

                entity.Property(e => e.EstimatedDeliveryDate)
                    .HasMaxLength(255)
                    .HasColumnName("Estimated_Delivery_Date");

                entity.Property(e => e.ExcessCollected)
                    .HasMaxLength(255)
                    .HasColumnName("Excess_Collected");

                entity.Property(e => e.FailedRepair)
                    .HasMaxLength(255)
                    .HasColumnName("Failed_Repair");

                entity.Property(e => e.FirstContact)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Contact");

                entity.Property(e => e.FirstContactLetter)
                    .HasMaxLength(255)
                    .HasColumnName("First_Contact_Letter");

                entity.Property(e => e.ForTheMonth)
                    .HasMaxLength(255)
                    .HasColumnName("For_The_Month");

                entity.Property(e => e.ForTheYear).HasColumnName("For_The_Year");

                entity.Property(e => e.GoodsRecivedCalloutBooked)
                    .HasMaxLength(255)
                    .HasColumnName("Goods_Recived_Callout_Booked");

                entity.Property(e => e.HandlerreadPrintedReport)
                    .HasMaxLength(255)
                    .HasColumnName("Handlerread_Printed_Report");

                entity.Property(e => e.HomeTel)
                    .HasMaxLength(255)
                    .HasColumnName("Home_Tel");

                entity.Property(e => e.HoursPaused)
                    .HasMaxLength(255)
                    .HasColumnName("Hours_Paused");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IncorrectItemSupplied)
                    .HasMaxLength(255)
                    .HasColumnName("Incorrect_Item_Supplied");

                entity.Property(e => e.InsCoHandler)
                    .HasMaxLength(255)
                    .HasColumnName("Ins_Co_Handler");

                entity.Property(e => e.InspCancelled)
                    .HasMaxLength(255)
                    .HasColumnName("Insp_Cancelled");

                entity.Property(e => e.InspectionArranged)
                    .HasMaxLength(255)
                    .HasColumnName("Inspection_Arranged");

                entity.Property(e => e.InspectionCreated)
                    .HasMaxLength(255)
                    .HasColumnName("Inspection_Created");

                entity.Property(e => e.InspectionReadByEngineer)
                    .HasMaxLength(255)
                    .HasColumnName("Inspection_Read_By_Engineer");

                entity.Property(e => e.InspectionReportDate)
                    .HasMaxLength(255)
                    .HasColumnName("Inspection_Report_Date");

                entity.Property(e => e.InspectionReportTo)
                    .HasMaxLength(255)
                    .HasColumnName("Inspection_Report_To");

                entity.Property(e => e.InspectionReported)
                    .HasMaxLength(255)
                    .HasColumnName("Inspection_Reported");

                entity.Property(e => e.InstructionBookedOnFnol)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction_Booked_On_Fnol");

                entity.Property(e => e.InstructionBookedOnIp)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction_Booked_On_Ip");

                entity.Property(e => e.InstructionBookedOnIpAutomaticly)
                    .HasMaxLength(255)
                    .HasColumnName("Instruction_Booked_On_Ip_Automaticly");

                entity.Property(e => e.InstructionToNotRepair)
                    .HasMaxLength(255)
                    .HasColumnName("Instruction_To_Not_Repair");

                entity.Property(e => e.InsuranceCo)
                    .HasMaxLength(255)
                    .HasColumnName("Insurance_Co");

                entity.Property(e => e.InsuredPostcode)
                    .HasMaxLength(255)
                    .HasColumnName("Insured_Postcode");

                entity.Property(e => e.InsuredSurname)
                    .HasMaxLength(255)
                    .HasColumnName("Insured_Surname");

                entity.Property(e => e.InvDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Inv_Description");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceFinal)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice_Final");

                entity.Property(e => e.InvoiceInterim)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice_Interim");

                entity.Property(e => e.InvoiceNo).HasColumnName("Invoice_No");

                entity.Property(e => e.ItemOutcome)
                    .HasMaxLength(255)
                    .HasColumnName("Item_Outcome");

                entity.Property(e => e.ItemReadyTobeInvoiced)
                    .HasMaxLength(255)
                    .HasColumnName("Item_Ready_Tobe_Invoiced");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(255)
                    .HasColumnName("Item_Type");

                entity.Property(e => e.LaReference)
                    .HasMaxLength(255)
                    .HasColumnName("La_Reference");

                entity.Property(e => e.Laid).HasColumnName("LAid");

                entity.Property(e => e.LastItemDelDate)
                    .HasMaxLength(255)
                    .HasColumnName("Last_Item_Del_Date");

                entity.Property(e => e.LeadItemCommodity)
                    .HasMaxLength(255)
                    .HasColumnName("Lead_Item_Commodity");

                entity.Property(e => e.LineItemCategory)
                    .HasMaxLength(255)
                    .HasColumnName("Line_Item_Category");

                entity.Property(e => e.LossAdjusterAccountRef)
                    .HasMaxLength(255)
                    .HasColumnName("Loss_Adjuster_Account_Ref");

                entity.Property(e => e.LossAdjusterName)
                    .HasMaxLength(255)
                    .HasColumnName("Loss_Adjuster_Name");

                entity.Property(e => e.Make).HasMaxLength(255);

                entity.Property(e => e.MandateSent)
                    .HasMaxLength(255)
                    .HasColumnName("Mandate_Sent");

                entity.Property(e => e.MaxTimeToReturnCallInMinutes).HasColumnName("Max_Time_To_Return_Call_In_Minutes");

                entity.Property(e => e.MobileTel)
                    .HasMaxLength(255)
                    .HasColumnName("Mobile_Tel");

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Nondelivery).HasMaxLength(255);

                entity.Property(e => e.OrderPlaced)
                    .HasColumnType("datetime")
                    .HasColumnName("Order_Placed");

                entity.Property(e => e.Peril).HasMaxLength(255);

                entity.Property(e => e.Period).HasMaxLength(255);

                entity.Property(e => e.PhoneContactWithPolicyHolder)
                    .HasColumnType("datetime")
                    .HasColumnName("Phone_Contact_With_Policy_Holder");

                entity.Property(e => e.PoNumber).HasColumnName("Po_Number");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Policy_Number");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(255)
                    .HasColumnName("Product_Code");

                entity.Property(e => e.PurchaseOrderRaised)
                    .HasMaxLength(255)
                    .HasColumnName("Purchase_Order_Raised");

                entity.Property(e => e.QuoteToInsurance)
                    .HasMaxLength(255)
                    .HasColumnName("Quote_To_Insurance");

                entity.Property(e => e.ReasonForClaim)
                    .HasMaxLength(255)
                    .HasColumnName("Reason_For_Claim");

                entity.Property(e => e.RecommendRepudiation)
                    .HasMaxLength(255)
                    .HasColumnName("Recommend_Repudiation");

                entity.Property(e => e.RepairAuth)
                    .HasMaxLength(255)
                    .HasColumnName("Repair_Auth");

                entity.Property(e => e.RepairComplete)
                    .HasMaxLength(255)
                    .HasColumnName("Repair_Complete");

                entity.Property(e => e.RepairCompleteDate)
                    .HasMaxLength(255)
                    .HasColumnName("Repair_Complete_Date");

                entity.Property(e => e.RepairFailed)
                    .HasMaxLength(255)
                    .HasColumnName("Repair_Failed");

                entity.Property(e => e.RepairOffered)
                    .HasMaxLength(255)
                    .HasColumnName("Repair_Offered");

                entity.Property(e => e.RepairReqSent)
                    .HasMaxLength(255)
                    .HasColumnName("Repair_Req_Sent");

                entity.Property(e => e.RepairToBeCarriedout)
                    .HasMaxLength(255)
                    .HasColumnName("Repair_To_Be_Carriedout");

                entity.Property(e => e.RepairedItemReturned)
                    .HasMaxLength(255)
                    .HasColumnName("Repaired_Item_Returned");

                entity.Property(e => e.RepairtObecarriedoutGiftware)
                    .HasMaxLength(255)
                    .HasColumnName("Repairt_Obecarriedout_Giftware");

                entity.Property(e => e.RepairtObecarriedoutJewellry)
                    .HasMaxLength(255)
                    .HasColumnName("Repairt_Obecarriedout_Jewellry");

                entity.Property(e => e.RepairtObecarriedoutWatch)
                    .HasMaxLength(255)
                    .HasColumnName("Repairt_Obecarriedout_Watch");

                entity.Property(e => e.ReplacedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Replaced_Date");

                entity.Property(e => e.ReplacementFloorOffered)
                    .HasMaxLength(255)
                    .HasColumnName("Replacement_Floor_Offered");

                entity.Property(e => e.ReplacementGoodSordered)
                    .HasMaxLength(255)
                    .HasColumnName("Replacement_Good_Sordered");

                entity.Property(e => e.SaleExVat).HasColumnName("Sale_Ex_Vat");

                entity.Property(e => e.SaleIncVat).HasColumnName("Sale_Inc_Vat");

                entity.Property(e => e.SbsHandler)
                    .HasMaxLength(255)
                    .HasColumnName("Sbs_Handler");

                entity.Property(e => e.SecondContactAttempt)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Attempt");

                entity.Property(e => e.SecondContactLetter)
                    .HasMaxLength(255)
                    .HasColumnName("Second_Contact_Letter");

                entity.Property(e => e.SecondContactSuccess)
                    .HasColumnType("datetime")
                    .HasColumnName("Second_Contact_Success");

                entity.Property(e => e.SmsEmailToPh)
                    .HasMaxLength(255)
                    .HasColumnName("Sms_Email_To_Ph");

                entity.Property(e => e.SourcingPartsForRepair)
                    .HasMaxLength(255)
                    .HasColumnName("Sourcing_Parts_For_Repair");

                entity.Property(e => e.SourcingPartsForRepairJewellry)
                    .HasMaxLength(255)
                    .HasColumnName("Sourcing_Parts_For_Repair_Jewellry");

                entity.Property(e => e.SourcingPartsOrMaterialForRepair)
                    .HasMaxLength(255)
                    .HasColumnName("Sourcing_Parts_Or_Material_For_Repair");

                entity.Property(e => e.SuccessfulLastContractPriorToGoodsOrdered)
                    .HasColumnType("datetime")
                    .HasColumnName("Successful_Last_Contract_Prior_To_Goods_Ordered");

                entity.Property(e => e.Supplier).HasMaxLength(255);

                entity.Property(e => e.TeleSale)
                    .HasColumnType("datetime")
                    .HasColumnName("Tele_Sale");

                entity.Property(e => e.ThirdContactLetter)
                    .HasMaxLength(255)
                    .HasColumnName("Third_Contact_Letter");

                entity.Property(e => e.ValidationTool)
                    .HasMaxLength(255)
                    .HasColumnName("Validation_Tool");

                entity.Property(e => e.VariationToInstructionIc)
                    .HasMaxLength(255)
                    .HasColumnName("Variation_To_Instruction_Ic");

                entity.Property(e => e.VariationToInstructionIi)
                    .HasMaxLength(255)
                    .HasColumnName("Variation_To_Instruction_Ii");

                entity.Property(e => e.VariationToInstructionPh)
                    .HasMaxLength(255)
                    .HasColumnName("Variation_To_Instruction_Ph");

                entity.Property(e => e.VatRegistered)
                    .HasMaxLength(255)
                    .HasColumnName("Vat_Registered");

                entity.Property(e => e.VoucherIssued)
                    .HasMaxLength(255)
                    .HasColumnName("Voucher_Issued");

                entity.Property(e => e.VoucherOffered)
                    .HasMaxLength(255)
                    .HasColumnName("Voucher_Offered");

                entity.Property(e => e.WorkTel)
                    .HasMaxLength(255)
                    .HasColumnName("Work_Tel");
            });

            modelBuilder.Entity<NtblInstruction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NTblInstructions", "MI");

                entity.Property(e => e.AddedBy).HasColumnName("Added_By");

                entity.Property(e => e.AddedByName)
                    .HasMaxLength(50)
                    .HasColumnName("Added_By_Name");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.Address4).HasMaxLength(50);

                entity.Property(e => e.Arrived).HasColumnType("smalldatetime");

                entity.Property(e => e.CauseTypeId).HasColumnName("CauseTypeID");

                entity.Property(e => e.ClaimHandler).HasMaxLength(50);

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.DamageDetails).HasColumnType("ntext");

                entity.Property(e => e.DelivAddress1).HasMaxLength(50);

                entity.Property(e => e.DelivAddress2).HasMaxLength(50);

                entity.Property(e => e.DelivAddress3).HasMaxLength(50);

                entity.Property(e => e.DelivAddress4).HasMaxLength(50);

                entity.Property(e => e.DelivPostCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Excess).HasColumnType("money");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FirstName2).HasMaxLength(50);

                entity.Property(e => e.HomeTel).HasMaxLength(50);

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.LastName2).HasMaxLength(50);

                entity.Property(e => e.LossAdjuster).HasColumnName("Loss_Adjuster");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.MonthIns).HasMaxLength(10);

                entity.Property(e => e.PickedUp)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Picked_Up");

                entity.Property(e => e.PolicyNumber).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.RefName)
                    .HasMaxLength(50)
                    .HasColumnName("REF_Name");

                entity.Property(e => e.RefNo)
                    .HasMaxLength(50)
                    .HasColumnName("REF_No");

                entity.Property(e => e.SalesPerson).HasColumnName("Sales_Person");

                entity.Property(e => e.SbsRef).HasColumnName("SBS_REF");

                entity.Property(e => e.SingleArticleLimitAmount).HasColumnType("money");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("SubCauseTypeID");

                entity.Property(e => e.Title).HasMaxLength(20);

                entity.Property(e => e.Title2).HasMaxLength(50);

                entity.Property(e => e.VatregNo)
                    .HasMaxLength(50)
                    .HasColumnName("VATRegNo");

                entity.Property(e => e.WorkTel).HasMaxLength(50);
            });

            modelBuilder.Entity<NtblPortalUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NTblPortalUsers", "MI");

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.PortalUserDescription).HasMaxLength(200);

                entity.Property(e => e.PortalUserName).HasMaxLength(50);

                entity.Property(e => e.PortalUserPassword).HasMaxLength(50);
            });

            modelBuilder.Entity<Number>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Number", "Site");

                entity.Property(e => e.Number1).HasColumnName("Number");
            });

            modelBuilder.Entity<OldADocTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_a_doc_templates");

                entity.Property(e => e.TemplateAddress).HasColumnName("templateAddress");

                entity.Property(e => e.TemplateBottomMargin)
                    .HasColumnName("templateBottomMargin")
                    .HasDefaultValueSql("((50))");

                entity.Property(e => e.TemplateEventId).HasColumnName("templateEventID");

                entity.Property(e => e.TemplateId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("templateID");

                entity.Property(e => e.TemplateLetterhead).HasColumnName("templateLetterhead");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("templateName");

                entity.Property(e => e.TemplateRecipient).HasColumnName("templateRecipient");

                entity.Property(e => e.TemplateStructure).HasColumnName("templateStructure");

                entity.Property(e => e.TemplateText)
                    .HasColumnType("ntext")
                    .HasColumnName("templateText");

                entity.Property(e => e.TriggeredActionId).HasColumnName("triggeredActionID");
            });

            modelBuilder.Entity<OldAPotentialIssue>(entity =>
            {
                entity.HasKey(e => e.PotentialIssueId)
                    .HasName("PK_a_PotentialIssue");

                entity.ToTable("old_a_PotentialIssue");

                entity.Property(e => e.PotentialIssueId).HasColumnName("PotentialIssueID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<OldAPotentialIssueType>(entity =>
            {
                entity.HasKey(e => e.PotentialIssueTypeId)
                    .HasName("PK_a_PotentialIssueType");

                entity.ToTable("old_a_PotentialIssueType");

                entity.Property(e => e.PotentialIssueTypeId).HasColumnName("PotentialIssueTypeID");

                entity.Property(e => e.PotentialIssueTypeName).HasMaxLength(300);
            });

            modelBuilder.Entity<OldCActionType>(entity =>
            {
                entity.HasKey(e => e.ActionTypeId)
                    .HasName("PK_c_ActionType");

                entity.ToTable("old_c_ActionType");

                entity.Property(e => e.ActionTypeId).HasColumnName("ActionTypeID");

                entity.Property(e => e.ActionTypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<OldCComplaint>(entity =>
            {
                entity.HasKey(e => e.ComplaintId)
                    .HasName("PK_c_complaint#");

                entity.ToTable("old_c_Complaint");

                entity.Property(e => e.ComplaintId).HasColumnName("ComplaintID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.CompensationAmount).HasColumnType("money");

                entity.Property(e => e.CompensationReason).HasColumnType("ntext");

                entity.Property(e => e.CompensationType).HasMaxLength(50);

                entity.Property(e => e.Complainant).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateResolved).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Resolution).HasColumnType("ntext");

                entity.Property(e => e.Text).HasMaxLength(3000);
            });

            modelBuilder.Entity<OldCComplaintAction>(entity =>
            {
                entity.HasKey(e => e.ComplaintActionId)
                    .HasName("PK_c_ComplaintAction");

                entity.ToTable("old_c_ComplaintAction");

                entity.Property(e => e.ComplaintActionId).HasColumnName("ComplaintActionID");

                entity.Property(e => e.ActionTypeId).HasColumnName("ActionTypeID");

                entity.Property(e => e.ComplaintId).HasColumnName("ComplaintID");

                entity.Property(e => e.CreatedById).HasColumnName("CreatedByID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Text).HasColumnType("ntext");
            });

            modelBuilder.Entity<OldCComplaintCategory>(entity =>
            {
                entity.HasKey(e => e.ComplaintCategoryId)
                    .HasName("PK_c_ComplaintCategory");

                entity.ToTable("old_c_ComplaintCategory");

                entity.Property(e => e.ComplaintCategoryId).HasColumnName("ComplaintCategoryID");

                entity.Property(e => e.ComplaintCategoryName).HasMaxLength(2000);
            });

            modelBuilder.Entity<OldCComplaintStatus>(entity =>
            {
                entity.HasKey(e => e.ComplaintStatusId)
                    .HasName("PK_c_ComplaintStatus");

                entity.ToTable("old_c_ComplaintStatus");

                entity.Property(e => e.ComplaintStatusId).HasColumnName("ComplaintStatusID");

                entity.Property(e => e.ComplaintStatusText).HasMaxLength(50);
            });

            modelBuilder.Entity<OldCComplaintStatusHistory>(entity =>
            {
                entity.HasKey(e => e.ComplaintStatusHistoryId)
                    .HasName("PK_c_ComplaintStatusHistory");

                entity.ToTable("old_c_ComplaintStatusHistory");

                entity.Property(e => e.ComplaintStatusHistoryId).HasColumnName("ComplaintStatusHistoryID");

                entity.Property(e => e.ComplaintId).HasColumnName("ComplaintID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DoneBy).HasMaxLength(50);

                entity.Property(e => e.NewStatusId).HasColumnName("NewStatusID");

                entity.Property(e => e.PreviousStatusId).HasColumnName("PreviousStatusID");
            });

            modelBuilder.Entity<OldCCompliment>(entity =>
            {
                entity.HasKey(e => e.ComplimentId)
                    .HasName("PK_c_Compliment");

                entity.ToTable("old_c_Compliment");

                entity.Property(e => e.ComplimentId).HasColumnName("ComplimentID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ComplimentDetails).HasColumnType("ntext");

                entity.Property(e => e.ComplimentType).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.ReceivedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<OldCDeliveryInspCompany>(entity =>
            {
                entity.HasKey(e => e.DiId)
                    .HasName("PK_c_Delivery_Insp_Company");

                entity.ToTable("old_c_Delivery_Insp_Company");

                entity.Property(e => e.DiId).HasColumnName("di_ID");

                entity.Property(e => e.DiDeliveryCompId).HasColumnName("di_DeliveryCompID");

                entity.Property(e => e.DiInspCompId).HasColumnName("di_InspCompID");

                entity.Property(e => e.DiProductCode)
                    .HasMaxLength(50)
                    .HasColumnName("di_ProductCode");
            });

            modelBuilder.Entity<OldCDeliveryOrder>(entity =>
            {
                entity.HasKey(e => e.DoId)
                    .HasName("PK_c_DeliveryOrders");

                entity.ToTable("old_c_DeliveryOrders");

                entity.Property(e => e.DoId).HasColumnName("do_ID");

                entity.Property(e => e.DoDateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("do_DateCreated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DoDateDeliveryExpected)
                    .HasColumnType("datetime")
                    .HasColumnName("do_DateDeliveryExpected");

                entity.Property(e => e.DoDateSent)
                    .HasColumnType("datetime")
                    .HasColumnName("do_DateSent");

                entity.Property(e => e.DoInspectionId).HasColumnName("do_InspectionID");

                entity.Property(e => e.DoProductCode)
                    .HasMaxLength(200)
                    .HasColumnName("do_ProductCode");

                entity.Property(e => e.DoSent).HasColumnName("do_Sent");

                entity.Property(e => e.DoService).HasColumnName("do_Service");
            });

            modelBuilder.Entity<OldCDeliveryServiceCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_c_DeliveryServiceCodes");

                entity.Property(e => e.DsDateModifier).HasColumnName("ds_DateModifier");

                entity.Property(e => e.DsDeliveryCompanyId).HasColumnName("ds_DeliveryCompanyID");

                entity.Property(e => e.DsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ds_ID");

                entity.Property(e => e.DsServiceCode).HasColumnName("ds_ServiceCode");

                entity.Property(e => e.DsServiceText)
                    .HasMaxLength(50)
                    .HasColumnName("ds_ServiceText");
            });

            modelBuilder.Entity<OldIEventType>(entity =>
            {
                entity.HasKey(e => e.IEventTypeId)
                    .HasName("PK_i_event_types");

                entity.ToTable("old_i_event_types");

                entity.Property(e => e.IEventTypeId).HasColumnName("i_event_type_id");

                entity.Property(e => e.IEventTypeCustomEvent).HasColumnName("i_event_type_customEvent");

                entity.Property(e => e.IEventTypeName)
                    .HasMaxLength(150)
                    .HasColumnName("i_event_type_name");

                entity.Property(e => e.IEventTypeOtlu).HasColumnName("i_event_type_otlu");
            });

            modelBuilder.Entity<OldIStatusSlHistory>(entity =>
            {
                entity.HasKey(e => e.IStatusSlHistId)
                    .HasName("PK_i_status_sl_history");

                entity.ToTable("old_i_status_sl_history");

                entity.Property(e => e.IStatusSlHistId).HasColumnName("i_status_sl_hist_id");

                entity.Property(e => e.IStatusSlHistClaimId).HasColumnName("i_status_sl_hist_claim_id");

                entity.Property(e => e.IStatusSlHistDate)
                    .HasColumnType("datetime")
                    .HasColumnName("i_status_sl_hist_date");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.IStatusSlHistUserId).HasColumnName("i_status_sl_hist_user_id");
            });

            modelBuilder.Entity<OldIStatusSlNextAction>(entity =>
            {
                entity.HasKey(e => e.IStatusSlNaId)
                    .HasName("PK_I_status_sl_next_action");

                entity.ToTable("old_i_status_sl_next_action");

                entity.Property(e => e.IStatusSlNaId).HasColumnName("i_status_sl_na_id");

                entity.Property(e => e.IStatusSlAssociatedPath).HasColumnName("i_status_sl_associated_path");

                entity.Property(e => e.IStatusSlInstructiontype)
                    .HasMaxLength(150)
                    .HasColumnName("i_status_sl_instructiontype");

                entity.Property(e => e.IStatusSlLevel).HasColumnName("i_status_sl_level");

                entity.Property(e => e.IStatusSlNextaction)
                    .HasMaxLength(150)
                    .HasColumnName("i_status_sl_nextaction");

                entity.HasOne(d => d.IStatusSlAssociatedPathNavigation)
                    .WithMany(p => p.OldIStatusSlNextActions)
                    .HasForeignKey(d => d.IStatusSlAssociatedPath)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_i_status_sl_next_action_i_status_sl_paths");

                entity.HasOne(d => d.IStatusSlLevelNavigation)
                    .WithMany(p => p.OldIStatusSlNextActions)
                    .HasForeignKey(d => d.IStatusSlLevel)
                    .HasConstraintName("FK_i_status_sl_next_action_i_status_sl_types");
            });

            modelBuilder.Entity<OldIStatusSlPath>(entity =>
            {
                entity.HasKey(e => e.IStatusPathId)
                    .HasName("PK_i_status_paths");

                entity.ToTable("old_i_status_sl_paths");

                entity.Property(e => e.IStatusPathId).HasColumnName("i_status_path_id");

                entity.Property(e => e.IStatusPathEnd).HasColumnName("i_status_path_end");

                entity.Property(e => e.IStatusPathEventType).HasColumnName("i_status_path_event_type");

                entity.Property(e => e.IStatusPathStart).HasColumnName("i_status_path_start");

                entity.HasOne(d => d.IStatusPathEndNavigation)
                    .WithMany(p => p.OldIStatusSlPathIStatusPathEndNavigations)
                    .HasForeignKey(d => d.IStatusPathEnd)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_i_status_sl_paths_i_status_sl_types1");

                entity.HasOne(d => d.IStatusPathEventTypeNavigation)
                    .WithMany(p => p.OldIStatusSlPaths)
                    .HasForeignKey(d => d.IStatusPathEventType)
                    .HasConstraintName("FK_i_status_sl_paths_i_event_types");

                entity.HasOne(d => d.IStatusPathStartNavigation)
                    .WithMany(p => p.OldIStatusSlPathIStatusPathStartNavigations)
                    .HasForeignKey(d => d.IStatusPathStart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_i_status_sl_paths_i_status_sl_types");
            });

            modelBuilder.Entity<OldIStatusSlType>(entity =>
            {
                entity.HasKey(e => e.ISSlTypeId)
                    .HasName("PK_i_status_types");

                entity.ToTable("old_i_status_sl_types");

                entity.Property(e => e.ISSlTypeId).HasColumnName("i_s_sl_type_id");

                entity.Property(e => e.ISSlMiClosed).HasColumnName("i_s_sl_mi_closed");

                entity.Property(e => e.ISSlTypeCloses).HasColumnName("i_s_sl_type_closes");

                entity.Property(e => e.ISSlTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("i_s_sl_type_name");

                entity.Property(e => e.ISSlTypeTime)
                    .HasColumnName("i_s_sl_type_time")
                    .HasDefaultValueSql("((1000))");

                entity.Property(e => e.ISSlTypeTl).HasColumnName("i_s_sl_type_tl");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");
            });

            modelBuilder.Entity<OldLaAlert>(entity =>
            {
                entity.HasKey(e => e.LaAlertId)
                    .HasName("PK_la_alert");

                entity.ToTable("old_la_alert");

                entity.Property(e => e.LaAlertId).HasColumnName("la_alert_id");

                entity.Property(e => e.LaAlertEmail)
                    .HasMaxLength(50)
                    .HasColumnName("la_alert_email")
                    .HasDefaultValueSql("(N'SBS@Liverpool-Victoria.co.uk')");

                entity.Property(e => e.LaAlertGroupId)
                    .HasColumnName("la_alert_group_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LaAlertLaId).HasColumnName("la_alert_la_id");

                entity.Property(e => e.LaAlertMethod)
                    .HasMaxLength(10)
                    .HasColumnName("la_alert_method")
                    .HasDefaultValueSql("(N'LV')");
            });

            modelBuilder.Entity<OldLaAlertSublevel>(entity =>
            {
                entity.HasKey(e => e.LaAlertSlId)
                    .HasName("PK_la_alert_sublevel");

                entity.ToTable("old_la_alert_sublevel");

                entity.Property(e => e.LaAlertSlId).HasColumnName("la_alert_sl_id");

                entity.Property(e => e.LaAlertSlGroupId)
                    .HasColumnName("la_alert_sl_group_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LaAlertSlNextAction)
                    .HasMaxLength(500)
                    .HasColumnName("la_alert_sl_nextAction");

                entity.Property(e => e.LaAlertSlNumDays).HasColumnName("la_alert_sl_numDays");

                entity.Property(e => e.LaAlertSlSlId).HasColumnName("la_alert_sl_sl_id");

                entity.Property(e => e.LaAlertSlTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("la_alert_sl_type_id")
                    .HasDefaultValueSql("(N'LV')");
            });

            modelBuilder.Entity<OldMiBimonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_MI_BIMonthly");

                entity.Property(e => e.M1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m1")
                    .IsFixedLength();

                entity.Property(e => e.M10)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m10")
                    .IsFixedLength();

                entity.Property(e => e.M11)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m11")
                    .IsFixedLength();

                entity.Property(e => e.M12)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m12")
                    .IsFixedLength();

                entity.Property(e => e.M2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m2")
                    .IsFixedLength();

                entity.Property(e => e.M3)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m3")
                    .IsFixedLength();

                entity.Property(e => e.M4)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m4")
                    .IsFixedLength();

                entity.Property(e => e.M5)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m5")
                    .IsFixedLength();

                entity.Property(e => e.M6)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m6")
                    .IsFixedLength();

                entity.Property(e => e.M7)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m7")
                    .IsFixedLength();

                entity.Property(e => e.M8)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m8")
                    .IsFixedLength();

                entity.Property(e => e.M9)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("m9")
                    .IsFixedLength();
            });

            modelBuilder.Entity<OldMiCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_MI_Categories");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCatDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cat_Desc");
            });

            modelBuilder.Entity<OldMiCause>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_MI_Cause");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_type_id");

                entity.Property(e => e.MiCauseDesc)
                    .HasMaxLength(255)
                    .HasColumnName("MI_Cause_Desc");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_ID");
            });

            modelBuilder.Entity<OldMiChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_MI_Changes");

                entity.Property(e => e.ClaimId).HasColumnName("claim_id");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");

                entity.Property(e => e.OldCat).HasColumnName("old-Cat");

                entity.Property(e => e.OldCattext)
                    .HasMaxLength(50)
                    .HasColumnName("old-cattext");
            });

            modelBuilder.Entity<OldMiClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_MI_Claims");

                entity.Property(e => e.AccountRef).HasMaxLength(10);

                entity.Property(e => e.CauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Cause_type");

                entity.Property(e => e.CauseTypeId).HasColumnName("Cause_Type_ID");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseStatus).HasColumnName("Close_status");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.Closex).HasMaxLength(50);

                entity.Property(e => e.Donemi).HasColumnName("donemi");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .HasColumnName("Item_type");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_Type_id");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCause)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cause");

                entity.Property(e => e.MiCauseId).HasColumnName("MI_Cause_ID");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.OldCloseStatus).HasColumnName("Old_Close_status");

                entity.Property(e => e.OldMiCat).HasColumnName("Old_MiCat");

                entity.Property(e => e.Olddate)
                    .HasMaxLength(50)
                    .HasColumnName("olddate");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Open_date");

                entity.Property(e => e.OpenMonth).HasColumnName("Open_month");

                entity.Property(e => e.OpenYear).HasColumnName("Open_year");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.SubCauseType)
                    .HasMaxLength(50)
                    .HasColumnName("Sub_Cause_Type");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("Sub_Cause_Type_Id");
            });

            modelBuilder.Entity<OldMiRepDesc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_MI_Rep_Desc");

                entity.Property(e => e.MiRepDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_DEsc");

                entity.Property(e => e.MiRepId).HasColumnName("MI_Rep_Id");

                entity.Property(e => e.MiRepPlev)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_PLev");

                entity.Property(e => e.MiRepPlhours).HasColumnName("MI_Rep_PLHours");

                entity.Property(e => e.MiRepSort).HasColumnName("MI_Rep_Sort");

                entity.Property(e => e.MiRepTarget)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_Target");

                entity.Property(e => e.MiRepType)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_Type");
            });

            modelBuilder.Entity<OldMiSageDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_MI_Sage_Data");

                entity.Property(e => e.Acc).HasMaxLength(255);

                entity.Property(e => e.AccName)
                    .HasMaxLength(255)
                    .HasColumnName("Acc_Name");

                entity.Property(e => e.Calc1).HasColumnName("calc1");

                entity.Property(e => e.Calc2).HasColumnName("calc2");

                entity.Property(e => e.Calc3).HasColumnName("calc3");

                entity.Property(e => e.CarriageGross).HasColumnName("carriageGross");

                entity.Property(e => e.Carriagenet).HasColumnName("carriagenet");

                entity.Property(e => e.Carriagetax).HasColumnName("carriagetax");

                entity.Property(e => e.Details)
                    .HasMaxLength(255)
                    .HasColumnName("details");

                entity.Property(e => e.Gross).HasColumnName("gross");

                entity.Property(e => e.InvDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("inv_date");

                entity.Property(e => e.InvGross).HasColumnName("inv_gross");

                entity.Property(e => e.InvNet).HasColumnName("inv_net");

                entity.Property(e => e.InvNo).HasColumnName("Inv_no");

                entity.Property(e => e.InvTax).HasColumnName("inv_tax");

                entity.Property(e => e.Net).HasColumnName("net");

                entity.Property(e => e.Qty)
                    .HasMaxLength(255)
                    .HasColumnName("qty");

                entity.Property(e => e.RecType)
                    .HasMaxLength(255)
                    .HasColumnName("rec_type");

                entity.Property(e => e.SbsRef).HasColumnName("sbs_ref");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(255)
                    .HasColumnName("Stock_Code");

                entity.Property(e => e.Tax)
                    .HasMaxLength(255)
                    .HasColumnName("tax");
            });

            modelBuilder.Entity<OldMissingclaimsstatus1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_missingclaimsstatus1");

                entity.Property(e => e.Cb1)
                    .HasMaxLength(32)
                    .HasColumnName("cb1");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .HasColumnName("comment");

                entity.Property(e => e.Dc1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dc1");

                entity.Property(e => e.Dm1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dm1");

                entity.Property(e => e.Mb1)
                    .HasMaxLength(32)
                    .HasColumnName("mb1");

                entity.Property(e => e.Statdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("statdate");

                entity.Property(e => e.Statid).HasColumnName("statid");
            });

            modelBuilder.Entity<OldNTblCall>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblCalls");

                entity.Property(e => e.CallAnswered)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CallId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CallID");

                entity.Property(e => e.CallNotes).HasColumnType("ntext");

                entity.Property(e => e.CallOn)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallProfId).HasColumnName("CallProfID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.WarrantyClaimId).HasColumnName("WarrantyClaimID");
            });

            modelBuilder.Entity<OldNTblCallProfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblCallProfiles");

                entity.Property(e => e.CallProfId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CallProfID");

                entity.Property(e => e.EventId)
                    .HasColumnName("EventID")
                    .HasComment("The event thats associated with making a call on this profile");

                entity.Property(e => e.Open)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Should this call profile be used");
            });

            modelBuilder.Entity<OldNTblCallReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblCallReason");

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.ReasonId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ReasonID");
            });

            modelBuilder.Entity<OldNTblCallType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblCallType");

                entity.Property(e => e.CallType).HasMaxLength(255);

                entity.Property(e => e.CallTypeId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<OldNTblCaller>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblCaller");

                entity.Property(e => e.Caller).HasMaxLength(255);

                entity.Property(e => e.CallerId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CallerID");
            });

            modelBuilder.Entity<OldNTblCustomerAttitude>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblCustomerAttitude");

                entity.Property(e => e.CaClaimId).HasColumnName("ca_ClaimId");

                entity.Property(e => e.CaConcernDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("ca_ConcernDetails");

                entity.Property(e => e.CaEvasive).HasColumnName("ca_Evasive");

                entity.Property(e => e.CaHostile).HasColumnName("ca_Hostile");

                entity.Property(e => e.CaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ca_Id");

                entity.Property(e => e.CaInformedNextSteps).HasColumnName("ca_InformedNextSteps");

                entity.Property(e => e.CaOtherConcerns).HasColumnName("ca_OtherConcerns");

                entity.Property(e => e.CaProductUnderYear).HasColumnName("ca_ProductUnderYear");

                entity.Property(e => e.CaPushy).HasColumnName("ca_Pushy");

                entity.Property(e => e.CaQuestionableCircumstances).HasColumnName("ca_QuestionableCircumstances");

                entity.Property(e => e.CaSubstantiation)
                    .HasColumnType("ntext")
                    .HasColumnName("ca_Substantiation");

                entity.Property(e => e.CaUnsatisfactoryDocumentation).HasColumnName("ca_UnsatisfactoryDocumentation");
            });

            modelBuilder.Entity<OldNTblDpa>(entity =>
            {
                entity.ToTable("old_nTblDPA");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<OldNTblHoliday>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblHolidays");

                entity.Property(e => e.HolidayDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<OldNTblMessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblMessages");

                entity.Property(e => e.MsgArchive).HasDefaultValueSql("((0))");

                entity.Property(e => e.MsgClaimId).HasDefaultValueSql("((0))");

                entity.Property(e => e.MsgComplete).HasColumnType("smalldatetime");

                entity.Property(e => e.MsgId).ValueGeneratedOnAdd();

                entity.Property(e => e.MsgRead).HasColumnType("smalldatetime");

                entity.Property(e => e.MsgSent)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MsgText).HasColumnType("ntext");

                entity.Property(e => e.MsgThread).HasDefaultValueSql("((0))");

                entity.Property(e => e.MsgTitle).HasMaxLength(200);

                entity.Property(e => e.MsgType).HasDefaultValueSql("((0))");

                entity.Property(e => e.Msgoutcome).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<OldNTblMessageOutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblMessageOutcomes");

                entity.Property(e => e.MsgOutcome).HasMaxLength(200);

                entity.Property(e => e.MsgOutcomeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MsgOutcomeID");
            });

            modelBuilder.Entity<OldNTblMessageType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblMessageTypes");

                entity.Property(e => e.MsgType).HasMaxLength(200);

                entity.Property(e => e.MsgTypeFrom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MsgTypeId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<OldNTblPortalAssoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblPortalAssoc");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");
            });

            modelBuilder.Entity<OldNTblTitle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTblTitles");

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.TitleId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Title_ID");
            });

            modelBuilder.Entity<OldNTblcriterion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_nTBLCriteria");

                entity.Property(e => e.Criteria).HasMaxLength(50);

                entity.Property(e => e.CriteriaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CriteriaID");
            });

            modelBuilder.Entity<OldNtblInstruction>(entity =>
            {
                entity.HasKey(e => e.SbsRef)
                    .HasName("PK_NTblInstructions");

                entity.ToTable("old_NTblInstructions");

                entity.Property(e => e.SbsRef).HasColumnName("SBS_REF");

                entity.Property(e => e.AddedBy)
                    .HasColumnName("Added_By")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AddedByName)
                    .HasMaxLength(50)
                    .HasColumnName("Added_By_Name");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.Address4).HasMaxLength(50);

                entity.Property(e => e.Arrived).HasColumnType("smalldatetime");

                entity.Property(e => e.CauseTypeId).HasColumnName("CauseTypeID");

                entity.Property(e => e.ClaimHandler).HasMaxLength(50);

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.DamageDetails).HasColumnType("ntext");

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelivAddress1).HasMaxLength(50);

                entity.Property(e => e.DelivAddress2).HasMaxLength(50);

                entity.Property(e => e.DelivAddress3).HasMaxLength(50);

                entity.Property(e => e.DelivAddress4).HasMaxLength(50);

                entity.Property(e => e.DelivPostCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Excess).HasColumnType("money");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FirstName2).HasMaxLength(50);

                entity.Property(e => e.HomeTel).HasMaxLength(50);

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.LastName2).HasMaxLength(50);

                entity.Property(e => e.LossAdjuster).HasColumnName("Loss_Adjuster");

                entity.Property(e => e.Method).HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.MonthIns).HasMaxLength(10);

                entity.Property(e => e.PickedUp)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Picked_Up");

                entity.Property(e => e.PolicyNumber).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.RefName)
                    .HasMaxLength(50)
                    .HasColumnName("REF_Name");

                entity.Property(e => e.RefNo)
                    .HasMaxLength(50)
                    .HasColumnName("REF_No");

                entity.Property(e => e.SalesPerson)
                    .HasColumnName("Sales_Person")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SingleArticleLimitAmount).HasColumnType("money");

                entity.Property(e => e.SubCauseTypeId).HasColumnName("SubCauseTypeID");

                entity.Property(e => e.Title).HasMaxLength(20);

                entity.Property(e => e.Title2).HasMaxLength(50);

                entity.Property(e => e.Type).HasComment("For now, 0 -> Insurance claim instruction, 1 -> Warranty claim instruction");

                entity.Property(e => e.VatregNo)
                    .HasMaxLength(50)
                    .HasColumnName("VATRegNo");

                entity.Property(e => e.WorkTel).HasMaxLength(50);
            });

            modelBuilder.Entity<OldNtblPortalUser>(entity =>
            {
                entity.HasKey(e => e.PortalUserId)
                    .HasName("PK_NTblPortalUsers");

                entity.ToTable("old_NTblPortalUsers");

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.PortalUserDescription).HasMaxLength(200);

                entity.Property(e => e.PortalUserName).HasMaxLength(50);

                entity.Property(e => e.PortalUserPassword).HasMaxLength(50);
            });

            modelBuilder.Entity<OldNtblcallsDpa>(entity =>
            {
                entity.ToTable("old_ntblcalls_dpas");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Callid).HasColumnName("callid");

                entity.Property(e => e.Dpaid).HasColumnName("dpaid");
            });

            modelBuilder.Entity<OldPbcatcol>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_pbcatcol");

                entity.Property(e => e.PbcBmap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbc_bmap")
                    .IsFixedLength();

                entity.Property(e => e.PbcCase).HasColumnName("pbc_case");

                entity.Property(e => e.PbcCid).HasColumnName("pbc_cid");

                entity.Property(e => e.PbcCmnt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_cmnt");

                entity.Property(e => e.PbcCnam)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbc_cnam")
                    .IsFixedLength();

                entity.Property(e => e.PbcEdit)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("pbc_edit");

                entity.Property(e => e.PbcHdr)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_hdr");

                entity.Property(e => e.PbcHght).HasColumnName("pbc_hght");

                entity.Property(e => e.PbcHpos).HasColumnName("pbc_hpos");

                entity.Property(e => e.PbcInit)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_init");

                entity.Property(e => e.PbcJtfy).HasColumnName("pbc_jtfy");

                entity.Property(e => e.PbcLabl)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_labl");

                entity.Property(e => e.PbcLpos).HasColumnName("pbc_lpos");

                entity.Property(e => e.PbcMask)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("pbc_mask");

                entity.Property(e => e.PbcOwnr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbc_ownr")
                    .IsFixedLength();

                entity.Property(e => e.PbcPtrn)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("pbc_ptrn");

                entity.Property(e => e.PbcTag)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_tag");

                entity.Property(e => e.PbcTid).HasColumnName("pbc_tid");

                entity.Property(e => e.PbcTnam)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbc_tnam")
                    .IsFixedLength();

                entity.Property(e => e.PbcWdth).HasColumnName("pbc_wdth");
            });

            modelBuilder.Entity<OldPbcatedt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_pbcatedt");

                entity.Property(e => e.PbeCntr).HasColumnName("pbe_cntr");

                entity.Property(e => e.PbeEdit)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbe_edit");

                entity.Property(e => e.PbeFlag).HasColumnName("pbe_flag");

                entity.Property(e => e.PbeName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbe_name");

                entity.Property(e => e.PbeSeqn).HasColumnName("pbe_seqn");

                entity.Property(e => e.PbeType).HasColumnName("pbe_type");

                entity.Property(e => e.PbeWork)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("pbe_work")
                    .IsFixedLength();
            });

            modelBuilder.Entity<OldPbcatfmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_pbcatfmt");

                entity.Property(e => e.PbfCntr).HasColumnName("pbf_cntr");

                entity.Property(e => e.PbfFrmt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbf_frmt");

                entity.Property(e => e.PbfName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbf_name");

                entity.Property(e => e.PbfType).HasColumnName("pbf_type");
            });

            modelBuilder.Entity<OldPbcattbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_pbcattbl");

                entity.Property(e => e.PbdFchr).HasColumnName("pbd_fchr");

                entity.Property(e => e.PbdFfce)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("pbd_ffce")
                    .IsFixedLength();

                entity.Property(e => e.PbdFhgt).HasColumnName("pbd_fhgt");

                entity.Property(e => e.PbdFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbd_fitl")
                    .IsFixedLength();

                entity.Property(e => e.PbdFptc).HasColumnName("pbd_fptc");

                entity.Property(e => e.PbdFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbd_funl")
                    .IsFixedLength();

                entity.Property(e => e.PbdFwgt).HasColumnName("pbd_fwgt");

                entity.Property(e => e.PbhFchr).HasColumnName("pbh_fchr");

                entity.Property(e => e.PbhFfce)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("pbh_ffce")
                    .IsFixedLength();

                entity.Property(e => e.PbhFhgt).HasColumnName("pbh_fhgt");

                entity.Property(e => e.PbhFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbh_fitl")
                    .IsFixedLength();

                entity.Property(e => e.PbhFptc).HasColumnName("pbh_fptc");

                entity.Property(e => e.PbhFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbh_funl")
                    .IsFixedLength();

                entity.Property(e => e.PbhFwgt).HasColumnName("pbh_fwgt");

                entity.Property(e => e.PblFchr).HasColumnName("pbl_fchr");

                entity.Property(e => e.PblFfce)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("pbl_ffce")
                    .IsFixedLength();

                entity.Property(e => e.PblFhgt).HasColumnName("pbl_fhgt");

                entity.Property(e => e.PblFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbl_fitl")
                    .IsFixedLength();

                entity.Property(e => e.PblFptc).HasColumnName("pbl_fptc");

                entity.Property(e => e.PblFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbl_funl")
                    .IsFixedLength();

                entity.Property(e => e.PblFwgt).HasColumnName("pbl_fwgt");

                entity.Property(e => e.PbtCmnt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbt_cmnt");

                entity.Property(e => e.PbtOwnr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbt_ownr")
                    .IsFixedLength();

                entity.Property(e => e.PbtTid).HasColumnName("pbt_tid");

                entity.Property(e => e.PbtTnam)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbt_tnam")
                    .IsFixedLength();
            });

            modelBuilder.Entity<OldPbcatvld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_pbcatvld");

                entity.Property(e => e.PbvCntr).HasColumnName("pbv_cntr");

                entity.Property(e => e.PbvMsg)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbv_msg");

                entity.Property(e => e.PbvName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbv_name");

                entity.Property(e => e.PbvType).HasColumnName("pbv_type");

                entity.Property(e => e.PbvVald)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbv_vald");
            });

            modelBuilder.Entity<OldSAllItem>(entity =>
            {
                entity.HasKey(e => e.SClaimItemId)
                    .HasName("PK_s_all_items");

                entity.ToTable("old_s_all_items");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SClaimorderid).HasColumnName("s_claimorderid");

                entity.Property(e => e.SCreatedby)
                    .HasMaxLength(50)
                    .HasColumnName("s_createdby");

                entity.Property(e => e.SCreatedon)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_createdon");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SItemtypeid).HasColumnName("s_itemtypeid");

                entity.Property(e => e.SProductid).HasColumnName("s_productid");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");
            });

            modelBuilder.Entity<OldSDeliveryAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_delivery_accounts");

                entity.Property(e => e.SDelAccDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_acc_desc");

                entity.Property(e => e.SDelAccId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_del_acc_id");
            });

            modelBuilder.Entity<OldSFaultRelation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_fault_relations");

                entity.Property(e => e.FaultTypeId).HasColumnName("Fault_Type_Id");

                entity.Property(e => e.FixRateIndex).HasColumnName("Fix_Rate_Index");

                entity.Property(e => e.SFaultTypeId).HasColumnName("s_Fault_Type_id");
            });

            modelBuilder.Entity<OldSFaultType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_fault_types");

                entity.Property(e => e.SFaultType)
                    .HasMaxLength(50)
                    .HasColumnName("s_fault_type");

                entity.Property(e => e.SFaultTypeId).HasColumnName("s_fault_type_id");
            });

            modelBuilder.Entity<OldSFixRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_fix_rates");

                entity.Property(e => e.FixCode)
                    .HasMaxLength(1)
                    .HasColumnName("Fix_Code");

                entity.Property(e => e.FixRate).HasColumnName("Fix_rate");

                entity.Property(e => e.FixRateIndex).HasColumnName("Fix_Rate_Index");
            });

            modelBuilder.Entity<OldSInsp>(entity =>
            {
                entity.HasKey(e => e.SInspectionId)
                    .HasName("PK_s_insp");

                entity.ToTable("old_s_insp");

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SBackup).HasColumnName("s_backup");

                entity.Property(e => e.SBackupComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_backup_comments");

                entity.Property(e => e.SBackupDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_date");

                entity.Property(e => e.SBackupDetails)
                    .HasMaxLength(200)
                    .HasColumnName("s_backup_details");

                entity.Property(e => e.SBackupRequestOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_request_on");

                entity.Property(e => e.SCondition)
                    .HasMaxLength(100)
                    .HasColumnName("s_condition");

                entity.Property(e => e.SDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("s_damage_details");

                entity.Property(e => e.SDelAccId)
                    .HasColumnName("s_del_acc_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SDelDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_del_date");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SEngineer)
                    .HasMaxLength(100)
                    .HasColumnName("s_engineer");

                entity.Property(e => e.SFAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address1");

                entity.Property(e => e.SFAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address2");

                entity.Property(e => e.SFAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address3");

                entity.Property(e => e.SFAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address4");

                entity.Property(e => e.SFContact)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_contact");

                entity.Property(e => e.SFFirstname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_firstname");

                entity.Property(e => e.SFLastname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_lastname");

                entity.Property(e => e.SFPhone)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_phone");

                entity.Property(e => e.SFPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_postcode");

                entity.Property(e => e.SFTitle)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_title");

                entity.Property(e => e.SFaultType)
                    .HasColumnName("s_fault_type")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspectionItem).HasColumnName("s_inspection_item");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SMake)
                    .HasMaxLength(100)
                    .HasColumnName("s_make");

                entity.Property(e => e.SModel)
                    .HasMaxLength(100)
                    .HasColumnName("s_model");

                entity.Property(e => e.SOutcome)
                    .HasColumnName("s_outcome")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("s_printed");

                entity.Property(e => e.SQuarantine)
                    .HasColumnName("s_quarantine")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SQuarantineFrom)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_from");

                entity.Property(e => e.SQuarantineTime)
                    .HasColumnName("s_quarantine_time")
                    .HasDefaultValueSql("((28))");

                entity.Property(e => e.SQuarantineTo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_to");

                entity.Property(e => e.SSlId)
                    .HasColumnName("s_sl_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus)
                    .HasColumnName("s_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.STlId)
                    .HasColumnName("s_tl_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SrPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("sr_printed");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("updated_by");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("updated_on");
            });

            modelBuilder.Entity<OldSInspItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_insp_items");

                entity.Property(e => e.SAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_address1");

                entity.Property(e => e.SAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_address2");

                entity.Property(e => e.SAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_address3");

                entity.Property(e => e.SAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_address4");

                entity.Property(e => e.SClaimId).HasColumnName("s_claim_id");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SConfirmed).HasColumnName("s_confirmed");

                entity.Property(e => e.SContact)
                    .HasMaxLength(50)
                    .HasColumnName("s_contact");

                entity.Property(e => e.SCreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("s_created_by");

                entity.Property(e => e.SCreatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_created_on");

                entity.Property(e => e.SDAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address1");

                entity.Property(e => e.SDAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address2");

                entity.Property(e => e.SDAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address3");

                entity.Property(e => e.SDAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address4");

                entity.Property(e => e.SDName)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_name");

                entity.Property(e => e.SDPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_postcode");

                entity.Property(e => e.SDelAccId).HasColumnName("s_del_acc_id");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(12)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SFirstname)
                    .HasMaxLength(20)
                    .HasColumnName("s_firstname");

                entity.Property(e => e.SInsCompany).HasColumnName("s_ins_company");

                entity.Property(e => e.SInspCompany).HasColumnName("s_insp_company");

                entity.Property(e => e.SInspItem)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_insp_item");

                entity.Property(e => e.SInspType).HasColumnName("s_insp_type");

                entity.Property(e => e.SItemDesc)
                    .HasMaxLength(200)
                    .HasColumnName("s_Item_Desc");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SLastname)
                    .HasMaxLength(30)
                    .HasColumnName("s_lastname");

                entity.Property(e => e.SPhonehome)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonehome");

                entity.Property(e => e.SPhonemobile)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonemobile");

                entity.Property(e => e.SPhonework)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonework");

                entity.Property(e => e.SPostcode)
                    .HasMaxLength(10)
                    .HasColumnName("s_postcode");

                entity.Property(e => e.SProductType).HasColumnName("s_product_type");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus)
                    .HasColumnName("s_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.STitle)
                    .HasMaxLength(10)
                    .HasColumnName("s_title");
            });

            modelBuilder.Entity<OldSInspectedAttribute>(entity =>
            {
                entity.HasKey(e => e.SInspectedItemId)
                    .HasName("PK_s_inspected_attributes");

                entity.ToTable("old_s_inspected_attributes");

                entity.Property(e => e.SInspectedItemId).HasColumnName("s_inspected_item_id");

                entity.Property(e => e.SInspectedAttribute).HasColumnName("s_inspected_attribute");

                entity.Property(e => e.SInspectedValue)
                    .HasMaxLength(50)
                    .HasColumnName("s_inspected_value");

                entity.Property(e => e.SItemId).HasColumnName("s_item_id");
            });

            modelBuilder.Entity<OldSInspectionCo>(entity =>
            {
                entity.HasKey(e => e.SInspCo)
                    .HasName("PK_s_inspection_co");

                entity.ToTable("old_s_inspection_co");

                entity.Property(e => e.SInspCo).HasColumnName("s_insp_co");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspCompanyType)
                    .HasColumnName("s_insp_company_type")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SInspSupplierId).HasColumnName("s_insp_supplier_id");

                entity.Property(e => e.SInspUserId).HasColumnName("s_insp_user_id");
            });

            modelBuilder.Entity<OldSLAttrib>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_l_attribs");

                entity.Property(e => e.SAttribDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_attrib_desc");

                entity.Property(e => e.SAttribId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_attrib_id");

                entity.Property(e => e.SShow)
                    .HasColumnName("s_show")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SStShow)
                    .HasColumnName("s_st_show")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OldSLFaultType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_l_fault_types");

                entity.Property(e => e.SFaultType)
                    .HasMaxLength(50)
                    .HasColumnName("s_fault_type");

                entity.Property(e => e.SFaultTypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_fault_type_id");

                entity.Property(e => e.SFaultWarrantyFault)
                    .IsRequired()
                    .HasColumnName("s_fault_warranty_fault")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OldSLSl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_l_sl");

                entity.Property(e => e.FnolproductTypeId).HasColumnName("FNOLProductTypeID");

                entity.Property(e => e.SSlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_sl_desc");

                entity.Property(e => e.SSlId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_sl_id");

                entity.Property(e => e.STblItemType).HasColumnName("s_TblItemType");

                entity.Property(e => e.STl).HasColumnName("s_tl");
            });

            modelBuilder.Entity<OldSLSlAttrib>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_l_sl_attrib");

                entity.Property(e => e.SAttribId).HasColumnName("s_attrib_id");

                entity.Property(e => e.SSlAttribId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_sl_attrib_id");

                entity.Property(e => e.SSlAttribSignificance)
                    .HasColumnName("s_sl_attrib_significance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");
            });

            modelBuilder.Entity<OldSLSlFault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_l_sl_faults");

                entity.Property(e => e.SFaultTypeId).HasColumnName("s_fault_type_id");

                entity.Property(e => e.SSlFaultId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_sl_fault_id");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");
            });

            modelBuilder.Entity<OldSLTl>(entity =>
            {
                entity.HasKey(e => e.STlId)
                    .HasName("PK_s_l_tl");

                entity.ToTable("old_s_l_tl");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.STlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_tl_desc");
            });

            modelBuilder.Entity<OldSLTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_l_trans");

                entity.Property(e => e.SProductTypeId).HasColumnName("s_product_type_id");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.STransId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_trans_id");
            });

            modelBuilder.Entity<OldSOutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_outcomes");

                entity.Property(e => e.NewId).HasColumnName("NewID");

                entity.Property(e => e.SOutcome)
                    .HasMaxLength(50)
                    .HasColumnName("s_outcome");

                entity.Property(e => e.SOutcomeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_outcome_id");

                entity.Property(e => e.SSort).HasColumnName("s_sort");
            });

            modelBuilder.Entity<OldSPortalUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_portal_users");

                entity.Property(e => e.LongName).HasMaxLength(50);

                entity.Property(e => e.UserIndex)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("user_index");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .HasColumnName("username");

                entity.Property(e => e.Userpassword)
                    .HasMaxLength(50)
                    .HasColumnName("userpassword");

                entity.Property(e => e.Usertype)
                    .HasMaxLength(50)
                    .HasColumnName("usertype");
            });

            modelBuilder.Entity<OldSProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_products");

                entity.Property(e => e.SOldClaimCode).HasColumnName("s_old_claim_code");

                entity.Property(e => e.SProductCreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("s_product_created_By");

                entity.Property(e => e.SProductCreatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_product_created_on");

                entity.Property(e => e.SProductDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_product_desc");

                entity.Property(e => e.SProductType)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_product_type");
            });

            modelBuilder.Entity<OldSStatTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_stat_trans");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInsuranceClaim).HasColumnName("s_insurance_claim");

                entity.Property(e => e.SStatusBy)
                    .HasMaxLength(20)
                    .HasColumnName("s_status_by");

                entity.Property(e => e.SStatusFrom).HasColumnName("s_status_from");

                entity.Property(e => e.SStatusOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_status_on");

                entity.Property(e => e.SStatusTo).HasColumnName("s_status_to");

                entity.Property(e => e.STrackerId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("S_Tracker_ID");
            });

            modelBuilder.Entity<OldSStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_s_status");

                entity.Property(e => e.NewId).HasColumnName("NewID");

                entity.Property(e => e.SOrder).HasColumnName("s_order");

                entity.Property(e => e.SSbs).HasColumnName("s_sbs");

                entity.Property(e => e.SStatus).HasColumnName("s_Status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");
            });

            modelBuilder.Entity<OldStAttribVal>(entity =>
            {
                entity.HasKey(e => e.StAvId)
                    .HasName("PK_st_atrib_val");

                entity.ToTable("old_st_attrib_val");

                entity.Property(e => e.StAvId).HasColumnName("st_av_id");

                entity.Property(e => e.StAvAttribId).HasColumnName("st_av_attrib_id");

                entity.Property(e => e.StAvAttribVal)
                    .HasMaxLength(50)
                    .HasColumnName("st_av_attrib_val");

                entity.Property(e => e.StAvSiId).HasColumnName("st_av_si_id");

                entity.HasOne(d => d.StAvSi)
                    .WithMany(p => p.OldStAttribVals)
                    .HasForeignKey(d => d.StAvSiId)
                    .HasConstraintName("FK_st_attrib_val_st_stock_items");
            });

            modelBuilder.Entity<OldStItemSpecification>(entity =>
            {
                entity.HasKey(e => e.StIsId)
                    .HasName("PK_st_item_specification");

                entity.ToTable("old_st_item_specification");

                entity.Property(e => e.StIsId).HasColumnName("st_is_id");

                entity.Property(e => e.StIsSpec)
                    .HasMaxLength(50)
                    .HasColumnName("st_is_spec");
            });

            modelBuilder.Entity<OldStLinkSuppMan>(entity =>
            {
                entity.HasKey(e => e.StLinkId)
                    .HasName("PK_st_link_supp_man");

                entity.ToTable("old_st_link_supp_man");

                entity.Property(e => e.StLinkId).HasColumnName("st_link_id");

                entity.Property(e => e.StLinkManId).HasColumnName("st_link_man_id");

                entity.Property(e => e.StLinkSuppId).HasColumnName("st_link_supp_id");

                entity.HasOne(d => d.StLinkMan)
                    .WithMany(p => p.OldStLinkSuppMen)
                    .HasForeignKey(d => d.StLinkManId)
                    .HasConstraintName("FK_st_link_supp_man_st_manufacturers");

                entity.HasOne(d => d.StLinkSupp)
                    .WithMany(p => p.OldStLinkSuppMen)
                    .HasForeignKey(d => d.StLinkSuppId)
                    .HasConstraintName("FK_st_link_supp_man_st_suppliers");
            });

            modelBuilder.Entity<OldStManufacturer>(entity =>
            {
                entity.HasKey(e => e.StManId)
                    .HasName("PK_st_manufacturer");

                entity.ToTable("old_st_manufacturers");

                entity.Property(e => e.StManId).HasColumnName("st_man_id");

                entity.Property(e => e.StManAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_address1");

                entity.Property(e => e.StManAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_address2");

                entity.Property(e => e.StManContactName)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_contactName");

                entity.Property(e => e.StManContactName2)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_contactName2");

                entity.Property(e => e.StManContactName3)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_contactName3");

                entity.Property(e => e.StManEmail)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_email");

                entity.Property(e => e.StManEmail2)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_email2");

                entity.Property(e => e.StManEmail3)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_email3");

                entity.Property(e => e.StManFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_faxNumber");

                entity.Property(e => e.StManName)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_name");

                entity.Property(e => e.StManPhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_phoneNumber");

                entity.Property(e => e.StManPhoneNumber2)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_phoneNumber2");

                entity.Property(e => e.StManPhoneNumber3)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_phoneNumber3");

                entity.Property(e => e.StManPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_postCode");

                entity.Property(e => e.StManProductTypeId)
                    .HasColumnName("st_man_productTypeID")
                    .HasDefaultValueSql("((12))");

                entity.HasOne(d => d.StManProductType)
                    .WithMany(p => p.OldStManufacturers)
                    .HasForeignKey(d => d.StManProductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_manufacturers_s_l_tl");
            });

            modelBuilder.Entity<OldStMeetingsMan>(entity =>
            {
                entity.HasKey(e => e.StMeetingsManId)
                    .HasName("PK_st_meetings_man");

                entity.ToTable("old_st_meetings_man");

                entity.Property(e => e.StMeetingsManId).HasColumnName("st_meetings_man_id");

                entity.Property(e => e.StMeetingsManArchived).HasColumnName("st_meetings_man_archived");

                entity.Property(e => e.StMeetingsManDate)
                    .HasColumnType("datetime")
                    .HasColumnName("st_meetings_man_date");

                entity.Property(e => e.StMeetingsManManId).HasColumnName("st_meetings_man_man_id");

                entity.Property(e => e.StMeetingsManText)
                    .HasColumnType("ntext")
                    .HasColumnName("st_meetings_man_text");

                entity.HasOne(d => d.StMeetingsManMan)
                    .WithMany(p => p.OldStMeetingsMen)
                    .HasForeignKey(d => d.StMeetingsManManId)
                    .HasConstraintName("FK_st_meetings_man_st_manufacturers");
            });

            modelBuilder.Entity<OldStMeetingsSupp>(entity =>
            {
                entity.HasKey(e => e.StMeetingsSuppId)
                    .HasName("PK_st_meetings_supp");

                entity.ToTable("old_st_meetings_supp");

                entity.Property(e => e.StMeetingsSuppId).HasColumnName("st_meetings_supp_id");

                entity.Property(e => e.StMeetingsSuppArchived).HasColumnName("st_meetings_supp_archived");

                entity.Property(e => e.StMeetingsSuppDate)
                    .HasColumnType("datetime")
                    .HasColumnName("st_meetings_supp_date");

                entity.Property(e => e.StMeetingsSuppSuppId).HasColumnName("st_meetings_supp_supp_id");

                entity.Property(e => e.StMeetingsSuppText)
                    .HasColumnType("ntext")
                    .HasColumnName("st_meetings_supp_text");
            });

            modelBuilder.Entity<OldStSrQuantity>(entity =>
            {
                entity.HasKey(e => e.StSqId)
                    .HasName("PK_st_record_quantity");

                entity.ToTable("old_st_sr_quantities");

                entity.Property(e => e.StSqId).HasColumnName("st_sq_id");

                entity.Property(e => e.StSqAvailable).HasColumnName("st_sq_available");

                entity.Property(e => e.StSqReserved).HasColumnName("st_sq_reserved");

                entity.Property(e => e.StSqSold).HasColumnName("st_sq_sold");

                entity.Property(e => e.StSqSrId).HasColumnName("st_sq_sr_id");

                entity.HasOne(d => d.StSqSr)
                    .WithMany(p => p.OldStSrQuantities)
                    .HasForeignKey(d => d.StSqSrId)
                    .HasConstraintName("FK_st_sr_quantities_st_stock_records");
            });

            modelBuilder.Entity<OldStStockItem>(entity =>
            {
                entity.HasKey(e => e.StSiId)
                    .HasName("PK_st_stock_items");

                entity.ToTable("old_st_stock_items");

                entity.Property(e => e.StSiId).HasColumnName("st_si_id");

                entity.Property(e => e.StSiExtraInfo)
                    .HasColumnType("ntext")
                    .HasColumnName("st_si_extra_info");

                entity.Property(e => e.StSiImage)
                    .HasMaxLength(50)
                    .HasColumnName("st_si_image");

                entity.Property(e => e.StSiManId).HasColumnName("st_si_man_id");

                entity.Property(e => e.StSiModelNo)
                    .HasMaxLength(50)
                    .HasColumnName("st_si_model_no");

                entity.Property(e => e.StSiSageCode).HasColumnName("st_si_sage_code");

                entity.Property(e => e.StSiSkuNo)
                    .HasMaxLength(50)
                    .HasColumnName("st_si_sku_no");

                entity.Property(e => e.StSiSlId).HasColumnName("st_si_sl_id");

                entity.Property(e => e.StSiSpecId)
                    .HasColumnName("st_si_spec_id")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.StSiMan)
                    .WithMany(p => p.OldStStockItems)
                    .HasForeignKey(d => d.StSiManId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_stock_items_st_manufacturers");

                entity.HasOne(d => d.StSiSpec)
                    .WithMany(p => p.OldStStockItems)
                    .HasForeignKey(d => d.StSiSpecId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_st_stock_items_st_item_specification");
            });

            modelBuilder.Entity<OldStStockRecord>(entity =>
            {
                entity.HasKey(e => e.StSrId)
                    .HasName("PK_st_stock_records");

                entity.ToTable("old_st_stock_records");

                entity.Property(e => e.StSrId).HasColumnName("st_sr_id");

                entity.Property(e => e.StSrAdditionalDiscount)
                    .HasColumnType("money")
                    .HasColumnName("st_sr_additional_discount");

                entity.Property(e => e.StSrClosed).HasColumnName("st_sr_closed");

                entity.Property(e => e.StSrDate)
                    .HasColumnType("datetime")
                    .HasColumnName("st_sr_date");

                entity.Property(e => e.StSrDiscountedPrice)
                    .HasColumnType("money")
                    .HasColumnName("st_sr_discounted_price");

                entity.Property(e => e.StSrQuantity).HasColumnName("st_sr_quantity");

                entity.Property(e => e.StSrStockItemId).HasColumnName("st_sr_stock_item_id");

                entity.Property(e => e.StSrSupplierId).HasColumnName("st_sr_supplier_id");

                entity.Property(e => e.StSrUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("st_sr_unit_price");

                entity.Property(e => e.StSrValidPrice)
                    .HasColumnType("money")
                    .HasColumnName("st_sr_valid_price");

                entity.HasOne(d => d.StSrStockItem)
                    .WithMany(p => p.OldStStockRecords)
                    .HasForeignKey(d => d.StSrStockItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_stock_records_st_stock_items");

                entity.HasOne(d => d.StSrSupplier)
                    .WithMany(p => p.OldStStockRecords)
                    .HasForeignKey(d => d.StSrSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_stock_records_st_suppliers");
            });

            modelBuilder.Entity<OldStStockTransaction>(entity =>
            {
                entity.HasKey(e => e.StStId)
                    .HasName("PK_st_stock_transaction");

                entity.ToTable("old_st_stock_transactions");

                entity.Property(e => e.StStId).HasColumnName("st_st_id");

                entity.Property(e => e.StStAmount)
                    .HasColumnName("st_st_amount")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StStClaimId).HasColumnName("st_st_claim_id");

                entity.Property(e => e.StStDate)
                    .HasColumnType("datetime")
                    .HasColumnName("st_st_date");

                entity.Property(e => e.StStSrId).HasColumnName("st_st_sr_id");

                entity.Property(e => e.StStTypeId).HasColumnName("st_st_type_id");

                entity.Property(e => e.StStUsrId).HasColumnName("st_st_usr_id");

                entity.HasOne(d => d.StStSr)
                    .WithMany(p => p.OldStStockTransactions)
                    .HasForeignKey(d => d.StStSrId)
                    .HasConstraintName("FK_st_stock_transactions_st_stock_records");

                entity.HasOne(d => d.StStType)
                    .WithMany(p => p.OldStStockTransactions)
                    .HasForeignKey(d => d.StStTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_stock_transactions_st_transaction_types");
            });

            modelBuilder.Entity<OldStSupplier>(entity =>
            {
                entity.HasKey(e => e.StSuppId)
                    .HasName("PK_st_suppliers");

                entity.ToTable("old_st_suppliers");

                entity.Property(e => e.StSuppId).HasColumnName("st_supp_id");

                entity.Property(e => e.StSuppAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_address1");

                entity.Property(e => e.StSuppAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_address2");

                entity.Property(e => e.StSuppContactName)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_contactName");

                entity.Property(e => e.StSuppContactName2)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_contactName2");

                entity.Property(e => e.StSuppContactName3)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_contactName3");

                entity.Property(e => e.StSuppEmail)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_email");

                entity.Property(e => e.StSuppEmail2)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_email2");

                entity.Property(e => e.StSuppEmail3)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_email3");

                entity.Property(e => e.StSuppFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_faxNumber");

                entity.Property(e => e.StSuppName)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_name");

                entity.Property(e => e.StSuppPhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_phoneNumber");

                entity.Property(e => e.StSuppPhoneNumber2)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_phoneNumber2");

                entity.Property(e => e.StSuppPhoneNumber3)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_phoneNumber3");

                entity.Property(e => e.StSuppPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_postCode");

                entity.Property(e => e.StSuppProductTypeId).HasColumnName("st_supp_productTypeID");

                entity.Property(e => e.StSuppSageCode).HasColumnName("st_supp_sage_code");
            });

            modelBuilder.Entity<OldStTransactionType>(entity =>
            {
                entity.HasKey(e => e.StStTypeId)
                    .HasName("PK_st_transaction_types");

                entity.ToTable("old_st_transaction_types");

                entity.Property(e => e.StStTypeId).HasColumnName("st_st_type_id");

                entity.Property(e => e.StStTypeText)
                    .HasMaxLength(50)
                    .HasColumnName("st_st_type_text");
            });

            modelBuilder.Entity<OldTblAssignClaim>(entity =>
            {
                entity.HasKey(e => e.AssignClaimId)
                    .HasName("PK_TblAssignClaim");

                entity.ToTable("old_TblAssignClaim");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ItemNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblAssignClaim123>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_TblAssignClaim123");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ItemNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblCashSettlement>(entity =>
            {
                entity.HasKey(e => e.CashSettlementId)
                    .HasName("PK_TblCashSettlement");

                entity.ToTable("old_TblCashSettlement");

                entity.Property(e => e.CashSettlementId).HasColumnName("CashSettlementID");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.LiabilitisedValue).HasColumnType("money");

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");
            });

            modelBuilder.Entity<OldTblCashSettlementReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId)
                    .HasName("PK_TblCashSettlementReason");

                entity.ToTable("old_TblCashSettlementReason");

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");

                entity.Property(e => e.ReasonText).HasMaxLength(50);
            });

            modelBuilder.Entity<OldTblCauseType>(entity =>
            {
                entity.HasKey(e => e.CauseTypeId)
                    .HasName("PK_TblCauseType");

                entity.ToTable("old_TblCauseType");

                entity.HasIndex(e => e.Description, "IX_TblCauseType")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");
            });

            modelBuilder.Entity<OldTblClaimComplaint>(entity =>
            {
                entity.HasKey(e => e.ClaimComplaintId)
                    .HasName("PK_TblClaimComplaint");

                entity.ToTable("old_TblClaimComplaint");

                entity.Property(e => e.AliasClaimComplaintId)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.SortSequence).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<OldTblClaimOrder>(entity =>
            {
                entity.HasKey(e => e.ClaimOrderId)
                    .HasName("PK_TblClaimOrder");

                entity.ToTable("old_TblClaimOrder");

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.CarriageBuy).HasColumnType("money");

                entity.Property(e => e.CarriageSell).HasColumnType("money");

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CreditRaised)
                    .HasColumnName("Credit_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Raised_Date");

                entity.Property(e => e.CreditReq)
                    .HasColumnName("Credit_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Req_Date");

                entity.Property(e => e.CreditSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Sage");

                entity.Property(e => e.CreditSync)
                    .HasColumnName("Credit_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Sync_Date");

                entity.Property(e => e.CreditVat)
                    .HasColumnName("Credit_VAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateCancelled).HasColumnType("datetime");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.InitiatingInspectionId).HasColumnName("InitiatingInspectionID");

                entity.Property(e => e.InvRaised)
                    .HasColumnName("Inv_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Raised_Date");

                entity.Property(e => e.InvReq)
                    .HasColumnName("Inv_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Req_Date");

                entity.Property(e => e.InvReqRaisedBy).HasColumnName("Inv_Req_RaisedBy");

                entity.Property(e => e.InvSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Sage");

                entity.Property(e => e.InvSync)
                    .HasColumnName("Inv_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Sync_Date");

                entity.Property(e => e.InvVat)
                    .HasColumnName("Inv_VAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalClaimItemId).HasColumnName("OriginalClaimItemID");

                entity.Property(e => e.PoRaised)
                    .HasColumnName("PO_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Raised_Date");

                entity.Property(e => e.PoReq)
                    .HasColumnName("PO_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Req_Date");

                entity.Property(e => e.PoReqRaisedBy).HasColumnName("PO_Req_RaisedBy");

                entity.Property(e => e.PoSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_Sage");

                entity.Property(e => e.PoSync)
                    .HasColumnName("PO_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Sync_Date");

                entity.Property(e => e.PoVat)
                    .HasColumnName("PO_VAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SageInvoiceNumber)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SagePonumber)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SagePONumber");

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.SingleUseItem).HasComment("If this field is 1, this claim order is for an unlisted item");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasComment("'AAA'");
            });

            modelBuilder.Entity<OldTblClaimStatus>(entity =>
            {
                entity.HasKey(e => e.ClaimStatusId)
                    .HasName("PK_TblClaimStatus");

                entity.ToTable("old_TblClaimStatus");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblClaimStatusSequence>(entity =>
            {
                entity.HasKey(e => e.ClaimStatusSequenceId)
                    .HasName("PK_TblClaimStatusSequence");

                entity.ToTable("old_TblClaimStatusSequence");
            });

            modelBuilder.Entity<OldTblClaimType>(entity =>
            {
                entity.HasKey(e => e.ClaimTypeId)
                    .HasName("PK_TblClaimType");

                entity.ToTable("old_TblClaimType");

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimTypeDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<OldTblClaimedItem>(entity =>
            {
                entity.HasKey(e => e.ClaimItemId)
                    .HasName("PK_TblClaimedItem");

                entity.ToTable("old_TblClaimedItem");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");

                entity.Property(e => e.ProductParticulars).HasMaxLength(200);

                entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");
            });

            modelBuilder.Entity<OldTblComplaintCommentsHistory>(entity =>
            {
                entity.HasKey(e => e.ClaimCommentsHistoryId)
                    .HasName("PK_TblComplaintCommentsHistory");

                entity.ToTable("old_TblComplaintCommentsHistory");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");
            });

            modelBuilder.Entity<OldTblComplaintStatus>(entity =>
            {
                entity.HasKey(e => e.ComplaintStatusId)
                    .HasName("PK_TblComplaintStatus");

                entity.ToTable("old_TblComplaintStatus");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblComplaintStatusHistory>(entity =>
            {
                entity.HasKey(e => e.ComplaintStatusHistoryId)
                    .HasName("PK_TblComplaintStatusHistory");

                entity.ToTable("old_TblComplaintStatusHistory");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.StatusComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId)
                    .HasName("PK_TblCountry");

                entity.ToTable("old_TblCountry");

                entity.Property(e => e.AliasCountryId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SageCountryCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblCustomer>(entity =>
            {
                entity.HasKey(e => e.CustomerId)
                    .HasName("PK_TblCustomer");

                entity.ToTable("old_TblCustomer");

                entity.Property(e => e.Address1)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Postcode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TitleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Town)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblCustomerInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_TblCustomerInvoices");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.CarriageToInsurance).HasColumnType("money");

                entity.Property(e => e.IsPhvatregistered).HasColumnName("IsPHVATRegistered");

                entity.Property(e => e.LaaccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("LAAccountRef");

                entity.Property(e => e.Laadress1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress1");

                entity.Property(e => e.Laadress2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress2");

                entity.Property(e => e.Laadress3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress3");

                entity.Property(e => e.Laadress4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress4");

                entity.Property(e => e.Laadress5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress5");

                entity.Property(e => e.Laname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAName");

                entity.Property(e => e.Laref)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LARef");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.Sbsref).HasColumnName("SBSREF");
            });

            modelBuilder.Entity<OldTblDataProvider>(entity =>
            {
                entity.HasKey(e => e.DataProviderId)
                    .HasName("PK_TblDataProvider");

                entity.ToTable("old_TblDataProvider");

                entity.Property(e => e.BkgHex)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FrgHex)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblDeliveryAdvice>(entity =>
            {
                entity.HasKey(e => e.DeliveryAdviceId)
                    .HasName("PK_TblDeliveryAdvice");

                entity.ToTable("old_TblDeliveryAdvice");

                entity.Property(e => e.ClientReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.OldTblDeliveryAdvices)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TblDeliveryAdvice_TblCustomer");

                entity.HasOne(d => d.DeliveryCompany)
                    .WithMany(p => p.OldTblDeliveryAdvices)
                    .HasForeignKey(d => d.DeliveryCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TblDeliveryAdvice_TblDeliveryCompany");
            });

            modelBuilder.Entity<OldTblDeliveryAdviceItem>(entity =>
            {
                entity.HasKey(e => e.DeliveryAdviceItemId)
                    .HasName("PK_TblDeliveryAdviceItem");

                entity.ToTable("old_TblDeliveryAdviceItem");

                entity.Property(e => e.BackupComments)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.BackupDate).HasColumnType("datetime");

                entity.Property(e => e.BackupRequestDate).HasColumnType("datetime");

                entity.Property(e => e.BackupRequested)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuarantineFromDate).HasColumnType("datetime");

                entity.Property(e => e.QuarantineToDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblDeliveryCompany>(entity =>
            {
                entity.HasKey(e => e.DeliveryCompanyId)
                    .HasName("PK_TblDeliveryCompany");

                entity.ToTable("old_TblDeliveryCompany");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblExternalProduct>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_TblExternalProduct");

                entity.ToTable("old_TblExternalProduct");

                entity.Property(e => e.AliasProductId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.Category)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DataProviderId).HasDefaultValueSql("((1))");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateSynchronized).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastSynchronized).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType).HasDefaultValueSql("((1))");

                entity.Property(e => e.PurchaseNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((5000))");

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.SageProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((4000))");

                entity.Property(e => e.SbsproductId).HasColumnName("SBSProductId");

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.SuperceededBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededComments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededDate).HasColumnType("datetime");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AAA')");
            });

            modelBuilder.Entity<OldTblInspectionHistory>(entity =>
            {
                entity.HasKey(e => e.InspectionHistoryId)
                    .HasName("PK_TblInspectionHistory");

                entity.ToTable("old_TblInspectionHistory");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblInspectionStatus>(entity =>
            {
                entity.HasKey(e => e.InspectionStatusId)
                    .HasName("PK_TblInspectionStatus");

                entity.ToTable("old_TblInspectionStatus");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblInspectionType>(entity =>
            {
                entity.HasKey(e => e.InspectionTypeId)
                    .HasName("PK_TblInspectionType");

                entity.ToTable("old_TblInspectionType");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblInstructionItem>(entity =>
            {
                entity.HasKey(e => e.InstructionItemId)
                    .HasName("PK_TblInstructionItem");

                entity.ToTable("old_TblInstructionItem");

                entity.Property(e => e.InstructionItemId).HasColumnName("InstructionItemID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.ItemDescription).HasMaxLength(200);

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");
            });

            modelBuilder.Entity<OldTblInsuranceClaim>(entity =>
            {
                entity.HasKey(e => e.InsuranceClaimId)
                    .HasName("PK_TblInsuranceClaim");

                entity.ToTable("old_TblInsuranceClaim");

                entity.Property(e => e.AccidentComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.Carriage).HasColumnType("money");

                entity.Property(e => e.ClaimDetails)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.CreditPhRaised)
                    .HasColumnName("Credit_Ph_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Raised_Date");

                entity.Property(e => e.CreditPhReq)
                    .HasColumnName("Credit_Ph_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Req_Date");

                entity.Property(e => e.CreditPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Ph_Sage");

                entity.Property(e => e.CreditPhSync)
                    .HasColumnName("Credit_Ph_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Sync_Date");

                entity.Property(e => e.CreditPhVat)
                    .HasColumnName("Credit_Ph_VAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateInstructed)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateXschanged)
                    .HasColumnType("datetime")
                    .HasColumnName("DateXSChanged");

                entity.Property(e => e.DeliveryAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryCountryId).HasDefaultValueSql("((1))");

                entity.Property(e => e.DeliveryName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Finalise).HasDefaultValueSql("((0))");

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.Fnolaccepted).HasColumnName("FNOLAccepted");

                entity.Property(e => e.FnolitemType).HasColumnName("FNOLItemType");

                entity.Property(e => e.Fnolperil).HasColumnName("FNOLPeril");

                entity.Property(e => e.FnolperilDetail).HasColumnName("FNOLPerilDetail");

                entity.Property(e => e.Handler)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Title)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredCompanyName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredConutryId).HasDefaultValueSql("((1))");

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredTitle)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InvPhRaised)
                    .HasColumnName("Inv_Ph_Raised")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Raised_Date");

                entity.Property(e => e.InvPhReq)
                    .HasColumnName("Inv_Ph_Req")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Req_Date");

                entity.Property(e => e.InvPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Ph_Sage");

                entity.Property(e => e.InvPhSync)
                    .HasColumnName("Inv_Ph_Sync")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Sync_Date");

                entity.Property(e => e.InvPhVat)
                    .HasColumnName("Inv_Ph_VAT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvVatPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_VAT_Ph_Sage");

                entity.Property(e => e.InvoiceCarriage).HasColumnType("money");

                entity.Property(e => e.InvoiceValue).HasColumnType("money");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress")
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.IsInsuredAcompany).HasColumnName("IsInsuredACompany");

                entity.Property(e => e.IsVatregistered).HasColumnName("IsVATRegistered");

                entity.Property(e => e.ItemTypeId).HasDefaultValueSql("((11))");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.LastActionDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LeadItemId).HasColumnName("LeadItemID");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.PhaseId)
                    .HasColumnName("PhaseID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Pocarriage)
                    .HasColumnType("money")
                    .HasColumnName("POCarriage");

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Povalue)
                    .HasColumnType("money")
                    .HasColumnName("POValue");

                entity.Property(e => e.Profit).HasColumnType("money");

                entity.Property(e => e.QuoteComments)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.SingleArticleLimit).HasColumnType("money");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VatregistrationNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("VATRegistrationNumber");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.XschangedBy)
                    .HasMaxLength(50)
                    .HasColumnName("XSChangedBy");

                entity.Property(e => e.Xspaid).HasColumnName("XSPaid");
            });

            modelBuilder.Entity<OldTblInsuranceClaimCommentsHistory>(entity =>
            {
                entity.HasKey(e => e.ClaimCommentsHistoryId)
                    .HasName("PK_TblInsuranceClaimCommentsHistory");

                entity.ToTable("old_TblInsuranceClaimCommentsHistory");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");
            });

            modelBuilder.Entity<OldTblInsuranceClaimDocument>(entity =>
            {
                entity.HasKey(e => e.DocumentId)
                    .HasName("PK_TblInsuranceClaimDocument");

                entity.ToTable("old_TblInsuranceClaimDocument");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DateAdded)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocDescrip).HasMaxLength(100);

                entity.Property(e => e.DocName).HasMaxLength(100);

                entity.Property(e => e.DocTypeId).HasColumnName("DocTypeID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<OldTblInsuranceClaimStatus>(entity =>
            {
                entity.HasKey(e => e.InsuranceClaimStatusId)
                    .HasName("PK_TblInsuranceClaimStatus");

                entity.ToTable("old_TblInsuranceClaimStatus");

                entity.HasIndex(e => e.Description, "IX_TblInsuranceClaimStatus")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblInsuranceClaimStatusHistory>(entity =>
            {
                entity.HasKey(e => e.InsuranceClaimStatusHistoryId)
                    .HasName("PK_TblInsuranceClaimStatusHistory");

                entity.ToTable("old_TblInsuranceClaimStatusHistory");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.StatusComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OldTblInsuranceCompany>(entity =>
            {
                entity.HasKey(e => e.InsuranceCompanyId)
                    .HasName("PK_TblInsuranceCompany");

                entity.ToTable("old_TblInsuranceCompany");

                entity.Property(e => e.AccountsNotes).HasMaxLength(4000);

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreditController).HasDefaultValueSql("((9))");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Emailalert).HasColumnName("emailalert");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SbsfaxContact)
                    .HasMaxLength(50)
                    .HasColumnName("SBSFaxContact");

                entity.Property(e => e.SbsphoneContact)
                    .HasMaxLength(50)
                    .HasColumnName("SBSPhoneContact");

                entity.Property(e => e.UserName)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblInsuranceCompanyType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("PK_TblInsuranceCompanyType");

                entity.ToTable("old_TblInsuranceCompanyType");

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<OldTblItem>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_TblItem");

                entity.ToTable("old_TblItem");

                entity.HasIndex(e => e.ItemNumber, "IX_TblItem_1")
                    .IsUnique();

                entity.Property(e => e.BuyerAddress1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerAddress2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerAddress3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCounty)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerPostcode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerTitleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerTown)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ConsignmentReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ContractReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DeliveryReference)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.InspectionDetails)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Make)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Model)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.NotifyDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SaleDate).HasColumnType("datetime");

                entity.Property(e => e.SaleType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesChannel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalesComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SalesPrice).HasColumnType("money");

                entity.Property(e => e.SalesRef)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDate).HasColumnType("datetime");

                entity.Property(e => e.StockConditionDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tag)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Warranty)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DeliverAdvice)
                    .WithMany(p => p.OldTblItems)
                    .HasForeignKey(d => d.DeliverAdviceId)
                    .HasConstraintName("FK_TblItem_TblDeliveryAdvice");

                entity.HasOne(d => d.ItemType)
                    .WithMany(p => p.OldTblItems)
                    .HasForeignKey(d => d.ItemTypeId)
                    .HasConstraintName("FK_TblItem_TblItemType");

                entity.HasOne(d => d.StockCondition)
                    .WithMany(p => p.OldTblItems)
                    .HasForeignKey(d => d.StockConditionId)
                    .HasConstraintName("FK_TblItem_TblStockCondition");
            });

            modelBuilder.Entity<OldTblItemAttribute>(entity =>
            {
                entity.HasKey(e => e.ItemAttributeId)
                    .HasName("PK_TblItemAttribute");

                entity.ToTable("old_TblItemAttribute");

                entity.Property(e => e.AttributeName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.AttributeValue)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.InspectionAttributeValue)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblItemPart>(entity =>
            {
                entity.HasKey(e => e.ItemPartId)
                    .HasName("PK_TblItemPart");

                entity.ToTable("old_TblItemPart");

                entity.Property(e => e.CostPrice).HasColumnType("money");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SalesPrice).HasColumnType("money");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OldTblItemParts)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TblItemPart_TblItem");
            });

            modelBuilder.Entity<OldTblItemStatusHistory>(entity =>
            {
                entity.HasKey(e => e.ItemStatusHistoryId)
                    .HasName("PK_TblItemStatusHistory");

                entity.ToTable("old_TblItemStatusHistory");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDate).HasColumnType("datetime");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OldTblItemStatusHistories)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TblItemStatusHistory_TblItem");
            });

            modelBuilder.Entity<OldTblItemType>(entity =>
            {
                entity.HasKey(e => e.ItemTypeId)
                    .HasName("PK_TblItemType");

                entity.ToTable("old_TblItemType");

                entity.HasIndex(e => e.Description, "IX_TblItemType")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblItemTypeAttribute>(entity =>
            {
                entity.HasKey(e => e.ItemTypeAttributeId)
                    .HasName("PK_TblItemTypeAttribute");

                entity.ToTable("old_TblItemTypeAttribute");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblLossAdjuster>(entity =>
            {
                entity.HasKey(e => e.LossAdjusterId)
                    .HasName("PK_TblLossAdjuster");

                entity.ToTable("old_TblLossAdjuster");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AccountsNotes).HasMaxLength(4000);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InsCompanyId)
                    .HasColumnName("InsCompanyID")
                    .HasDefaultValueSql("((14))");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress")
                    .HasDefaultValueSql("('127.0.0.1')");

                entity.Property(e => e.LossAdjusterGroupId).HasDefaultValueSql("((0))");

                entity.Property(e => e.MinimumValueToQuote)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.NfuType)
                    .HasColumnName("NFU_Type")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PostCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId)
                    .HasColumnName("RegionID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AAA')");

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblLossAdjusterUpdate>(entity =>
            {
                entity.HasKey(e => e.LauId)
                    .HasName("PK_TblLossAdjusterUpdates");

                entity.ToTable("old_TblLossAdjusterUpdates");

                entity.Property(e => e.LauId).HasColumnName("lau_ID");

                entity.Property(e => e.LauClaimId).HasColumnName("lau_ClaimID");

                entity.Property(e => e.LauContactMethod)
                    .HasMaxLength(200)
                    .HasColumnName("lau_ContactMethod");

                entity.Property(e => e.LauDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lau_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LauDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lau_DeliveryDate");

                entity.Property(e => e.LauDetails)
                    .HasMaxLength(1000)
                    .HasColumnName("lau_Details");

                entity.Property(e => e.LauFirstContact).HasColumnName("lau_FirstContact");

                entity.Property(e => e.LauNextAction)
                    .HasMaxLength(200)
                    .HasColumnName("lau_NextAction");

                entity.Property(e => e.LauNextActionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lau_NextActionDate");

                entity.Property(e => e.LauSent).HasColumnName("lau_Sent");

                entity.Property(e => e.LauStatusName)
                    .HasMaxLength(100)
                    .HasColumnName("lau_StatusName");
            });

            modelBuilder.Entity<OldTblNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_TblNumber");
            });

            modelBuilder.Entity<OldTblProduct>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_TblProduct");

                entity.ToTable("old_TblProduct");

                entity.Property(e => e.AliasProductId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.Category)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateSynchronized).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastSynchronized).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LineItemCategory).HasDefaultValueSql("((2))");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.SageProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.SuperceededBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededComments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededDate).HasColumnType("datetime");

                entity.Property(e => e.UnlistedProduct).HasComment("If the product is unlisted, it is for single use only, and so will not be shown in any lists");

                entity.Property(e => e.UsedFrequently).HasComment("This field marks whether this item is a frequent use item. Only frequently used products are displayed all the time in drop down lists");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AAA')");
            });

            modelBuilder.Entity<OldTblProductAttributeValue>(entity =>
            {
                entity.HasKey(e => e.ProductAttributeValueId)
                    .HasName("PK_TblProductAttributeValue");

                entity.ToTable("old_TblProductAttributeValue");

                entity.Property(e => e.ProductAttributeValueId).HasColumnName("ProductAttributeValueID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Value).HasMaxLength(100);
            });

            modelBuilder.Entity<OldTblProductBk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_TblProduct_bk");

                entity.Property(e => e.AliasProductId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.Category)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateSynchronized).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastSynchronized).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.SageProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.SuperceededBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededComments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededDate).HasColumnType("datetime");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblProductInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_TblProductInvoices");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.CarriageToInsurance).HasColumnType("money");

                entity.Property(e => e.IsPhvatregistered).HasColumnName("IsPHVATRegistered");

                entity.Property(e => e.LaaccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("LAAccountRef");

                entity.Property(e => e.Laadress1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress1");

                entity.Property(e => e.Laadress2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress2");

                entity.Property(e => e.Laadress3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress3");

                entity.Property(e => e.Laadress4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress4");

                entity.Property(e => e.Laadress5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress5");

                entity.Property(e => e.Laname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAName");

                entity.Property(e => e.Laref)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LARef");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.Sbsref).HasColumnName("SBSREF");
            });

            modelBuilder.Entity<OldTblStockCondition>(entity =>
            {
                entity.HasKey(e => e.StockConditionId)
                    .HasName("PK_TblStockCondition");

                entity.ToTable("old_TblStockCondition");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblSubCauseType>(entity =>
            {
                entity.HasKey(e => e.SubCauseTypeId)
                    .HasName("PK_TblSubCauseType");

                entity.ToTable("old_TblSubCauseType");

                entity.HasIndex(e => e.Description, "IX_TblSubCauseType")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");
            });

            modelBuilder.Entity<OldTblSupplier>(entity =>
            {
                entity.HasKey(e => e.SupplierId)
                    .HasName("PK_TblSupplier");

                entity.ToTable("old_TblSupplier");

                entity.Property(e => e.AccountHandler).HasDefaultValueSql("((9))");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.AccountsNotes).HasMaxLength(4000);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AutoConfirmPo).HasColumnName("AutoConfirmPO");

                entity.Property(e => e.Carriage).HasColumnType("money");

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailCc)
                    .HasMaxLength(50)
                    .HasColumnName("Email_CC");

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NoPorequired).HasColumnName("NoPORequired");

                entity.Property(e => e.PostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VatregistrationNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VATRegistrationNo");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AAA')");

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblTriggeredEvent>(entity =>
            {
                entity.HasKey(e => e.EventId)
                    .HasName("PK_TblTriggeredEvents");

                entity.ToTable("old_TblTriggeredEvents");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EventSource).HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");
            });

            modelBuilder.Entity<OldTblUser>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK_TblUser");

                entity.ToTable("old_TblUser");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsClaimHandler)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ntlogon)
                    .HasMaxLength(50)
                    .HasColumnName("NTLogon");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TitleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblUserLog>(entity =>
            {
                entity.HasKey(e => e.UserLogId)
                    .HasName("PK_TblUserLog");

                entity.ToTable("old_TblUserLog");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.LoginTime).HasColumnType("datetime");

                entity.Property(e => e.LogoutTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SessionId)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldTblWarranty>(entity =>
            {
                entity.HasKey(e => e.WarrantyId)
                    .HasName("PK_TblWarranty");

                entity.ToTable("old_TblWarranty");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ItemType)
                    .WithMany(p => p.OldTblWarranties)
                    .HasForeignKey(d => d.ItemTypeId)
                    .HasConstraintName("FK_TblWarranty_TblItemType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.OldTblWarranties)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TblWarranty_TblUser");
            });

            modelBuilder.Entity<OldTempInspection>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_TempInspections");

                entity.Property(e => e.SInspectionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_inspection_id");
            });

            modelBuilder.Entity<OldTempInsuranceClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_TempInsuranceClaim");

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.Carriage).HasColumnType("money");

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimValue).HasColumnType("money");

                entity.Property(e => e.ClientLastName).HasMaxLength(50);

                entity.Property(e => e.DeliveryAddress1).HasMaxLength(50);

                entity.Property(e => e.DeliveryAddress2).HasMaxLength(50);

                entity.Property(e => e.DeliveryAddress3).HasMaxLength(50);

                entity.Property(e => e.DeliveryAddress4).HasMaxLength(50);

                entity.Property(e => e.DeliveryPostCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FnolitemType).HasColumnName("FNOLItemType");

                entity.Property(e => e.Fnolperil).HasColumnName("FNOLPeril");

                entity.Property(e => e.FnolperilDetail).HasColumnName("FNOLPerilDetail");

                entity.Property(e => e.Handler).HasMaxLength(200);

                entity.Property(e => e.HomeTel).HasMaxLength(50);

                entity.Property(e => e.InstrDate).HasColumnType("datetime");

                entity.Property(e => e.Insured2FirstName).HasMaxLength(50);

                entity.Property(e => e.Insured2LastName).HasMaxLength(50);

                entity.Property(e => e.Insured2Title).HasMaxLength(50);

                entity.Property(e => e.InsuredAddress1).HasMaxLength(50);

                entity.Property(e => e.InsuredAddress2).HasMaxLength(50);

                entity.Property(e => e.InsuredAddress3).HasMaxLength(50);

                entity.Property(e => e.InsuredAddress4).HasMaxLength(50);

                entity.Property(e => e.InsuredCompanyName).HasMaxLength(50);

                entity.Property(e => e.InsuredFirstName).HasMaxLength(50);

                entity.Property(e => e.InsuredTitle).HasMaxLength(20);

                entity.Property(e => e.IsInsuredAcompany).HasColumnName("IsInsuredACompany");

                entity.Property(e => e.IsVatregistered).HasColumnName("IsVATRegistered");

                entity.Property(e => e.Lareference).HasColumnName("LAReference");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.PolicyNumber).HasMaxLength(200);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.VatregistrationNumber)
                    .HasMaxLength(50)
                    .HasColumnName("VATRegistrationNumber");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTel).HasMaxLength(50);
            });

            modelBuilder.Entity<OldWClaim>(entity =>
            {
                entity.HasKey(e => e.WClaimId)
                    .HasName("PK_w_claims");

                entity.ToTable("old_w_claims");

                entity.Property(e => e.WClaimId).HasColumnName("w_claim_id");

                entity.Property(e => e.WClaimAdd1)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_add1");

                entity.Property(e => e.WClaimAdd2)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_add2");

                entity.Property(e => e.WClaimAdd3)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_add3");

                entity.Property(e => e.WClaimAltadd1)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_altadd1");

                entity.Property(e => e.WClaimAltadd2)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_altadd2");

                entity.Property(e => e.WClaimAltadd3)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_altadd3");

                entity.Property(e => e.WClaimAltpostcode)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_altpostcode");

                entity.Property(e => e.WClaimComments)
                    .HasColumnType("ntext")
                    .HasColumnName("w_claim_comments");

                entity.Property(e => e.WClaimCondition)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_condition");

                entity.Property(e => e.WClaimDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("w_claim_damage_details");

                entity.Property(e => e.WClaimDate)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_date");

                entity.Property(e => e.WClaimDeliveryComp).HasColumnName("w_claim_delivery_comp");

                entity.Property(e => e.WClaimDeliveryRef)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_delivery_ref");

                entity.Property(e => e.WClaimDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("w_claim_details");

                entity.Property(e => e.WClaimEngineer)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_engineer");

                entity.Property(e => e.WClaimExpDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_exp_delivery_date");

                entity.Property(e => e.WClaimFaultTypeId).HasColumnName("w_claim_fault_type_id");

                entity.Property(e => e.WClaimFax)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_fax");

                entity.Property(e => e.WClaimFromCompany).HasColumnName("w_claim_from_company");

                entity.Property(e => e.WClaimHandler).HasColumnName("w_claim_handler");

                entity.Property(e => e.WClaimInspectionResultId).HasColumnName("w_claim_inspection_result_id");

                entity.Property(e => e.WClaimItemCategory).HasColumnName("w_claim_item_category");

                entity.Property(e => e.WClaimItemType).HasColumnName("w_claim_item_type");

                entity.Property(e => e.WClaimMadeWithinInitialPeriod).HasColumnName("w_claim_made_within_initial_period");

                entity.Property(e => e.WClaimManufacturer)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_manufacturer");

                entity.Property(e => e.WClaimMobile)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_mobile");

                entity.Property(e => e.WClaimModel)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_model");

                entity.Property(e => e.WClaimName)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_name");

                entity.Property(e => e.WClaimOpen)
                    .IsRequired()
                    .HasColumnName("w_claim_open")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WClaimPhone)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_phone");

                entity.Property(e => e.WClaimPolicyExpires)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_policy_expires");

                entity.Property(e => e.WClaimPolicyId).HasColumnName("w_claim_policy_id");

                entity.Property(e => e.WClaimPolicyNum)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_policy_num");

                entity.Property(e => e.WClaimPolicyStart)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_policy_start");

                entity.Property(e => e.WClaimPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_postcode");

                entity.Property(e => e.WClaimRepairType)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_repair_type");

                entity.Property(e => e.WClaimRepairer).HasColumnName("w_claim_repairer");

                entity.Property(e => e.WClaimSerial)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_serial");

                entity.Property(e => e.WClaimStatus).HasColumnName("w_claim_status");
            });

            modelBuilder.Entity<OldWClaimAttrib>(entity =>
            {
                entity.HasKey(e => e.WCaId)
                    .HasName("PK_w_claim_attribs");

                entity.ToTable("old_w_claim_attribs");

                entity.Property(e => e.WCaId).HasColumnName("w_ca_id");

                entity.Property(e => e.WCaAttribId).HasColumnName("w_ca_attrib_id");

                entity.Property(e => e.WCaAttribVal)
                    .HasMaxLength(50)
                    .HasColumnName("w_ca_attrib_val");

                entity.Property(e => e.WCaClaimId).HasColumnName("w_ca_claim_id");
            });

            modelBuilder.Entity<OldWClaimStatus>(entity =>
            {
                entity.HasKey(e => e.WClaimStatusId)
                    .HasName("PK_w_claim_status");

                entity.ToTable("old_w_claim_status");

                entity.Property(e => e.WClaimStatusId).HasColumnName("w_claim_status_id");

                entity.Property(e => e.WClaimStatusClose).HasColumnName("w_claim_status_close");

                entity.Property(e => e.WClaimStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_status_desc");
            });

            modelBuilder.Entity<OldWClaimStatusHistory>(entity =>
            {
                entity.HasKey(e => e.WClaimShId)
                    .HasName("PK_w_claim_status_history");

                entity.ToTable("old_w_claim_status_history");

                entity.Property(e => e.WClaimShId).HasColumnName("w_claim_sh_id");

                entity.Property(e => e.WClaimShClaimId).HasColumnName("w_claim_sh_claim_id");

                entity.Property(e => e.WClaimShComments)
                    .HasColumnType("ntext")
                    .HasColumnName("w_claim_sh_comments");

                entity.Property(e => e.WClaimShDate)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_sh_date");

                entity.Property(e => e.WClaimShHandler).HasColumnName("w_claim_sh_handler");

                entity.Property(e => e.WClaimShNewStatus).HasColumnName("w_claim_sh_new_status");
            });

            modelBuilder.Entity<OldZzTestTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("old_zz.Test_Table");

                entity.Property(e => e.Test)
                    .HasMaxLength(10)
                    .HasColumnName("test")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.ToTable("Order", "Supplier");

                entity.HasIndex(e => e.PurchaseOrderNumber, "IXNC_Order_PurchaseOrderNumber_B5444");

                entity.HasIndex(e => e.PurchaseOrderNumber, "IXNC_Order_PurchaseOrderNumber_B6180");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CustomerAddress1).HasMaxLength(200);

                entity.Property(e => e.CustomerAddress2).HasMaxLength(200);

                entity.Property(e => e.CustomerAddress4).HasMaxLength(200);

                entity.Property(e => e.CustomerContactNumber).HasMaxLength(200);

                entity.Property(e => e.CustomerName).HasMaxLength(200);

                entity.Property(e => e.CustomerPostCode).HasMaxLength(200);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryAddress1).HasMaxLength(200);

                entity.Property(e => e.DeliveryAddress2).HasMaxLength(200);

                entity.Property(e => e.DeliveryAddress4).HasMaxLength(200);

                entity.Property(e => e.DeliveryContactNumber).HasMaxLength(200);

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryName).HasMaxLength(200);

                entity.Property(e => e.DeliveryPostCode).HasMaxLength(200);

                entity.Property(e => e.Guid)
                    .HasMaxLength(200)
                    .HasColumnName("GUID");

                entity.Property(e => e.InvoiceNumber).HasMaxLength(200);

                entity.Property(e => e.MessageSent).HasColumnType("text");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.ProductParentId).HasMaxLength(200);

                entity.Property(e => e.Sbsref).HasColumnName("SBSRef");

                entity.Property(e => e.Success).HasMaxLength(200);

                entity.Property(e => e.SupplierName).HasMaxLength(200);
            });

            modelBuilder.Entity<OrderAccepted>(entity =>
            {
                entity.ToTable("OrderAccepted", "Supplier");

                entity.HasIndex(e => e.Ponumber, "IXNC_OrderAccepted_PONumber_06F27");

                entity.HasIndex(e => e.Ponumber, "IXNC_OrderAccepted_PONumber_5692B");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.SupplierName).HasMaxLength(200);
            });

            modelBuilder.Entity<OrderDelivered>(entity =>
            {
                entity.ToTable("OrderDelivered", "Supplier");

                entity.HasIndex(e => e.OrderNumber, "IXNC_OrderDelivered_OrderNumber_EF197");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CourierName).HasMaxLength(200);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryTime).HasColumnType("datetime");

                entity.Property(e => e.OrderDate).HasColumnType("date");

                entity.Property(e => e.SupplierName).HasMaxLength(200);
            });

            modelBuilder.Entity<OrderPicked>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OrderPicked", "Supplier");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SupplierName).HasMaxLength(200);
            });

            modelBuilder.Entity<Ordercheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ordercheck", "Site");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Outcome>(entity =>
            {
                entity.ToTable("Outcome", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdmiralOutcome).HasMaxLength(50);

                entity.Property(e => e.AllianzOutcome).HasMaxLength(50);

                entity.Property(e => e.CoveaOutcome).HasMaxLength(50);

                entity.Property(e => e.LloydsOutcome).HasMaxLength(50);

                entity.Property(e => e.MioutcomeId).HasColumnName("MIOutcomeID");

                entity.Property(e => e.Outcome1)
                    .HasMaxLength(50)
                    .HasColumnName("Outcome");
            });

            modelBuilder.Entity<Outcome1>(entity =>
            {
                entity.ToTable("Outcome", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<Outcome2>(entity =>
            {
                entity.HasKey(e => e.OutcomeId);

                entity.ToTable("Outcome", "Inspection");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.OutcomeName).HasMaxLength(50);
            });

            modelBuilder.Entity<OutcomeAction>(entity =>
            {
                entity.HasKey(e => e.Oaid)
                    .HasName("PK_FNOL.Outcome_Actions");

                entity.ToTable("Outcome_Actions", "FNOL");

                entity.Property(e => e.Oaid).HasColumnName("OAID");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");
            });

            modelBuilder.Entity<OutcomeCommodity>(entity =>
            {
                entity.ToTable("Outcome_Commodity", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommodityId).HasColumnName("CommodityID");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.HasOne(d => d.Commodity)
                    .WithMany(p => p.OutcomeCommodities)
                    .HasForeignKey(d => d.CommodityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Outcome_Commodity_Value");

                entity.HasOne(d => d.Outcome)
                    .WithMany(p => p.OutcomeCommodities)
                    .HasForeignKey(d => d.OutcomeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Outcome_Commodity_Outcome");
            });

            modelBuilder.Entity<OutcomeInsurer>(entity =>
            {
                entity.ToTable("Outcome_Insurer", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsurerId).HasColumnName("InsurerID");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.HasOne(d => d.Insurer)
                    .WithMany(p => p.OutcomeInsurers)
                    .HasForeignKey(d => d.InsurerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Outcome_Insurer_Outcome_Insurer");

                entity.HasOne(d => d.Outcome)
                    .WithMany(p => p.OutcomeInsurers)
                    .HasForeignKey(d => d.OutcomeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Outcome_Insurer_Outcome");
            });

            modelBuilder.Entity<OutcomeSupplier>(entity =>
            {
                entity.ToTable("Outcome_Supplier", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.HasOne(d => d.Outcome)
                    .WithMany(p => p.OutcomeSuppliers)
                    .HasForeignKey(d => d.OutcomeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Outcome_Supplier_Outcome");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.OutcomeSuppliers)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Outcome_Supplier_Supplier");
            });

            modelBuilder.Entity<OverheadSupplier>(entity =>
            {
                entity.HasKey(e => e.OhsId);

                entity.ToTable("Overhead_Supplier", "Accounts");

                entity.Property(e => e.OhsId).HasColumnName("ohs_id");

                entity.Property(e => e.OhsAccountRef)
                    .HasMaxLength(20)
                    .HasColumnName("ohs_AccountRef");

                entity.Property(e => e.OhsAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("ohs_Address1");

                entity.Property(e => e.OhsAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("ohs_Address2");

                entity.Property(e => e.OhsAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("ohs_Address3");

                entity.Property(e => e.OhsAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("ohs_Address4");

                entity.Property(e => e.OhsAmendedBy).HasColumnName("ohs_AmendedBy");

                entity.Property(e => e.OhsAmendedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("ohs_AmendedOn");

                entity.Property(e => e.OhsContact)
                    .HasMaxLength(50)
                    .HasColumnName("ohs_Contact");

                entity.Property(e => e.OhsCreatedBy).HasColumnName("ohs_CreatedBy");

                entity.Property(e => e.OhsCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("ohs_CreatedOn");

                entity.Property(e => e.OhsDeleted).HasColumnName("ohs_deleted");

                entity.Property(e => e.OhsEmail)
                    .HasMaxLength(50)
                    .HasColumnName("ohs_Email");

                entity.Property(e => e.OhsFax)
                    .HasMaxLength(20)
                    .HasColumnName("ohs_Fax");

                entity.Property(e => e.OhsName)
                    .HasMaxLength(50)
                    .HasColumnName("ohs_Name");

                entity.Property(e => e.OhsPostcode)
                    .HasMaxLength(20)
                    .HasColumnName("ohs_Postcode");

                entity.Property(e => e.OhsTelephone)
                    .HasMaxLength(20)
                    .HasColumnName("ohs_Telephone");
            });

            modelBuilder.Entity<PageUser>(entity =>
            {
                entity.ToTable("PageUser", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .HasColumnName("URL");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<PaidExcess>(entity =>
            {
                entity.HasKey(e => e.PeId);

                entity.ToTable("PaidExcess", "Claim");

                entity.Property(e => e.PeId).HasColumnName("PE_ID");

                entity.Property(e => e.AmountPaid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Amount_Paid");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.PaidDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Paid_Date");
            });

            modelBuilder.Entity<Parameter>(entity =>
            {
                entity.ToTable("Parameter", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ParentParameterId).HasColumnName("ParentParameterID");
            });

            modelBuilder.Entity<Parameter1>(entity =>
            {
                entity.ToTable("Parameter", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LookUpParameter)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ParentParameterId).HasColumnName("ParentParameterID");

                entity.Property(e => e.Phalias)
                    .HasMaxLength(256)
                    .HasColumnName("PHAlias");
            });

            modelBuilder.Entity<Parameter20191209>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Parameter20191209", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ParentParameterId).HasColumnName("ParentParameterID");

                entity.Property(e => e.Phalias)
                    .HasMaxLength(256)
                    .HasColumnName("PHAlias");
            });

            modelBuilder.Entity<Path>(entity =>
            {
                entity.ToTable("Path", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Path1)
                    .HasMaxLength(200)
                    .HasColumnName("Path");
            });

            modelBuilder.Entity<PaulMiCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaulMI_CreditNotes", "MI");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue).HasColumnType("money");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.InvoiceGross).HasColumnName("INVOICE_GROSS");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Desc");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaulsMi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaulsMI", "MI");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimTypeDescription).HasMaxLength(50);

                entity.Property(e => e.ClaimValue).HasColumnType("money");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Close_date");

                entity.Property(e => e.CloseMonth).HasColumnName("Close_month");

                entity.Property(e => e.CloseYear).HasColumnName("Close_year");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.InvoiceGross).HasColumnName("INVOICE_GROSS");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Desc");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pbcat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pbcat", "Site");

                entity.Property(e => e.PbdFchr).HasColumnName("pbd_fchr");

                entity.Property(e => e.PbdFfce)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("pbd_ffce")
                    .IsFixedLength();

                entity.Property(e => e.PbdFhgt).HasColumnName("pbd_fhgt");

                entity.Property(e => e.PbdFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbd_fitl")
                    .IsFixedLength();

                entity.Property(e => e.PbdFptc).HasColumnName("pbd_fptc");

                entity.Property(e => e.PbdFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbd_funl")
                    .IsFixedLength();

                entity.Property(e => e.PbdFwgt).HasColumnName("pbd_fwgt");

                entity.Property(e => e.PbhFchr).HasColumnName("pbh_fchr");

                entity.Property(e => e.PbhFfce)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("pbh_ffce")
                    .IsFixedLength();

                entity.Property(e => e.PbhFhgt).HasColumnName("pbh_fhgt");

                entity.Property(e => e.PbhFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbh_fitl")
                    .IsFixedLength();

                entity.Property(e => e.PbhFptc).HasColumnName("pbh_fptc");

                entity.Property(e => e.PbhFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbh_funl")
                    .IsFixedLength();

                entity.Property(e => e.PbhFwgt).HasColumnName("pbh_fwgt");

                entity.Property(e => e.PblFchr).HasColumnName("pbl_fchr");

                entity.Property(e => e.PblFfce)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("pbl_ffce")
                    .IsFixedLength();

                entity.Property(e => e.PblFhgt).HasColumnName("pbl_fhgt");

                entity.Property(e => e.PblFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbl_fitl")
                    .IsFixedLength();

                entity.Property(e => e.PblFptc).HasColumnName("pbl_fptc");

                entity.Property(e => e.PblFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbl_funl")
                    .IsFixedLength();

                entity.Property(e => e.PblFwgt).HasColumnName("pbl_fwgt");

                entity.Property(e => e.PbtCmnt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbt_cmnt");

                entity.Property(e => e.PbtOwnr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbt_ownr")
                    .IsFixedLength();

                entity.Property(e => e.PbtTid).HasColumnName("pbt_tid");

                entity.Property(e => e.PbtTnam)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbt_tnam")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pbcatcol>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pbcatcol", "Site");

                entity.Property(e => e.PbcBmap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pbc_bmap")
                    .IsFixedLength();

                entity.Property(e => e.PbcCase).HasColumnName("pbc_case");

                entity.Property(e => e.PbcCid).HasColumnName("pbc_cid");

                entity.Property(e => e.PbcCmnt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_cmnt");

                entity.Property(e => e.PbcCnam)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbc_cnam")
                    .IsFixedLength();

                entity.Property(e => e.PbcEdit)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("pbc_edit");

                entity.Property(e => e.PbcHdr)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_hdr");

                entity.Property(e => e.PbcHght).HasColumnName("pbc_hght");

                entity.Property(e => e.PbcHpos).HasColumnName("pbc_hpos");

                entity.Property(e => e.PbcInit)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_init");

                entity.Property(e => e.PbcJtfy).HasColumnName("pbc_jtfy");

                entity.Property(e => e.PbcLabl)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_labl");

                entity.Property(e => e.PbcLpos).HasColumnName("pbc_lpos");

                entity.Property(e => e.PbcMask)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("pbc_mask");

                entity.Property(e => e.PbcOwnr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbc_ownr")
                    .IsFixedLength();

                entity.Property(e => e.PbcPtrn)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("pbc_ptrn");

                entity.Property(e => e.PbcTag)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbc_tag");

                entity.Property(e => e.PbcTid).HasColumnName("pbc_tid");

                entity.Property(e => e.PbcTnam)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbc_tnam")
                    .IsFixedLength();

                entity.Property(e => e.PbcWdth).HasColumnName("pbc_wdth");
            });

            modelBuilder.Entity<Pbcatedt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pbcatedt", "Site");

                entity.Property(e => e.PbeCntr).HasColumnName("pbe_cntr");

                entity.Property(e => e.PbeEdit)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbe_edit");

                entity.Property(e => e.PbeFlag).HasColumnName("pbe_flag");

                entity.Property(e => e.PbeName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbe_name");

                entity.Property(e => e.PbeSeqn).HasColumnName("pbe_seqn");

                entity.Property(e => e.PbeType).HasColumnName("pbe_type");

                entity.Property(e => e.PbeWork)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("pbe_work")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pbcatfmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pbcatfmt", "Site");

                entity.Property(e => e.PbfCntr).HasColumnName("pbf_cntr");

                entity.Property(e => e.PbfFrmt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbf_frmt");

                entity.Property(e => e.PbfName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbf_name");

                entity.Property(e => e.PbfType).HasColumnName("pbf_type");
            });

            modelBuilder.Entity<Pbcatvld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pbcatvld", "Site");

                entity.Property(e => e.PbvCntr).HasColumnName("pbv_cntr");

                entity.Property(e => e.PbvMsg)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbv_msg");

                entity.Property(e => e.PbvName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pbv_name");

                entity.Property(e => e.PbvType).HasColumnName("pbv_type");

                entity.Property(e => e.PbvVald)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("pbv_vald");
            });

            modelBuilder.Entity<PerilAnalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PerilAnalysis");

                entity.Property(e => e.AvivaLossType)
                    .HasMaxLength(100)
                    .HasColumnName("Aviva_LossType");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ClaimPerilDetailId).HasColumnName("ClaimPerilDetailID");

                entity.Property(e => e.ClaimPerilId).HasColumnName("ClaimPerilID");

                entity.Property(e => e.Column9)
                    .HasMaxLength(1)
                    .HasColumnName("column9");

                entity.Property(e => e.Guid).HasMaxLength(50);

                entity.Property(e => e.MatchedPerilDetailId).HasColumnName("Matched_PerilDetailID");

                entity.Property(e => e.MatchedPerilDetailName)
                    .HasMaxLength(50)
                    .HasColumnName("Matched_Peril_Detail_Name");

                entity.Property(e => e.MatchedPerilId).HasColumnName("Matched_PerilID");
            });

            modelBuilder.Entity<Phase>(entity =>
            {
                entity.ToTable("Phase", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerAlias).HasMaxLength(200);

                entity.Property(e => e.Level)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Level 1 - This is a claim phase, Level 2 - This is an item phase");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PreRequisitePhaseId).HasColumnName("PreRequisitePhaseID");
            });

            modelBuilder.Entity<PhaseHistory>(entity =>
            {
                entity.ToTable("PhaseHistory", "Claim");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.User).HasMaxLength(50);

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.PhaseHistories)
                    .HasForeignKey(d => d.PhaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhaseHistory_Phase");
            });

            modelBuilder.Entity<PiMaster>(entity =>
            {
                entity.HasKey(e => e.PimId);

                entity.ToTable("PI_Master", "Accounts");

                entity.HasIndex(e => e.PimAccountingPeriod, "IXNC_PI_Master_pim_accounting_period_6C07F");

                entity.HasIndex(e => e.PimAccountingPeriod, "IXNC_PI_Master_pim_accounting_period_B258A");

                entity.HasIndex(e => e.PimPomId, "IXNC_PI_Master_pim_pom_id_9048F");

                entity.HasIndex(e => new { e.PimSupplierId, e.PimTransRef }, "IXNC_PI_Master_pim_supplier_id_pim_trans_ref_C2016");

                entity.Property(e => e.PimId).HasColumnName("pim_id");

                entity.Property(e => e.PimAccountingPeriod).HasColumnName("pim_accounting_period");

                entity.Property(e => e.PimCarrDiff)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pim_carr_diff");

                entity.Property(e => e.PimCreatedBy).HasColumnName("pim_created_by");

                entity.Property(e => e.PimCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("pim_created_on");

                entity.Property(e => e.PimDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pim_date");

                entity.Property(e => e.PimDiffText)
                    .HasMaxLength(2000)
                    .HasColumnName("pim_diff_text");

                entity.Property(e => e.PimEditedBy).HasColumnName("pim_edited_by");

                entity.Property(e => e.PimEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("pim_edited_on");

                entity.Property(e => e.PimGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pim_gross");

                entity.Property(e => e.PimNet)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pim_net");

                entity.Property(e => e.PimNetDiff)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pim_net_diff");

                entity.Property(e => e.PimPomId).HasColumnName("pim_pom_id");

                entity.Property(e => e.PimPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pim_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.PimSupplierId).HasColumnName("pim_supplier_id");

                entity.Property(e => e.PimTransPeriod).HasColumnName("pim_trans_period");

                entity.Property(e => e.PimTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("pim_trans_ref");

                entity.Property(e => e.PimVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pim_vat");
            });

            modelBuilder.Entity<Picture>(entity =>
            {
                entity.ToTable("Picture", "Product");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Mime)
                    .HasMaxLength(50)
                    .HasColumnName("MIME");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");
            });

            modelBuilder.Entity<PoDetail>(entity =>
            {
                entity.HasKey(e => e.PodId);

                entity.ToTable("PO_Detail", "Accounts");

                entity.HasIndex(e => e.PodClaimOrderId, "IXNC_PO_Detail_pod_ClaimOrderId_70980");

                entity.HasIndex(e => e.PodPomId, "IXNC_PO_Detail_pod_pom_id_ACF4F");

                entity.HasIndex(e => new { e.PodPomId, e.PodId, e.PodClaimOrderId }, "_dta_index_PO_Detail_16_1259151531__K2_K1_K4_5_6_7_9");

                entity.HasIndex(e => new { e.PodClaimOrderId, e.PodId, e.PodPomId }, "_dta_index_PO_Detail_9_1259151531__K4_K1_K2");

                entity.HasIndex(e => new { e.PodClaimOrderId, e.PodPomId }, "_dta_index_PO_Detail_9_1259151531__K4_K2");

                entity.Property(e => e.PodId).HasColumnName("pod_id");

                entity.Property(e => e.PodClaimOrderId).HasColumnName("pod_ClaimOrderId");

                entity.Property(e => e.PodInvCarriage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pod_inv_carriage");

                entity.Property(e => e.PodInvCostEach)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pod_inv_cost_each");

                entity.Property(e => e.PodNlaId).HasColumnName("pod_nla_id");

                entity.Property(e => e.PodOrderCarriage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pod_order_carriage");

                entity.Property(e => e.PodOrderCostEach)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pod_order_cost_each");

                entity.Property(e => e.PodPimId).HasColumnName("pod_pim_id");

                entity.Property(e => e.PodPomId).HasColumnName("pod_pom_id");

                entity.Property(e => e.PodQuantity).HasColumnName("pod_quantity");

                entity.Property(e => e.PodVrId).HasColumnName("pod_vr_id");

                entity.Property(e => e.PodVtId).HasColumnName("pod_vt_id");
            });

            modelBuilder.Entity<PoException>(entity =>
            {
                entity.HasKey(e => e.PoeId);

                entity.ToTable("PO_Exception", "Accounts");

                entity.HasIndex(e => e.PoePomId, "IXNC_PO_Exception_poe_pom_id_2CE3C");

                entity.HasIndex(e => e.PoePomId, "IXNC_PO_Exception_poe_pom_id_46029");

                entity.Property(e => e.PoeId).HasColumnName("poe_id");

                entity.Property(e => e.PoeClaimId).HasColumnName("poe_claim_id");

                entity.Property(e => e.PoeCreatedBy).HasColumnName("poe_created_by");

                entity.Property(e => e.PoeDateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("poe_date_created");

                entity.Property(e => e.PoeDescription)
                    .HasMaxLength(2000)
                    .HasColumnName("poe_description");

                entity.Property(e => e.PoeNewCarriage)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("poe_new_carriage");

                entity.Property(e => e.PoeNewConfirmedDate)
                    .HasColumnType("date")
                    .HasColumnName("poe_new_confirmed_date");

                entity.Property(e => e.PoeNewEstDate)
                    .HasColumnType("date")
                    .HasColumnName("poe_new_est_date");

                entity.Property(e => e.PoeNewGoodsCost)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("poe_new_goods_cost");

                entity.Property(e => e.PoeOldCarriage)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("poe_old_carriage");

                entity.Property(e => e.PoeOldConfirmedDate)
                    .HasColumnType("date")
                    .HasColumnName("poe_old_confirmed_date");

                entity.Property(e => e.PoeOldEstDate)
                    .HasColumnType("date")
                    .HasColumnName("poe_old_est_date");

                entity.Property(e => e.PoeOldGoodsCost)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("poe_old_goods_cost");

                entity.Property(e => e.PoePomId).HasColumnName("poe_pom_id");

                entity.Property(e => e.PoeTypeId).HasColumnName("poe_type_id");
            });

            modelBuilder.Entity<PoExceptionType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PO_Exception_Type", "Accounts");

                entity.Property(e => e.PoetCode).HasColumnName("poet_code");

                entity.Property(e => e.PoetDescription)
                    .HasMaxLength(50)
                    .HasColumnName("poet_description");
            });

            modelBuilder.Entity<PoFollowUpHistory>(entity =>
            {
                entity.HasKey(e => e.PfhId);

                entity.ToTable("PO_FollowUp_History", "Accounts");

                entity.HasIndex(e => new { e.PfhType, e.PfhPomId }, "IXNC_PO_FollowUp_History_pfh_type_pfh_pom_id_E6E34");

                entity.Property(e => e.PfhId).HasColumnName("pfh_id");

                entity.Property(e => e.PfhPomId).HasColumnName("pfh_pom_id");

                entity.Property(e => e.PfhText)
                    .HasMaxLength(2000)
                    .HasColumnName("pfh_text");

                entity.Property(e => e.PfhType)
                    .HasColumnName("pfh_type")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PoHistory>(entity =>
            {
                entity.ToTable("PO_History", "Accounts");

                entity.HasIndex(e => new { e.ClaimOrderId, e.Ponumber, e.Time, e.ShortStatus }, "_dta_index_PO_History_16_791725923__K2_K3_K6_K4");

                entity.HasIndex(e => new { e.Ponumber, e.Time, e.ShortStatus, e.ClaimOrderId }, "_dta_index_PO_History_16_791725923__K3_K6_K4_K2_5_7_8");

                entity.HasIndex(e => new { e.ClaimOrderId, e.Id, e.Ponumber, e.ShortStatus }, "_dta_index_PO_History_9_521104947__K2_K1_K3_K4_5_6_7_8");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimOrderId).HasColumnName("ClaimOrderID");

                entity.Property(e => e.ContextId).HasColumnName("ContextID");

                entity.Property(e => e.LongStatus).HasMaxLength(1000);

                entity.Property(e => e.Ponumber).HasColumnName("PONumber");

                entity.Property(e => e.ShortStatus).HasMaxLength(200);

                entity.Property(e => e.Supplier).HasMaxLength(200);

                entity.Property(e => e.Time).HasColumnType("datetime");
            });

            modelBuilder.Entity<PoLock>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PO_Lock", "Accounts");

                entity.Property(e => e.PolId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("pol_id");

                entity.Property(e => e.PolTime)
                    .HasColumnType("datetime")
                    .HasColumnName("pol_time");

                entity.Property(e => e.PolUserId).HasColumnName("pol_user_id");
            });

            modelBuilder.Entity<PoMaster>(entity =>
            {
                entity.HasKey(e => e.PomId);

                entity.ToTable("PO_Master", "Accounts");

                entity.HasIndex(e => new { e.PomClaimId, e.PomNewStatusCode }, "IXNC_PO_Master_pom_claim_id_pom_new_status_code_7216E");

                entity.HasIndex(e => new { e.PomClaimId, e.PomNewStatusCode }, "IXNC_PO_Master_pom_claim_id_pom_new_status_code_BFFC1");

                entity.HasIndex(e => new { e.PomClaimId, e.PomNewStatusCode, e.PomPhFollowUpStatus }, "IXNC_PO_Master_pom_claim_id_pom_new_status_code_pom_ph_follow_up_status_E4FAC");

                entity.HasIndex(e => e.PomNewStatusCode, "IXNC_PO_Master_pom_new_status_code_1D5A2");

                entity.HasIndex(e => new { e.PomNewStatusCode, e.PomPhFollowUpStatus, e.PomStatusCode }, "IXNC_PO_Master_pom_new_status_code_pom_ph_follow_up_status_pom_status_code_F9432");

                entity.HasIndex(e => e.PomNumber, "IXNC_PO_Master_pom_number_78389");

                entity.HasIndex(e => e.PomStatusCode, "IXNC_PO_Master_pom_status_code_2BF58");

                entity.HasIndex(e => e.PomStatusCode, "IXNC_PO_Master_pom_status_code_4F66B");

                entity.HasIndex(e => e.PomStatusCode, "IXNC_PO_Master_pom_status_code_C966B");

                entity.HasIndex(e => new { e.PomStatusCode, e.PomSupplierId }, "IXNC_PO_Master_pom_status_code_pom_supplier_id_64E69");

                entity.HasIndex(e => e.PomSupplierId, "IXNC_PO_Master_pom_supplier_id_B871E");

                entity.HasIndex(e => new { e.PomType, e.PomStatusCode }, "IXNC_PO_Master_pom_type_pom_status_code_E2063");

                entity.HasIndex(e => new { e.PomStatusCode, e.PomSupplierId, e.PomId, e.PomClaimId, e.PomNumber }, "_dta_index_PO_Master_16_1387151987__K2_K6_K1_K5_K3_4");

                entity.HasIndex(e => new { e.PomSupplierId, e.PomStatusCode, e.PomId, e.PomClaimId, e.PomNumber }, "_dta_index_PO_Master_16_1387151987__K6_K2_K1_K5_K3");

                entity.HasIndex(e => new { e.PomId, e.PomNumber, e.PomNewStatusCode, e.PomOrderDate }, "_dta_index_PO_Master_9_1387151987__K1_K3_K20_K4");

                entity.HasIndex(e => new { e.PomClaimId, e.PomId, e.PomNumber }, "_dta_index_PO_Master_9_1387151987__K5_K1_K3");

                entity.HasIndex(e => new { e.PomType, e.PomClaimId, e.PomStatusCode, e.PomId, e.PomSupplierId }, "_dta_index_PO_Master_9_1387151987__K7_K5_K2_K1_K6_3");

                entity.Property(e => e.PomId).HasColumnName("pom_id");

                entity.Property(e => e.PomBriefDescription)
                    .HasMaxLength(50)
                    .HasColumnName("pom_brief_description");

                entity.Property(e => e.PomCancelledById).HasColumnName("pom_cancelled_by_id");

                entity.Property(e => e.PomCancelsPoNumber).HasColumnName("pom_cancels_po_number");

                entity.Property(e => e.PomClaimId).HasColumnName("pom_claim_id");

                entity.Property(e => e.PomConfirmation)
                    .HasMaxLength(4000)
                    .HasColumnName("pom_confirmation");

                entity.Property(e => e.PomConfirmedBy).HasColumnName("pom_confirmed_by");

                entity.Property(e => e.PomConfirmedDelDate)
                    .HasColumnType("date")
                    .HasColumnName("pom_confirmed_del_date");

                entity.Property(e => e.PomConfirmedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("pom_confirmed_on");

                entity.Property(e => e.PomCreatedBy).HasColumnName("pom_created_by");

                entity.Property(e => e.PomCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("pom_created_on");

                entity.Property(e => e.PomEmailedAgainDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pom_emailed_again_date");

                entity.Property(e => e.PomEmailedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pom_emailed_date");

                entity.Property(e => e.PomEstimatedDelDate)
                    .HasColumnType("date")
                    .HasColumnName("pom_estimated_del_date");

                entity.Property(e => e.PomFaxedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pom_faxed_date");

                entity.Property(e => e.PomInstructions)
                    .HasMaxLength(2000)
                    .HasColumnName("pom_instructions");

                entity.Property(e => e.PomNewStatusCode).HasColumnName("pom_new_status_code");

                entity.Property(e => e.PomNumber).HasColumnName("pom_number");

                entity.Property(e => e.PomOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pom_order_date");

                entity.Property(e => e.PomPhFollowUpStatus).HasColumnName("pom_ph_follow_up_status");

                entity.Property(e => e.PomSentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pom_sent_date");

                entity.Property(e => e.PomStatusCode).HasColumnName("pom_status_code");

                entity.Property(e => e.PomSupplierId).HasColumnName("pom_supplier_id");

                entity.Property(e => e.PomType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pom_type")
                    .IsFixedLength();
            });

            modelBuilder.Entity<PoNewStatus>(entity =>
            {
                entity.HasKey(e => e.PonsId);

                entity.ToTable("PO_New_Status", "Accounts");

                entity.Property(e => e.PonsId).HasColumnName("pons_id");

                entity.Property(e => e.PonsStatusCode).HasColumnName("pons_status_code");

                entity.Property(e => e.PonsStatusName)
                    .HasMaxLength(50)
                    .HasColumnName("pons_status_name");
            });

            modelBuilder.Entity<PoPending>(entity =>
            {
                entity.HasKey(e => e.PopId);

                entity.ToTable("PO_Pending", "Accounts");

                entity.Property(e => e.PopId).HasColumnName("pop_id");

                entity.Property(e => e.PopCancelQuantity).HasColumnName("pop_cancel_quantity");

                entity.Property(e => e.PopClaimOrderId).HasColumnName("pop_ClaimOrderId");

                entity.Property(e => e.PopOrderQuantity).HasColumnName("pop_order_quantity");
            });

            modelBuilder.Entity<PoStatus>(entity =>
            {
                entity.HasKey(e => e.PosId);

                entity.ToTable("PO_Status", "Accounts");

                entity.Property(e => e.PosId).HasColumnName("pos_id");

                entity.Property(e => e.PosStatusCode).HasColumnName("pos_status_code");

                entity.Property(e => e.PosStatusName)
                    .HasMaxLength(50)
                    .HasColumnName("pos_status_name");
            });

            modelBuilder.Entity<PolicyHolder>(entity =>
            {
                entity.HasKey(e => e.PhId);

                entity.ToTable("Policy_Holder", "Accounts");

                entity.Property(e => e.PhId).HasColumnName("ph_id");

                entity.Property(e => e.PhAddr1)
                    .HasMaxLength(50)
                    .HasColumnName("ph_Addr1");

                entity.Property(e => e.PhAddr2)
                    .HasMaxLength(50)
                    .HasColumnName("ph_Addr2");

                entity.Property(e => e.PhAddr3)
                    .HasMaxLength(50)
                    .HasColumnName("ph_Addr3");

                entity.Property(e => e.PhAddr4)
                    .HasMaxLength(50)
                    .HasColumnName("ph_Addr4");

                entity.Property(e => e.PhCompanyName)
                    .HasMaxLength(50)
                    .HasColumnName("ph_CompanyName");

                entity.Property(e => e.PhCreatedBy).HasColumnName("ph_created_by");

                entity.Property(e => e.PhCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("ph_created_on");

                entity.Property(e => e.PhEditedBy).HasColumnName("ph_edited_by");

                entity.Property(e => e.PhEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("ph_edited_on");

                entity.Property(e => e.PhEmail)
                    .HasMaxLength(80)
                    .HasColumnName("ph_email");

                entity.Property(e => e.PhFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("ph_FirstName");

                entity.Property(e => e.PhPostCode)
                    .HasMaxLength(20)
                    .HasColumnName("ph_PostCode");

                entity.Property(e => e.PhSurName)
                    .HasMaxLength(50)
                    .HasColumnName("ph_SurName");

                entity.Property(e => e.PhTelHome)
                    .HasMaxLength(20)
                    .HasColumnName("ph_TelHome");

                entity.Property(e => e.PhTelMobile)
                    .HasMaxLength(20)
                    .HasColumnName("ph_TelMobile");

                entity.Property(e => e.PhTelWork)
                    .HasMaxLength(20)
                    .HasColumnName("ph_TelWork");

                entity.Property(e => e.PhTitle)
                    .HasMaxLength(20)
                    .HasColumnName("ph_Title");
            });

            modelBuilder.Entity<PortalAssoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PortalAssoc", "Site");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");
            });

            modelBuilder.Entity<PortalUser>(entity =>
            {
                entity.ToTable("PortalUsers", "Site");

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.PortalUserDescription).HasMaxLength(200);

                entity.Property(e => e.PortalUserName).HasMaxLength(50);

                entity.Property(e => e.PortalUserPassword).HasMaxLength(50);
            });

            modelBuilder.Entity<PostingMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PostingMonths", "Accounts");

                entity.Property(e => e.PmClosed).HasColumnName("pm_closed");

                entity.Property(e => e.PmCurrent)
                    .HasColumnName("pm_current")
                    .HasComment("Jan 2000 = 1 (Jan 08 = 97)");

                entity.Property(e => e.PmCurrentYearStart)
                    .HasColumnName("pm_current_year_start")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PmId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("pm_id");

                entity.Property(e => e.PmLocked).HasColumnName("pm_locked");

                entity.Property(e => e.PmPriorYearStart)
                    .HasColumnName("pm_prior_year_start")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PrimeEntryDetail>(entity =>
            {
                entity.HasKey(e => e.PedId);

                entity.ToTable("PrimeEntry_Detail", "Accounts");

                entity.HasIndex(e => e.PedNlcode, "IXNC_PrimeEntry_Detail_ped_nlcode_C07FD");

                entity.HasIndex(e => e.PedPemId, "index_pem_id");

                entity.Property(e => e.PedId).HasColumnName("ped_id");

                entity.Property(e => e.PedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ped_amount");

                entity.Property(e => e.PedNlcode).HasColumnName("ped_nlcode");

                entity.Property(e => e.PedPemId).HasColumnName("ped_pem_id");

                entity.Property(e => e.PedVatCode).HasColumnName("ped_VAT_code");
            });

            modelBuilder.Entity<PrimeEntryMaster>(entity =>
            {
                entity.HasKey(e => e.PemId);

                entity.ToTable("PrimeEntry_Master", "Accounts");

                entity.HasIndex(e => e.PemClaimId, "IXNC_PrimeEntry_Master_pem_claim_id_C39D4");

                entity.HasIndex(e => e.PemCustSupp, "IXNC_PrimeEntry_Master_pem_cust_supp_4BC28");

                entity.HasIndex(e => new { e.PemDate, e.PemPostingType }, "IXNC_PrimeEntry_Master_pem_date_pem_posting_type_89F03");

                entity.HasIndex(e => new { e.PemDate, e.PemPostingType }, "IXNC_PrimeEntry_Master_pem_date_pem_posting_type_B4E62");

                entity.HasIndex(e => new { e.PemDeCode, e.PemPostingType }, "IXNC_PrimeEntry_Master_pem_de_code_pem_posting_type_56C9B");

                entity.HasIndex(e => new { e.PemExternalRef, e.PemPostingType }, "IXNC_PrimeEntry_Master_pem_external_ref_pem_posting_type_6F8A7");

                entity.HasIndex(e => new { e.PemExternalRef, e.PemPostingType }, "IXNC_PrimeEntry_Master_pem_external_ref_pem_posting_type_BC520");

                entity.HasIndex(e => new { e.PemInsCoId, e.PemAccountingPeriod, e.PemPostingType }, "IXNC_PrimeEntry_Master_pem_ins_co_id_pem_accounting_period_pem_posting_type_9F013");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_0398C");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_12C22");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_199A9");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_19E68");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_34E68");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_3901C");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_410EF");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_4E4A6");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_52182");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_6F106");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_715BE");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_7F7B8");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_8EB5B");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_90636");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_94A5C");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_B9C44");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_D986A");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_DEED2");

                entity.HasIndex(e => e.PemPostingType, "IXNC_PrimeEntry_Master_pem_posting_type_F357B");

                entity.HasIndex(e => new { e.PemPostingType, e.PemAccountingPeriod, e.PemClaimId }, "IXNC_PrimeEntry_Master_pem_posting_type_pem_accounting_period_pem_claim_id_0D075");

                entity.HasIndex(e => new { e.PemPostingType, e.PemAccountingPeriod, e.PemCustSupp }, "IXNC_PrimeEntry_Master_pem_posting_type_pem_accounting_period_pem_cust_supp_5C4DF");

                entity.HasIndex(e => new { e.PemPostingType, e.PemClaimId }, "IXNC_PrimeEntry_Master_pem_posting_type_pem_claim_id_4C7B8");

                entity.HasIndex(e => new { e.PemPostingType, e.PemCreatedOn }, "IXNC_PrimeEntry_Master_pem_posting_type_pem_created_on_8C64D");

                entity.HasIndex(e => new { e.PemPostingType, e.PemCustSupp, e.PemTransRef }, "IXNC_PrimeEntry_Master_pem_posting_type_pem_cust_supp_pem_trans_ref_BA1A2");

                entity.HasIndex(e => new { e.PemPostingType, e.PemTransPeriod, e.PemCustSupp }, "IXNC_PrimeEntry_Master_pem_posting_type_pem_trans_period_pem_cust_supp_E65C5");

                entity.HasIndex(e => e.PemId, "_dta_index_PrimeEntry_Master_9_1595152728__K1");

                entity.HasIndex(e => new { e.PemId, e.PemExternalRef }, "_dta_index_PrimeEntry_Master_9_1595152728__K1_K5");

                entity.HasIndex(e => new { e.PemAccountingPeriod, e.PemPostingType }, "index_pem_accounting_period");

                entity.HasIndex(e => new { e.PemAccountingPeriod, e.PemDeCode, e.PemPostingType }, "index_pem_accounting_period_pem_de_code_pem_posting_type");

                entity.HasIndex(e => new { e.PemAccountingPeriod, e.PemPostingType }, "index_pem_accounting_period_pem_posting_type_pem_vat");

                entity.HasIndex(e => new { e.PemAccountingPeriod, e.PemPostingType }, "index_pem_accounting_period_posting_type");

                entity.HasIndex(e => new { e.PemAccountingPeriod, e.PemPostingType }, "index_pem_accounting_period_posting_type_pem_de_code");

                entity.Property(e => e.PemId).HasColumnName("pem_id");

                entity.Property(e => e.PemAccountingPeriod).HasColumnName("pem_accounting_period");

                entity.Property(e => e.PemBankType).HasColumnName("pem_bank_type");

                entity.Property(e => e.PemClaimId).HasColumnName("pem_claim_id");

                entity.Property(e => e.PemCreatedBy).HasColumnName("pem_created_by");

                entity.Property(e => e.PemCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("pem_created_on");

                entity.Property(e => e.PemCustSupp).HasColumnName("pem_cust_supp");

                entity.Property(e => e.PemDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pem_date");

                entity.Property(e => e.PemDeCode).HasColumnName("pem_de_code");

                entity.Property(e => e.PemDescription)
                    .HasMaxLength(2000)
                    .HasColumnName("pem_description");

                entity.Property(e => e.PemEditedBy).HasColumnName("pem_edited_by");

                entity.Property(e => e.PemEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("pem_edited_on");

                entity.Property(e => e.PemExternalRef).HasColumnName("pem_external_ref");

                entity.Property(e => e.PemGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pem_gross");

                entity.Property(e => e.PemInsCoId).HasColumnName("pem_ins_co_id");

                entity.Property(e => e.PemName)
                    .HasMaxLength(60)
                    .HasColumnName("pem_name");

                entity.Property(e => e.PemNet)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pem_net");

                entity.Property(e => e.PemPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pem_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.PemTransPeriod).HasColumnName("pem_trans_period");

                entity.Property(e => e.PemTransRef)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("pem_trans_ref");

                entity.Property(e => e.PemVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pem_vat");

                entity.Property(e => e.PemVatType).HasColumnName("pem_vat_type");
            });

            modelBuilder.Entity<PrintQueueDocument>(entity =>
            {
                entity.ToTable("PrintQueueDocument", "Site");

                entity.HasIndex(e => new { e.DocumentId, e.Removed }, "IXNC_PrintQueueDocument_DocumentID_Removed_A5463");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateAdded)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateRemoved).HasColumnType("datetime");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.PrintQueueHistoryId).HasColumnName("PrintQueueHistoryID");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.PrintQueueDocumentAddedByNavigations)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintQueue_AddedByUser");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.PrintQueueDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintQueue_InsuranceClaimDocument");

                entity.HasOne(d => d.PrintQueueHistory)
                    .WithMany(p => p.PrintQueueDocuments)
                    .HasForeignKey(d => d.PrintQueueHistoryId)
                    .HasConstraintName("FK_PrintQueueDocument_PrintQueueHistory");

                entity.HasOne(d => d.RemovedByNavigation)
                    .WithMany(p => p.PrintQueueDocumentRemovedByNavigations)
                    .HasForeignKey(d => d.RemovedBy)
                    .HasConstraintName("FK_PrintQueueDocument_User");
            });

            modelBuilder.Entity<PrintQueueHistory>(entity =>
            {
                entity.ToTable("PrintQueueHistory", "Site");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateGenerated).HasColumnType("datetime");

                entity.Property(e => e.DocumentName).HasMaxLength(100);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PrintQueueHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintQueueHistory_User");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product", "Product");

                entity.HasIndex(e => e.BestPrice, "IXNC_Product_BestPrice_313E1");

                entity.HasIndex(e => new { e.BrandId, e.Type, e.AltType }, "IXNC_Product_BrandID_Type_AltType_B1F99");

                entity.HasIndex(e => new { e.Deleted, e.AltType2 }, "IXNC_Product_Deleted_AltType2_1EDDE");

                entity.HasIndex(e => e.Ean, "IXNC_Product_EAN_15422");

                entity.HasIndex(e => e.FamilyId, "IXNC_Product_FamilyID_1F0C5");

                entity.HasIndex(e => e.FamilyId, "IXNC_Product_FamilyID_3259A");

                entity.HasIndex(e => e.FamilyId, "IXNC_Product_FamilyID_6517C");

                entity.HasIndex(e => new { e.FamilyId, e.ProductId }, "IXNC_Product_FamilyID_ProductID_37BB7");

                entity.HasIndex(e => new { e.FamilyId, e.ProductId }, "IXNC_Product_FamilyID_ProductID_463A4");

                entity.HasIndex(e => new { e.FamilyId, e.ProductId }, "IXNC_Product_FamilyID_ProductID_A3587");

                entity.HasIndex(e => new { e.FamilyId, e.ProductId }, "IXNC_Product_FamilyID_ProductID_AEACE");

                entity.HasIndex(e => new { e.FamilyId, e.Type }, "IXNC_Product_FamilyID_Type_F6DDB");

                entity.HasIndex(e => e.ItemId, "IXNC_Product_ItemID_5A974");

                entity.HasIndex(e => e.OldProductId, "IXNC_Product_Old_Product_Id_CCACD");

                entity.HasIndex(e => e.PriceWhichSupplier, "IXNC_Product_PriceWhichSupplier_C05F7");

                entity.HasIndex(e => new { e.OldProductId, e.ProductId, e.AltType2, e.Ean }, "_dta_index_Product_16_1184723273__K16_K1_K7_K9");

                entity.HasIndex(e => new { e.OldProductId, e.AltType2, e.ProductId, e.BrandId }, "_dta_index_Product_16_1184723273__K16_K7_K1_K4");

                entity.HasIndex(e => new { e.OldProductId, e.AltType2, e.Ean }, "_dta_index_Product_16_1184723273__K16_K7_K9");

                entity.HasIndex(e => new { e.BestPrice, e.ProductId, e.Score }, "_dta_index_Product_16_1184723273__K18D_K1_K17_3_4_5_7_9_10_12_14");

                entity.HasIndex(e => new { e.ProductId, e.Score }, "_dta_index_Product_16_1184723273__K1_K17_3_4_5_7_9_10_12_14");

                entity.HasIndex(e => new { e.ProductId, e.AltType2, e.BrandId }, "_dta_index_Product_16_1184723273__K1_K7_K4_16");

                entity.HasIndex(e => new { e.FamilyId, e.ProductId, e.Score, e.BrandId, e.BestPrice }, "_dta_index_Product_16_1184723273__K3_K1_K17_K4_K18_5_7_9_10_12_14");

                entity.HasIndex(e => new { e.FamilyId, e.BrandId, e.ProductId, e.Score, e.BestPrice }, "_dta_index_Product_16_1184723273__K3_K4_K1_K17_K18_5_7_9_10_12_14");

                entity.HasIndex(e => new { e.FamilyId, e.BrandId, e.ProductId, e.Score, e.Deleted, e.BestPrice }, "_dta_index_Product_16_1184723273__K3_K4_K1_K17_K22_K18_5_7_9_10_12_14");

                entity.HasIndex(e => new { e.AltType2, e.ProductId, e.OldProductId, e.BrandId }, "_dta_index_Product_16_1184723273__K7_K1_K16_K4");

                entity.HasIndex(e => new { e.FamilyId, e.BrandId, e.ProductId, e.CnetcatId, e.Deleted, e.PriceWhichSupplier }, "_dta_index_Product_9_1184723273__K3_K4_K1_K26_K22_K20_5_7_9_10_12_13_14_17_18");

                entity.HasIndex(e => new { e.Ean, e.Type, e.ProductId }, "_dta_index_Product_9_1184723273__K9_K5_K1");

                entity.HasIndex(e => new { e.Ean, e.PriceWhichSupplier }, "pricewhichsuppliereanindex");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.AltType).HasMaxLength(100);

                entity.Property(e => e.AltType2).HasMaxLength(100);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.CnetcatId)
                    .HasMaxLength(10)
                    .HasColumnName("CNETCatID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.Colour).HasMaxLength(50);

                entity.Property(e => e.DcPavcount).HasColumnName("DC_PAVCount");

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.EncodexStart).HasColumnType("datetime");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.InformationUrl)
                    .HasMaxLength(200)
                    .HasColumnName("InformationURL");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Nfumdescription)
                    .HasMaxLength(200)
                    .HasColumnName("NFUMDescription");

                entity.Property(e => e.OldProductId).HasColumnName("Old_Product_Id");

                entity.Property(e => e.PictureUrl)
                    .HasMaxLength(200)
                    .HasColumnName("PictureURL");

                entity.Property(e => e.PreviousProductId).HasColumnName("PreviousProductID");

                entity.Property(e => e.PriceLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Type).HasMaxLength(100);
            });

            modelBuilder.Entity<Product1>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.ToTable("Product", "Site");

                entity.HasIndex(e => e.Deleted, "IXNC_Product_Deleted_3297C");

                entity.HasIndex(e => e.Deleted, "IXNC_Product_Deleted_660EA");

                entity.HasIndex(e => e.ProductCode, "IXNC_Product_ProductCode_85304");

                entity.HasIndex(e => new { e.UsedFrequently, e.ProductCode }, "IXNC_Product_UsedFrequently_ProductCode_21450");

                entity.HasIndex(e => new { e.ProductId, e.Description, e.ProductCode }, "_dta_index_Product_16_272056055__K1_K6_K4");

                entity.HasIndex(e => new { e.Description, e.ProductCode }, "_dta_index_Product_16_272056055__K6_K4_1");

                entity.HasIndex(e => e.ProductId, "_dta_index_Product_9_1949249999__K1_50");

                entity.HasIndex(e => e.LineItemCategory, "_dta_index_Product_9_1949249999__K50");

                entity.Property(e => e.AliasProductId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.Category)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateSynchronized).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastSynchronized).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LineItemCategory).HasDefaultValueSql("((2))");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.SageProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.SuperceededBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededComments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierProductReference).HasMaxLength(50);

                entity.Property(e => e.UnlistedProduct).HasComment("If the product is unlisted, it is for single use only, and so will not be shown in any lists");

                entity.Property(e => e.UsedFrequently).HasComment("This field marks whether this item is a frequent use item. Only frequently used products are displayed all the time in drop down lists");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AAA')");
            });

            modelBuilder.Entity<ProductAccessory>(entity =>
            {
                entity.HasKey(e => e.AccessoryId);

                entity.ToTable("Product_Accessories", "Product");

                entity.Property(e => e.AccessoryId).HasColumnName("AccessoryID");

                entity.Property(e => e.AccessoryItemId).HasColumnName("AccessoryItemID");

                entity.Property(e => e.AccessoryProductId).HasColumnName("AccessoryProductID");

                entity.Property(e => e.ParentItemId).HasColumnName("ParentItemID");

                entity.Property(e => e.ParentProductId).HasColumnName("ParentProductID");

                entity.Property(e => e.Source).HasMaxLength(50);
            });

            modelBuilder.Entity<ProductAttributeValue>(entity =>
            {
                entity.ToTable("ProductAttributeValue", "Product");

                entity.HasIndex(e => e.AttributeId, "IXNC_ProductAttributeValue_AttributeID_20603");

                entity.HasIndex(e => new { e.AttributeId, e.Value }, "IXNC_ProductAttributeValue_AttributeID_Value_7CB1D");

                entity.HasIndex(e => e.ProductId, "Index_ProductAttributeValue_ProductID");

                entity.HasIndex(e => new { e.ProductId, e.Value, e.ValueId, e.AttributeId }, "_dta_index_ProductAttributeValue_16_1105439012__K2_K5_K4_K3");

                entity.HasIndex(e => new { e.AttributeId, e.ProductId, e.Value, e.ValueId }, "_dta_index_ProductAttributeValue_16_1105439012__K3_K2_K5_K4");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<ProductAttributeValue1>(entity =>
            {
                entity.HasKey(e => e.ProductAttributeValueId);

                entity.ToTable("ProductAttributeValue", "Site");

                entity.Property(e => e.ProductAttributeValueId).HasColumnName("ProductAttributeValueID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Value).HasMaxLength(100);
            });

            modelBuilder.Entity<ProductBk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Product_bk", "Site");

                entity.Property(e => e.AliasProductId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.Category)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateSynchronized).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastSynchronized).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.SageProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.SuperceededBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededComments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededDate).HasColumnType("datetime");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProductCode>(entity =>
            {
                entity.HasKey(e => e.ProdId);

                entity.ToTable("Product_Codes", "Accounts");

                entity.Property(e => e.ProdId).HasColumnName("prod_id");

                entity.Property(e => e.ProdItemTypeId)
                    .HasColumnName("prod_itemTypeID")
                    .HasComment("Item type (claims DB)");

                entity.Property(e => e.ProdLvCode)
                    .HasMaxLength(20)
                    .HasColumnName("prod_LV_code")
                    .HasComment("For Liverpool Victoria bordereau invoice");

                entity.Property(e => e.ProdPurchasesNlAccountId).HasColumnName("prod_purchases_NL_Account_ID");

                entity.Property(e => e.ProdSalesNlAccountId)
                    .HasColumnName("prod_sales_NL_Account_ID")
                    .HasComment("Link different product groups to N/L accounts");
            });

            modelBuilder.Entity<ProductInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductInvoices", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.CarriageToInsurance).HasColumnType("money");

                entity.Property(e => e.IsPhvatregistered).HasColumnName("IsPHVATRegistered");

                entity.Property(e => e.LaaccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("LAAccountRef");

                entity.Property(e => e.Laadress1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress1");

                entity.Property(e => e.Laadress2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress2");

                entity.Property(e => e.Laadress3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress3");

                entity.Property(e => e.Laadress4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress4");

                entity.Property(e => e.Laadress5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAAdress5");

                entity.Property(e => e.Laname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LAName");

                entity.Property(e => e.Laref)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LARef");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.Sbsref).HasColumnName("SBSREF");
            });

            modelBuilder.Entity<ProductLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("ProductLog");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.Operation)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");
            });

            modelBuilder.Entity<ProductReplacementCache>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductReplacementCache", "Product");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ReplacementId).HasColumnName("ReplacementID");
            });

            modelBuilder.Entity<ProfitClaimDate>(entity =>
            {
                entity.ToTable("ProfitClaimDates", "MI");

                entity.HasIndex(e => e.ClaimId, "ProfitClaimDate_ClaimID_Index");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ProfitDate).HasColumnType("date");

                entity.Property(e => e.Reason).HasMaxLength(2000);
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PURCHASE_ORDER", "MI");

                entity.HasIndex(e => e.Consignment, "IXNC_PURCHASE_ORDER_CONSIGNMENT_B7A4C");

                entity.HasIndex(e => e.Consignment, "IXNC_PURCHASE_ORDER_CONSIGNMENT_CC233");

                entity.HasIndex(e => e.OrderNumber, "IXNC_PURCHASE_ORDER_ORDER_NUMBER_06A72");

                entity.HasIndex(e => e.OrderNumber, "IXNC_PURCHASE_ORDER_ORDER_NUMBER_96A50");

                entity.HasIndex(e => new { e.OrderNumber, e.Consignment }, "IXNC_PURCHASE_ORDER_ORDER_NUMBER_CONSIGNMENT_FF30B");

                entity.HasIndex(e => new { e.Consignment, e.OrderNumber, e.OrderOrQuote }, "_dta_index_PURCHASE_ORDER_9_1268199568__K59_K1_K2_73");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_1");

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_2");

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_3");

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_4");

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_5");

                entity.Property(e => e.CAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_1");

                entity.Property(e => e.CAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_2");

                entity.Property(e => e.CAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_3");

                entity.Property(e => e.CAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_4");

                entity.Property(e => e.CAddress5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("C_ADDRESS_5");

                entity.Property(e => e.CarrDeptName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CARR_DEPT_NAME");

                entity.Property(e => e.CarrDeptNumber).HasColumnName("CARR_DEPT_NUMBER");

                entity.Property(e => e.CarrGross).HasColumnName("CARR_GROSS");

                entity.Property(e => e.CarrNet).HasColumnName("CARR_NET");

                entity.Property(e => e.CarrNomCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CARR_NOM_CODE");

                entity.Property(e => e.CarrTax).HasColumnName("CARR_TAX");

                entity.Property(e => e.CarrTaxCode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CARR_TAX_CODE");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_NAME");

                entity.Property(e => e.CourierName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("COURIER_NAME");

                entity.Property(e => e.CourierNumber).HasColumnName("COURIER_NUMBER");

                entity.Property(e => e.Currency).HasColumnName("CURRENCY");

                entity.Property(e => e.CurrencyType).HasColumnName("CURRENCY_TYPE");

                entity.Property(e => e.DelAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_1");

                entity.Property(e => e.DelAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_2");

                entity.Property(e => e.DelAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_3");

                entity.Property(e => e.DelAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_4");

                entity.Property(e => e.DelAddress5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_ADDRESS_5");

                entity.Property(e => e.DelName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DEL_NAME");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DELIVERY_DATE");

                entity.Property(e => e.DeliveryStatus)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_STATUS");

                entity.Property(e => e.DeliveryStatusCode).HasColumnName("DELIVERY_STATUS_CODE");

                entity.Property(e => e.EuroGross).HasColumnName("EURO_GROSS");

                entity.Property(e => e.EuroRate).HasColumnName("EURO_RATE");

                entity.Property(e => e.ForeignCarrGross).HasColumnName("FOREIGN_CARR_GROSS");

                entity.Property(e => e.ForeignCarrNet).HasColumnName("FOREIGN_CARR_NET");

                entity.Property(e => e.ForeignCarrTax).HasColumnName("FOREIGN_CARR_TAX");

                entity.Property(e => e.ForeignInvoiceGross).HasColumnName("FOREIGN_INVOICE_GROSS");

                entity.Property(e => e.ForeignInvoiceNet).HasColumnName("FOREIGN_INVOICE_NET");

                entity.Property(e => e.ForeignInvoiceTax).HasColumnName("FOREIGN_INVOICE_TAX");

                entity.Property(e => e.ForeignItemsGross).HasColumnName("FOREIGN_ITEMS_GROSS");

                entity.Property(e => e.ForeignItemsNet).HasColumnName("FOREIGN_ITEMS_NET");

                entity.Property(e => e.ForeignItemsTax).HasColumnName("FOREIGN_ITEMS_TAX");

                entity.Property(e => e.ForeignRate).HasColumnName("FOREIGN_RATE");

                entity.Property(e => e.ForeignSettlementDiscAmount).HasColumnName("FOREIGN_SETTLEMENT_DISC_AMOUNT");

                entity.Property(e => e.ForeignSettlementTotal).HasColumnName("FOREIGN_SETTLEMENT_TOTAL");

                entity.Property(e => e.InvoiceGross).HasColumnName("INVOICE_GROSS");

                entity.Property(e => e.InvoiceNet).HasColumnName("INVOICE_NET");

                entity.Property(e => e.InvoiceTax).HasColumnName("INVOICE_TAX");

                entity.Property(e => e.ItemsGross).HasColumnName("ITEMS_GROSS");

                entity.Property(e => e.ItemsNet).HasColumnName("ITEMS_NET");

                entity.Property(e => e.ItemsTax).HasColumnName("ITEMS_TAX");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.NetAmount1).HasColumnName("NET_AMOUNT_1");

                entity.Property(e => e.NetAmount2).HasColumnName("NET_AMOUNT_2");

                entity.Property(e => e.NetAmount3).HasColumnName("NET_AMOUNT_3");

                entity.Property(e => e.NetAmount4).HasColumnName("NET_AMOUNT_4");

                entity.Property(e => e.NetAmount5).HasColumnName("NET_AMOUNT_5");

                entity.Property(e => e.Notes1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NOTES_1");

                entity.Property(e => e.Notes2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NOTES_2");

                entity.Property(e => e.Notes3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NOTES_3");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ORDER_DATE");

                entity.Property(e => e.OrderNumber).HasColumnName("ORDER_NUMBER");

                entity.Property(e => e.OrderOrQuote)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_OR_QUOTE");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_STATUS");

                entity.Property(e => e.OrderStatusCode).HasColumnName("ORDER_STATUS_CODE");

                entity.Property(e => e.Posted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("POSTED");

                entity.Property(e => e.PostedCode).HasColumnName("POSTED_CODE");

                entity.Property(e => e.Printed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINTED");

                entity.Property(e => e.PrintedCode).HasColumnName("PRINTED_CODE");

                entity.Property(e => e.Reference)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.SettlementDiscAmount).HasColumnName("SETTLEMENT_DISC_AMOUNT");

                entity.Property(e => e.SettlementDiscRate).HasColumnName("SETTLEMENT_DISC_RATE");

                entity.Property(e => e.SettlementDueDays).HasColumnName("SETTLEMENT_DUE_DAYS");

                entity.Property(e => e.SettlementTotal).HasColumnName("SETTLEMENT_TOTAL");

                entity.Property(e => e.SuppDiscRate).HasColumnName("SUPP_DISC_RATE");

                entity.Property(e => e.SuppOrderNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_ORDER_NUMBER");

                entity.Property(e => e.SuppTelNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_TEL_NUMBER");

                entity.Property(e => e.TakenBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TAKEN_BY");

                entity.Property(e => e.TaxAmount1).HasColumnName("TAX_AMOUNT_1");

                entity.Property(e => e.TaxAmount2).HasColumnName("TAX_AMOUNT_2");

                entity.Property(e => e.TaxAmount3).HasColumnName("TAX_AMOUNT_3");

                entity.Property(e => e.TaxAmount4).HasColumnName("TAX_AMOUNT_4");

                entity.Property(e => e.TaxAmount5).HasColumnName("TAX_AMOUNT_5");

                entity.Property(e => e.TaxRate1).HasColumnName("TAX_RATE_1");

                entity.Property(e => e.TaxRate2).HasColumnName("TAX_RATE_2");

                entity.Property(e => e.TaxRate3).HasColumnName("TAX_RATE_3");

                entity.Property(e => e.TaxRate4).HasColumnName("TAX_RATE_4");

                entity.Property(e => e.TaxRate5).HasColumnName("TAX_RATE_5");
            });

            modelBuilder.Entity<QBetterment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Betterment", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<QBookedMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_BOOKED_Month", "MI");

                entity.Property(e => e.BDate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("bDate")
                    .IsFixedLength();

                entity.Property(e => e.Clid).HasColumnName("CLID");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.Tclid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TCLID");
            });

            modelBuilder.Entity<QBookedOnClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_BookedOnClaims", "MI");

                entity.Property(e => e.Bdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("BDate")
                    .IsFixedLength();

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<QByDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_ByDate", "MI");

                entity.Property(e => e.ClclaimHandler)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLClaimHandler");

                entity.Property(e => e.ClclaimType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLClaimType");

                entity.Property(e => e.Clcurrentstatus)
                    .HasMaxLength(50)
                    .HasColumnName("CLCurrentstatus");

                entity.Property(e => e.Cldate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cldate")
                    .IsFixedLength();

                entity.Property(e => e.Clid).HasColumnName("clid");

                entity.Property(e => e.Cllaref)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CLLARef");

                entity.Property(e => e.Cltype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLType");
            });

            modelBuilder.Entity<QCarriage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Carriage", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.CarrGross).HasColumnName("CARR_GROSS");

                entity.Property(e => e.CarrNet).HasColumnName("CARR_NET");

                entity.Property(e => e.CarrTax).HasColumnName("CARR_TAX");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");
            });

            modelBuilder.Entity<QCarriageNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_CarriageNew", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");
            });

            modelBuilder.Entity<QCarryoverclaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Carryoverclaims", "MI");

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Claccref)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CLACCREF");

                entity.Property(e => e.Clclosed).HasColumnName("CLClosed");

                entity.Property(e => e.Clid).HasColumnName("CLID");

                entity.Property(e => e.Clstatus)
                    .HasMaxLength(50)
                    .HasColumnName("CLSTATUS");

                entity.Property(e => e.Tclid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TCLID");
            });

            modelBuilder.Entity<QCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Credit", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TYPE");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<QCurrentInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_CurrentInvoices", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");
            });

            modelBuilder.Entity<QDailyRep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_DailyRep", "MI");

                entity.Property(e => e.Clbetterment).HasColumnName("CLBetterment");

                entity.Property(e => e.Clcarriage).HasColumnName("CLCarriage");

                entity.Property(e => e.Clexcess).HasColumnName("CLExcess");

                entity.Property(e => e.ClgroupBy)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CLGroupBy")
                    .IsFixedLength();

                entity.Property(e => e.Clinspections).HasColumnName("CLInspections");

                entity.Property(e => e.Clrepair).HasColumnName("CLRepair");

                entity.Property(e => e.Clreplace).HasColumnName("CLReplace");
            });

            modelBuilder.Entity<QExcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Excess", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<QInspection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Inspection", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<QInvoiceMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_InvoiceMonth", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.MInvoice)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("mInvoice")
                    .IsFixedLength();
            });

            modelBuilder.Entity<QMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Months", "MI");

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Lmonth)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lmonth")
                    .IsFixedLength();
            });

            modelBuilder.Entity<QOpenClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_OpenClaims", "MI");

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Claccref)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CLACCREF");

                entity.Property(e => e.Clclosed).HasColumnName("CLClosed");

                entity.Property(e => e.Clid).HasColumnName("CLID");

                entity.Property(e => e.Clstatus)
                    .HasMaxLength(50)
                    .HasColumnName("CLSTATUS");

                entity.Property(e => e.Tclid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TCLID");
            });

            modelBuilder.Entity<QRepair>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Repair", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<QReplace>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Replace", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.PostedCode).HasColumnName("POSTED_CODE");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<QRollup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_Rollup", "MI");

                entity.Property(e => e.Bdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("BDate")
                    .IsFixedLength();

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Claccref)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CLACCREF");

                entity.Property(e => e.Clclosed).HasColumnName("CLClosed");

                entity.Property(e => e.Clid).HasColumnName("CLID");

                entity.Property(e => e.Clitem)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLITEM");

                entity.Property(e => e.Clstatus)
                    .HasMaxLength(50)
                    .HasColumnName("CLSTATUS");

                entity.Property(e => e.Cltype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLTYPE");

                entity.Property(e => e.Clusr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLUSR");

                entity.Property(e => e.ISSlTypeId).HasColumnName("i_s_sl_type_id");

                entity.Property(e => e.Tclid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TCLID");
            });

            modelBuilder.Entity<QSageMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SAGE_Month", "MI");

                entity.Property(e => e.BDate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("bDate")
                    .IsFixedLength();

                entity.Property(e => e.Clid).HasColumnName("CLID");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceTypeCode).HasColumnName("INVOICE_TYPE_CODE");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.PostedCode).HasColumnName("POSTED_CODE");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<QSageTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SageTotal", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.Idate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("idate")
                    .IsFixedLength();

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");
            });

            modelBuilder.Entity<QSla5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA5", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tfr)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("tfr");

                entity.Property(e => e.Tto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("tto");
            });

            modelBuilder.Entity<QSla51>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA5_1", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.SStatusFrom).HasColumnName("s_status_from");

                entity.Property(e => e.SStatusOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_status_on");

                entity.Property(e => e.SStatusTo).HasColumnName("s_status_to");
            });

            modelBuilder.Entity<QSla52>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA5_2", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.SStatusFrom).HasColumnName("s_status_from");

                entity.Property(e => e.SStatusOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_status_on");

                entity.Property(e => e.SStatusTo).HasColumnName("s_status_to");
            });

            modelBuilder.Entity<QSla7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA7", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tfr)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("tfr");

                entity.Property(e => e.Tto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("tto");
            });

            modelBuilder.Entity<QSla71>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA7_1", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.SStatusFrom).HasColumnName("s_status_from");

                entity.Property(e => e.SStatusOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_status_on");

                entity.Property(e => e.SStatusTo).HasColumnName("s_status_to");
            });

            modelBuilder.Entity<QSla72>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA7_2", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.SStatusFrom).HasColumnName("s_status_from");

                entity.Property(e => e.SStatusOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_status_on");

                entity.Property(e => e.SStatusTo).HasColumnName("s_status_to");
            });

            modelBuilder.Entity<QSla9>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA9", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tfr)
                    .HasColumnType("datetime")
                    .HasColumnName("tfr");

                entity.Property(e => e.Timelapse).HasColumnName("timelapse");

                entity.Property(e => e.Tto)
                    .HasColumnType("datetime")
                    .HasColumnName("tto");
            });

            modelBuilder.Entity<QSla91>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA9_1", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<QSla92>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Q_SLA9_2", "Site");

                entity.Property(e => e.Closedate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Rag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RAG", "Claim");

                entity.Property(e => e.CommodityId).HasColumnName("CommodityID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Operator)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.Rag1)
                    .HasMaxLength(1)
                    .HasColumnName("RAG");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<ReciperoCheck>(entity =>
            {
                entity.HasKey(e => e.CheckId);

                entity.ToTable("ReciperoCheck", "Claim");

                entity.Property(e => e.CheckId).HasColumnName("Check_ID");

                entity.Property(e => e.CheckmendSearch)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CheckmendStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.DateAdded)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Added");

                entity.Property(e => e.Fmipstatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FMIPStatus");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Model)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NetworkBlocked)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PreviousClaims)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.WellFormedImei)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("WellFormedIMEI");
            });

            modelBuilder.Entity<ReciperoHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("ReciperoHistory", "Claim");

                entity.Property(e => e.HistoryId).HasColumnName("History_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.ContactNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateAdded)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Added");

                entity.Property(e => e.Insurer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SearchDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Search_Date");
            });

            modelBuilder.Entity<Removedochistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("removedochistory", "Site");

                entity.Property(e => e.DocumentId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocumentID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<Removetestcomment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("removetestcomments", "Site");

                entity.Property(e => e.ClaimCommentsHistoryId).ValueGeneratedOnAdd();

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Removetesthistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Removetesthistory", "Site");

                entity.Property(e => e.IStatusSlHistClaimId).HasColumnName("i_status_sl_hist_claim_id");

                entity.Property(e => e.IStatusSlHistDate)
                    .HasColumnType("datetime")
                    .HasColumnName("i_status_sl_hist_date");

                entity.Property(e => e.IStatusSlHistId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("i_status_sl_hist_id");

                entity.Property(e => e.IStatusSlHistStatusId).HasColumnName("i_status_sl_hist_status_id");

                entity.Property(e => e.IStatusSlHistUserId).HasColumnName("i_status_sl_hist_user_id");
            });

            modelBuilder.Entity<RepDesc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Rep_Desc", "MI");

                entity.Property(e => e.MiRepDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_DEsc");

                entity.Property(e => e.MiRepId).HasColumnName("MI_Rep_Id");

                entity.Property(e => e.MiRepPlev)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_PLev");

                entity.Property(e => e.MiRepPlhours).HasColumnName("MI_Rep_PLHours");

                entity.Property(e => e.MiRepSort).HasColumnName("MI_Rep_Sort");

                entity.Property(e => e.MiRepTarget)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_Target");

                entity.Property(e => e.MiRepType)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_Type");
            });

            modelBuilder.Entity<RepDescNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Rep_Desc_new", "MI");

                entity.Property(e => e.FilterDd).HasColumnName("FilterDD");

                entity.Property(e => e.MiRepDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_DEsc");

                entity.Property(e => e.MiRepId).HasColumnName("MI_Rep_Id");

                entity.Property(e => e.MiRepPlev)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_PLev");

                entity.Property(e => e.MiRepPlhours).HasColumnName("MI_Rep_PLHours");

                entity.Property(e => e.MiRepSort).HasColumnName("MI_Rep_Sort");

                entity.Property(e => e.MiRepTarget)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_Target");

                entity.Property(e => e.MiRepType)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_Type");
            });

            modelBuilder.Entity<RepDescOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Rep_Desc_Old", "MI");

                entity.Property(e => e.MiRepDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_DEsc");

                entity.Property(e => e.MiRepId).HasColumnName("MI_Rep_Id");

                entity.Property(e => e.MiRepPlev)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_PLev");

                entity.Property(e => e.MiRepPlhours).HasColumnName("MI_Rep_Plhours");

                entity.Property(e => e.MiRepSort).HasColumnName("MI_Rep_Sort");

                entity.Property(e => e.MiRepTarget)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_Target");

                entity.Property(e => e.MiRepType)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Rep_Type");
            });

            modelBuilder.Entity<RepairPartsCost>(entity =>
            {
                entity.ToTable("RepairPartsCosts", "Inspection");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.InspectionId).HasColumnName("InspectionID");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.PreClaimCondition)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Room).HasMaxLength(200);

                entity.Property(e => e.Specification).HasMaxLength(200);

                entity.Property(e => e.Unit).HasColumnType("money");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.RepairPartsCosts)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairPartsCosts_ItemRepair");
            });

            modelBuilder.Entity<ReplacementItem>(entity =>
            {
                entity.HasKey(e => e.ReplacementId)
                    .HasName("PK_Validation.ReplacementItem");

                entity.ToTable("ReplacementItem", "Validation");

                entity.Property(e => e.ReplacementId).HasColumnName("ReplacementID");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.DateSaved)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");

                entity.Property(e => e.Supplier).HasMaxLength(100);

                entity.HasOne(d => d.ClaimItem)
                    .WithMany(p => p.ReplacementItems)
                    .HasForeignKey(d => d.ClaimItemId)
                    .HasConstraintName("FK_Validation.ReplacementItem_Validation.ClaimItem");
            });

            modelBuilder.Entity<ReplacementItemsCost>(entity =>
            {
                entity.ToTable("ReplacementItemsCost", "Inspection");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Dimensions).HasMaxLength(200);

                entity.Property(e => e.InspectionId).HasColumnName("InspectionID");

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.PoundPerSquareMeter).HasColumnType("money");

                entity.Property(e => e.Room).HasMaxLength(200);

                entity.Property(e => e.Rrpcost)
                    .HasColumnType("money")
                    .HasColumnName("RRPcost");

                entity.Property(e => e.Sbscost)
                    .HasColumnType("money")
                    .HasColumnName("SBScost");

                entity.Property(e => e.Specification).HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierName).HasMaxLength(50);

                entity.Property(e => e.Unit).HasColumnType("money");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.ReplacementItemsCosts)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReplacementItemsCost_ItemRepair");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.ToTable("Report", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<ReportLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("Report_Log", "Accounts");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Log_Date");

                entity.Property(e => e.LogReport)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Log_Report");
            });

            modelBuilder.Entity<ReportSetting>(entity =>
            {
                entity.ToTable("ReportSettings", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndActionId).HasColumnName("EndActionID");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.StartActionId).HasColumnName("StartActionID");
            });

            modelBuilder.Entity<ReportStat>(entity =>
            {
                entity.ToTable("ReportStats", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionTime).HasColumnType("datetime");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<ReportedClaimFinance>(entity =>
            {
                entity.ToTable("ReportedClaimFinance", "MI");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.FinanceTypeId).HasColumnName("FinanceTypeID");
            });

            modelBuilder.Entity<ReportedItemFinance>(entity =>
            {
                entity.ToTable("ReportedItemFinance", "MI");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FinanceTypeId).HasColumnName("FinanceTypeID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");
            });

            modelBuilder.Entity<Request>(entity =>
            {
                entity.ToTable("Request", "Amazon");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Response).HasColumnType("text");
            });

            modelBuilder.Entity<Riaccessory>(entity =>
            {
                entity.HasKey(e => e.AccessoryId)
                    .HasName("PK_Validation.RIAccessory");

                entity.ToTable("RIAccessory", "Validation");

                entity.Property(e => e.AccessoryId).HasColumnName("AccessoryID");

                entity.Property(e => e.Brand).HasMaxLength(50);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ReplacementId).HasColumnName("ReplacementID");

                entity.Property(e => e.Supplier).HasMaxLength(50);

                entity.Property(e => e.SupplierProductCode).HasMaxLength(255);

                entity.Property(e => e.SupplierProductId).HasColumnName("SupplierProductID");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Roles", "nCompass");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.RoleKey).HasMaxLength(50);

                entity.Property(e => e.RoleName).HasMaxLength(50);
            });

            modelBuilder.Entity<Role1>(entity =>
            {
                entity.ToTable("Role", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<RolePath>(entity =>
            {
                entity.ToTable("Role_Path", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PathId).HasColumnName("PathID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.HasOne(d => d.Path)
                    .WithMany(p => p.RolePaths)
                    .HasForeignKey(d => d.PathId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Role_Path_Role_Path");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RolePaths)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Role_Path_Role");
            });

            modelBuilder.Entity<Rule>(entity =>
            {
                entity.ToTable("Rule", "FNOL");

                entity.Property(e => e.RuleId).HasColumnName("RuleID");

                entity.Property(e => e.DateAdded)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemPropertyIds)
                    .HasMaxLength(200)
                    .HasColumnName("ItemPropertyIDs");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");
            });

            modelBuilder.Entity<RuleValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Rule_Values", "FNOL");

                entity.Property(e => e.RuleId).HasColumnName("RuleID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<SAllItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_all_items", "MI");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SClaimorderid).HasColumnName("s_claimorderid");

                entity.Property(e => e.SCreatedby)
                    .HasMaxLength(50)
                    .HasColumnName("s_createdby");

                entity.Property(e => e.SCreatedon)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_createdon");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SItemtypeid).HasColumnName("s_itemtypeid");

                entity.Property(e => e.SProductid).HasColumnName("s_productid");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");
            });

            modelBuilder.Entity<SAllItem1>(entity =>
            {
                entity.HasKey(e => e.SClaimItemId);

                entity.ToTable("s_all_items", "Site");

                entity.HasIndex(e => e.SClaimorderid, "IXNC_s_all_items_s_claimorderid_B96B9");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SClaimorderid).HasColumnName("s_claimorderid");

                entity.Property(e => e.SCreatedby)
                    .HasMaxLength(50)
                    .HasColumnName("s_createdby");

                entity.Property(e => e.SCreatedon)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_createdon");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SItemtypeid).HasColumnName("s_itemtypeid");

                entity.Property(e => e.SProductid).HasColumnName("s_productid");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");
            });

            modelBuilder.Entity<SBerRatio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S_Ber_Ratio", "Site");

                entity.Property(e => e.Createdmonth).HasColumnName("createdmonth");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Outdesc)
                    .HasMaxLength(50)
                    .HasColumnName("outdesc");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SOutcome).HasColumnName("s_outcome");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SBerSupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_ber_supp", "Site");

                entity.Property(e => e.Outcount).HasColumnName("outcount");

                entity.Property(e => e.Outdesc)
                    .HasMaxLength(50)
                    .HasColumnName("outdesc");

                entity.Property(e => e.SOutcome).HasColumnName("s_outcome");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SConfirmInsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_confirm_insp", "Site");

                entity.Property(e => e.DeliveryAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Inscompany)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inscompany");

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredTitle)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalClaimItemId).HasColumnName("OriginalClaimItemID");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SBackup).HasColumnName("s_backup");

                entity.Property(e => e.SBackupComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_backup_comments");

                entity.Property(e => e.SBackupDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_date");

                entity.Property(e => e.SBackupDetails)
                    .HasMaxLength(200)
                    .HasColumnName("s_backup_details");

                entity.Property(e => e.SBackupRequestOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_request_on");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SClaimorderid).HasColumnName("s_claimorderid");

                entity.Property(e => e.SCondition)
                    .HasMaxLength(100)
                    .HasColumnName("s_condition");

                entity.Property(e => e.SCreatedby)
                    .HasMaxLength(50)
                    .HasColumnName("s_createdby");

                entity.Property(e => e.SCreatedon)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_createdon");

                entity.Property(e => e.SDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("s_damage_details");

                entity.Property(e => e.SDelAccId).HasColumnName("s_del_acc_id");

                entity.Property(e => e.SDelDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_del_date");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SEngineer)
                    .HasMaxLength(100)
                    .HasColumnName("s_engineer");

                entity.Property(e => e.SFAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address1");

                entity.Property(e => e.SFAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address2");

                entity.Property(e => e.SFAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address3");

                entity.Property(e => e.SFAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address4");

                entity.Property(e => e.SFContact)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_contact");

                entity.Property(e => e.SFFirstname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_firstname");

                entity.Property(e => e.SFLastname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_lastname");

                entity.Property(e => e.SFPhone)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_phone");

                entity.Property(e => e.SFPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_postcode");

                entity.Property(e => e.SFTitle)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_title");

                entity.Property(e => e.SFaultType).HasColumnName("s_fault_type");

                entity.Property(e => e.SInspCo).HasColumnName("s_insp_co");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspectionItem).HasColumnName("s_inspection_item");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SItemtypeid).HasColumnName("s_itemtypeid");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SMake)
                    .HasMaxLength(100)
                    .HasColumnName("s_make");

                entity.Property(e => e.SModel)
                    .HasMaxLength(100)
                    .HasColumnName("s_model");

                entity.Property(e => e.SOutcome)
                    .HasMaxLength(50)
                    .HasColumnName("s_outcome");

                entity.Property(e => e.SPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("s_printed");

                entity.Property(e => e.SProductid).HasColumnName("s_productid");

                entity.Property(e => e.SQuarantine).HasColumnName("s_quarantine");

                entity.Property(e => e.SQuarantineFrom)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_from");

                entity.Property(e => e.SQuarantineTime).HasColumnName("s_quarantine_time");

                entity.Property(e => e.SQuarantineTo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_to");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");

                entity.Property(e => e.STlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_tl_desc");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.SrPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("sr_printed");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SDeliveryAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_delivery_accounts", "Site");

                entity.Property(e => e.SDelAccDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_acc_desc");

                entity.Property(e => e.SDelAccId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_del_acc_id");
            });

            modelBuilder.Entity<SFaultAnalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_fault_analysis", "Site");

                entity.Property(e => e.Createdmonth).HasColumnName("createdmonth");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Faultdesc)
                    .HasMaxLength(50)
                    .HasColumnName("faultdesc");

                entity.Property(e => e.Outdesc)
                    .HasMaxLength(50)
                    .HasColumnName("outdesc");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SFaultType).HasColumnName("s_fault_type");

                entity.Property(e => e.SOutcome).HasColumnName("s_outcome");

                entity.Property(e => e.SSlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_sl_desc");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");

                entity.Property(e => e.STlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_tl_desc");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SFaultRelation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_fault_relations", "Site");

                entity.Property(e => e.FaultTypeId).HasColumnName("Fault_Type_Id");

                entity.Property(e => e.FixRateIndex).HasColumnName("Fix_Rate_Index");

                entity.Property(e => e.SFaultTypeId).HasColumnName("s_Fault_Type_id");
            });

            modelBuilder.Entity<SFaultType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_fault_types", "Site");

                entity.Property(e => e.SFaultType1)
                    .HasMaxLength(50)
                    .HasColumnName("s_fault_type");

                entity.Property(e => e.SFaultTypeId).HasColumnName("s_fault_type_id");
            });

            modelBuilder.Entity<SFixRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_fix_rates", "Site");

                entity.Property(e => e.FixCode)
                    .HasMaxLength(1)
                    .HasColumnName("Fix_Code");

                entity.Property(e => e.FixRate).HasColumnName("Fix_rate");

                entity.Property(e => e.FixRateIndex).HasColumnName("Fix_Rate_Index");
            });

            modelBuilder.Entity<SInsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_insp", "MI");

                entity.Property(e => e.SBackup).HasColumnName("s_backup");

                entity.Property(e => e.SBackupComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_backup_comments");

                entity.Property(e => e.SBackupDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_date");

                entity.Property(e => e.SBackupDetails)
                    .HasMaxLength(200)
                    .HasColumnName("s_backup_details");

                entity.Property(e => e.SBackupRequestOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_request_on");

                entity.Property(e => e.SCondition)
                    .HasMaxLength(100)
                    .HasColumnName("s_condition");

                entity.Property(e => e.SDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("s_damage_details");

                entity.Property(e => e.SDelAccId).HasColumnName("s_del_acc_id");

                entity.Property(e => e.SDelDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_del_date");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SEngineer)
                    .HasMaxLength(100)
                    .HasColumnName("s_engineer");

                entity.Property(e => e.SFAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address1");

                entity.Property(e => e.SFAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address2");

                entity.Property(e => e.SFAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address3");

                entity.Property(e => e.SFAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address4");

                entity.Property(e => e.SFContact)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_contact");

                entity.Property(e => e.SFFirstname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_firstname");

                entity.Property(e => e.SFLastname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_lastname");

                entity.Property(e => e.SFPhone)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_phone");

                entity.Property(e => e.SFPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_postcode");

                entity.Property(e => e.SFTitle)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_title");

                entity.Property(e => e.SFaultType).HasColumnName("s_fault_type");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SInspectionItem).HasColumnName("s_inspection_item");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SMake)
                    .HasMaxLength(100)
                    .HasColumnName("s_make");

                entity.Property(e => e.SModel)
                    .HasMaxLength(100)
                    .HasColumnName("s_model");

                entity.Property(e => e.SOutcome).HasColumnName("s_outcome");

                entity.Property(e => e.SPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("s_printed");

                entity.Property(e => e.SQuarantine).HasColumnName("s_quarantine");

                entity.Property(e => e.SQuarantineFrom)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_from");

                entity.Property(e => e.SQuarantineTime).HasColumnName("s_quarantine_time");

                entity.Property(e => e.SQuarantineTo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_to");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.SrPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("sr_printed");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("updated_by");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("updated_on");
            });

            modelBuilder.Entity<SInsp1>(entity =>
            {
                entity.HasKey(e => e.SInspectionId);

                entity.ToTable("s_insp", "Site");

                entity.HasIndex(e => e.SInspItem, "IXNC_s_insp_s_insp_item_1EE12");

                entity.HasIndex(e => e.SInspItem, "IXNC_s_insp_s_insp_item_A8CAC");

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SBackup).HasColumnName("s_backup");

                entity.Property(e => e.SBackupComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_backup_comments");

                entity.Property(e => e.SBackupDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_date");

                entity.Property(e => e.SBackupDetails)
                    .HasMaxLength(200)
                    .HasColumnName("s_backup_details");

                entity.Property(e => e.SBackupRequestOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_request_on");

                entity.Property(e => e.SCondition)
                    .HasMaxLength(100)
                    .HasColumnName("s_condition");

                entity.Property(e => e.SDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("s_damage_details");

                entity.Property(e => e.SDelAccId)
                    .HasColumnName("s_del_acc_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SDelBoxId).HasColumnName("s_del_box_id");

                entity.Property(e => e.SDelDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_del_date");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SEngineer)
                    .HasMaxLength(100)
                    .HasColumnName("s_engineer");

                entity.Property(e => e.SFAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address1");

                entity.Property(e => e.SFAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address2");

                entity.Property(e => e.SFAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address3");

                entity.Property(e => e.SFAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address4");

                entity.Property(e => e.SFContact)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_contact");

                entity.Property(e => e.SFFirstname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_firstname");

                entity.Property(e => e.SFLastname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_lastname");

                entity.Property(e => e.SFPhone)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_phone");

                entity.Property(e => e.SFPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_postcode");

                entity.Property(e => e.SFTitle)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_title");

                entity.Property(e => e.SFaultType)
                    .HasColumnName("s_fault_type")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspectionItem).HasColumnName("s_inspection_item");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SMake)
                    .HasMaxLength(100)
                    .HasColumnName("s_make");

                entity.Property(e => e.SModel)
                    .HasMaxLength(100)
                    .HasColumnName("s_model");

                entity.Property(e => e.SOutcome)
                    .HasColumnName("s_outcome")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("s_printed");

                entity.Property(e => e.SQuarantine)
                    .HasColumnName("s_quarantine")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SQuarantineFrom)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_from");

                entity.Property(e => e.SQuarantineTime)
                    .HasColumnName("s_quarantine_time")
                    .HasDefaultValueSql("((28))");

                entity.Property(e => e.SQuarantineTo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_to");

                entity.Property(e => e.SSlId)
                    .HasColumnName("s_sl_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus)
                    .HasColumnName("s_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.STlId)
                    .HasColumnName("s_tl_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SrPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("sr_printed");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("updated_by");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("updated_on");
            });

            modelBuilder.Entity<SInspItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_insp_items", "MI");

                entity.Property(e => e.SAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_address1");

                entity.Property(e => e.SAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_address2");

                entity.Property(e => e.SAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_address3");

                entity.Property(e => e.SAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_address4");

                entity.Property(e => e.SClaimId).HasColumnName("s_claim_id");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SConfirmed).HasColumnName("s_confirmed");

                entity.Property(e => e.SContact)
                    .HasMaxLength(50)
                    .HasColumnName("s_contact");

                entity.Property(e => e.SCreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("s_created_by");

                entity.Property(e => e.SCreatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_created_on");

                entity.Property(e => e.SDAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address1");

                entity.Property(e => e.SDAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address2");

                entity.Property(e => e.SDAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address3");

                entity.Property(e => e.SDAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address4");

                entity.Property(e => e.SDName)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_name");

                entity.Property(e => e.SDPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_postcode");

                entity.Property(e => e.SDelAccId).HasColumnName("s_del_acc_id");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(12)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SFirstname)
                    .HasMaxLength(20)
                    .HasColumnName("s_firstname");

                entity.Property(e => e.SInsCompany).HasColumnName("s_ins_company");

                entity.Property(e => e.SInspCompany).HasColumnName("s_insp_company");

                entity.Property(e => e.SInspItem1).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspType).HasColumnName("s_insp_type");

                entity.Property(e => e.SItemDesc)
                    .HasMaxLength(200)
                    .HasColumnName("s_Item_Desc");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SLastname)
                    .HasMaxLength(30)
                    .HasColumnName("s_lastname");

                entity.Property(e => e.SPhonehome)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonehome");

                entity.Property(e => e.SPhonemobile)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonemobile");

                entity.Property(e => e.SPhonework)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonework");

                entity.Property(e => e.SPostcode)
                    .HasMaxLength(10)
                    .HasColumnName("s_postcode");

                entity.Property(e => e.SProductType).HasColumnName("s_product_type");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.STitle)
                    .HasMaxLength(10)
                    .HasColumnName("s_title");
            });

            modelBuilder.Entity<SInspItem1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_insp_items", "Site");

                entity.Property(e => e.SAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_address1");

                entity.Property(e => e.SAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_address2");

                entity.Property(e => e.SAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_address3");

                entity.Property(e => e.SAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_address4");

                entity.Property(e => e.SClaimId).HasColumnName("s_claim_id");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SConfirmed).HasColumnName("s_confirmed");

                entity.Property(e => e.SContact)
                    .HasMaxLength(50)
                    .HasColumnName("s_contact");

                entity.Property(e => e.SCreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("s_created_by");

                entity.Property(e => e.SCreatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_created_on");

                entity.Property(e => e.SDAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address1");

                entity.Property(e => e.SDAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address2");

                entity.Property(e => e.SDAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address3");

                entity.Property(e => e.SDAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address4");

                entity.Property(e => e.SDName)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_name");

                entity.Property(e => e.SDPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_postcode");

                entity.Property(e => e.SDelAccId).HasColumnName("s_del_acc_id");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(12)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SFirstname)
                    .HasMaxLength(20)
                    .HasColumnName("s_firstname");

                entity.Property(e => e.SInsCompany).HasColumnName("s_ins_company");

                entity.Property(e => e.SInspCompany).HasColumnName("s_insp_company");

                entity.Property(e => e.SInspItem)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_insp_item");

                entity.Property(e => e.SInspType).HasColumnName("s_insp_type");

                entity.Property(e => e.SItemDesc)
                    .HasMaxLength(200)
                    .HasColumnName("s_Item_Desc");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SLastname)
                    .HasMaxLength(30)
                    .HasColumnName("s_lastname");

                entity.Property(e => e.SPhonehome)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonehome");

                entity.Property(e => e.SPhonemobile)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonemobile");

                entity.Property(e => e.SPhonework)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonework");

                entity.Property(e => e.SPostcode)
                    .HasMaxLength(10)
                    .HasColumnName("s_postcode");

                entity.Property(e => e.SProductType).HasColumnName("s_product_type");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus)
                    .HasColumnName("s_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.STitle)
                    .HasMaxLength(10)
                    .HasColumnName("s_title");
            });

            modelBuilder.Entity<SInspToReportTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_insp_to_report_time", "Site");

                entity.Property(e => e.Astat).HasColumnName("astat");

                entity.Property(e => e.Astaton)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("astaton");

                entity.Property(e => e.Atstatd)
                    .HasMaxLength(50)
                    .HasColumnName("atstatd");

                entity.Property(e => e.Repstat).HasColumnName("repstat");

                entity.Property(e => e.Repstatd)
                    .HasMaxLength(50)
                    .HasColumnName("repstatd");

                entity.Property(e => e.Repstaton)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("repstaton");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");
            });

            modelBuilder.Entity<SInspectedAttribute>(entity =>
            {
                entity.HasKey(e => e.SInspectedItemId);

                entity.ToTable("s_inspected_attributes", "Site");

                entity.Property(e => e.SInspectedItemId).HasColumnName("s_inspected_item_id");

                entity.Property(e => e.SInspectedAttribute1).HasColumnName("s_inspected_attribute");

                entity.Property(e => e.SInspectedValue)
                    .HasMaxLength(50)
                    .HasColumnName("s_inspected_value");

                entity.Property(e => e.SItemId).HasColumnName("s_item_id");
            });

            modelBuilder.Entity<SInspectionCo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_inspection_co", "MI");

                entity.Property(e => e.SInspCo).HasColumnName("s_insp_co");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspCompanyType).HasColumnName("s_insp_company_type");

                entity.Property(e => e.SInspSupplierId).HasColumnName("s_insp_supplier_id");

                entity.Property(e => e.SInspUserId).HasColumnName("s_insp_user_id");
            });

            modelBuilder.Entity<SInspectionCo1>(entity =>
            {
                entity.HasKey(e => e.SInspCo);

                entity.ToTable("s_inspection_co", "Site");

                entity.Property(e => e.SInspCo).HasColumnName("s_insp_co");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspCompanyType)
                    .HasColumnName("s_insp_company_type")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SInspSupplierId).HasColumnName("s_insp_supplier_id");

                entity.Property(e => e.SInspUserId).HasColumnName("s_insp_user_id");
            });

            modelBuilder.Entity<SInspectionDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_inspection_data", "Site");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SBackup).HasColumnName("s_backup");

                entity.Property(e => e.SBackupComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_backup_comments");

                entity.Property(e => e.SBackupDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_date");

                entity.Property(e => e.SBackupDetails)
                    .HasMaxLength(200)
                    .HasColumnName("s_backup_details");

                entity.Property(e => e.SBackupRequestOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_request_on");

                entity.Property(e => e.SClaimId).HasColumnName("s_claim_id");

                entity.Property(e => e.SCondition)
                    .HasMaxLength(100)
                    .HasColumnName("s_condition");

                entity.Property(e => e.SDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("s_damage_details");

                entity.Property(e => e.SDelAccDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_acc_desc");

                entity.Property(e => e.SDelAccId).HasColumnName("s_del_acc_id");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(12)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SEngineer)
                    .HasMaxLength(100)
                    .HasColumnName("s_engineer");

                entity.Property(e => e.SFAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address1");

                entity.Property(e => e.SFAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address2");

                entity.Property(e => e.SFAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address3");

                entity.Property(e => e.SFAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address4");

                entity.Property(e => e.SFContact)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_contact");

                entity.Property(e => e.SFPhone)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_phone");

                entity.Property(e => e.SFPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_postcode");

                entity.Property(e => e.SFaultType).HasColumnName("s_fault_type");

                entity.Property(e => e.SInsCompany).HasColumnName("s_ins_company");

                entity.Property(e => e.SInsDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("s_ins_desc");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspCompany).HasColumnName("s_insp_company");

                entity.Property(e => e.SInspDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("s_insp_desc");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspType).HasColumnName("s_insp_type");

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SInspectionItem).HasColumnName("s_inspection_item");

                entity.Property(e => e.SItemDesc)
                    .HasMaxLength(200)
                    .HasColumnName("s_Item_Desc");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SMake)
                    .HasMaxLength(100)
                    .HasColumnName("s_make");

                entity.Property(e => e.SModel)
                    .HasMaxLength(100)
                    .HasColumnName("s_model");

                entity.Property(e => e.SProductType).HasColumnName("s_product_type");

                entity.Property(e => e.SQuarantine).HasColumnName("s_quarantine");

                entity.Property(e => e.SQuarantineFrom)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_from");

                entity.Property(e => e.SQuarantineTime).HasColumnName("s_quarantine_time");

                entity.Property(e => e.SQuarantineTo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_to");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");
            });

            modelBuilder.Entity<SInsuranceAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S_Insurance_All", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Inspectiontype)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("inspectiontype");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.Mcreated).HasColumnName("mcreated");

                entity.Property(e => e.Outcome)
                    .HasMaxLength(50)
                    .HasColumnName("outcome");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SClaimorderid).HasColumnName("s_claimorderid");

                entity.Property(e => e.SCreatedby)
                    .HasMaxLength(50)
                    .HasColumnName("s_createdby");

                entity.Property(e => e.SCreatedon)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_createdon");

                entity.Property(e => e.SFaultType).HasColumnName("s_fault_type");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspSupplierId).HasColumnName("s_insp_supplier_id");

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SItemtypeid).HasColumnName("s_itemtypeid");

                entity.Property(e => e.SOutcome).HasColumnName("s_outcome");

                entity.Property(e => e.SOutcomeId).HasColumnName("s_outcome_id");

                entity.Property(e => e.SProductid).HasColumnName("s_productid");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("updated_by");

                entity.Property(e => e.UpdatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("updated_on");
            });

            modelBuilder.Entity<SInsuranceShow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_insurance_show", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SCreatedon)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_createdon");

                entity.Property(e => e.SFContact)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_contact");

                entity.Property(e => e.SFPhone)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_phone");

                entity.Property(e => e.SFPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_postcode");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLAttrib>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_attribs", "Site");

                entity.Property(e => e.SAttribDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_attrib_desc");

                entity.Property(e => e.SAttribId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_attrib_id");

                entity.Property(e => e.SShow)
                    .HasColumnName("s_show")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SStShow)
                    .HasColumnName("s_st_show")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SLFaultType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_fault_types", "MI");

                entity.Property(e => e.SFaultType)
                    .HasMaxLength(50)
                    .HasColumnName("s_fault_type");

                entity.Property(e => e.SFaultTypeId).HasColumnName("s_fault_type_id");

                entity.Property(e => e.SFaultWarrantyFault).HasColumnName("s_fault_warranty_fault");
            });

            modelBuilder.Entity<SLFaultType1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_fault_types", "Site");

                entity.Property(e => e.SFaultType)
                    .HasMaxLength(50)
                    .HasColumnName("s_fault_type");

                entity.Property(e => e.SFaultTypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_fault_type_id");

                entity.Property(e => e.SFaultWarrantyFault)
                    .IsRequired()
                    .HasColumnName("s_fault_warranty_fault")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SLSl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_sl", "MI");

                entity.Property(e => e.SSlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_sl_desc");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");

                entity.Property(e => e.STblItemType).HasColumnName("s_TblItemType");

                entity.Property(e => e.STl).HasColumnName("s_tl");
            });

            modelBuilder.Entity<SLSl1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_sl", "Site");

                entity.Property(e => e.FnolproductTypeId).HasColumnName("FNOLProductTypeID");

                entity.Property(e => e.SSlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_sl_desc");

                entity.Property(e => e.SSlId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_sl_id");

                entity.Property(e => e.STblItemType).HasColumnName("s_TblItemType");

                entity.Property(e => e.STl).HasColumnName("s_tl");
            });

            modelBuilder.Entity<SLSlAttrib>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_sl_attrib", "Site");

                entity.Property(e => e.SAttribId).HasColumnName("s_attrib_id");

                entity.Property(e => e.SSlAttribId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_sl_attrib_id");

                entity.Property(e => e.SSlAttribSignificance)
                    .HasColumnName("s_sl_attrib_significance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");
            });

            modelBuilder.Entity<SLSlFault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_sl_faults", "MI");

                entity.Property(e => e.SFaultTypeId).HasColumnName("s_fault_type_id");

                entity.Property(e => e.SSlFaultId).HasColumnName("s_sl_fault_id");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");
            });

            modelBuilder.Entity<SLSlFault1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_sl_faults", "Site");

                entity.Property(e => e.SFaultTypeId).HasColumnName("s_fault_type_id");

                entity.Property(e => e.SSlFaultId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_sl_fault_id");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");
            });

            modelBuilder.Entity<SLTl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_tl", "MI");

                entity.Property(e => e.STlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_tl_desc");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");
            });

            modelBuilder.Entity<SLTl1>(entity =>
            {
                entity.HasKey(e => e.STlId);

                entity.ToTable("s_l_tl", "Site");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.STlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_tl_desc");
            });

            modelBuilder.Entity<SLTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_l_trans", "Site");

                entity.Property(e => e.SProductTypeId).HasColumnName("s_product_type_id");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.STransId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_trans_id");
            });

            modelBuilder.Entity<SOutcome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_outcomes", "MI");

                entity.Property(e => e.SOutcome1)
                    .HasMaxLength(50)
                    .HasColumnName("s_outcome");

                entity.Property(e => e.SOutcomeId).HasColumnName("s_outcome_id");

                entity.Property(e => e.SSort).HasColumnName("s_sort");
            });

            modelBuilder.Entity<SOutcome1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_outcomes", "Site");

                entity.Property(e => e.NewId).HasColumnName("NewID");

                entity.Property(e => e.SOutcome)
                    .HasMaxLength(50)
                    .HasColumnName("s_outcome");

                entity.Property(e => e.SOutcomeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_outcome_id");

                entity.Property(e => e.SSort).HasColumnName("s_sort");
            });

            modelBuilder.Entity<SPortalUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_portal_users", "Site");

                entity.Property(e => e.LongName).HasMaxLength(50);

                entity.Property(e => e.UserIndex)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("user_index");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .HasColumnName("username");

                entity.Property(e => e.Userpassword)
                    .HasMaxLength(50)
                    .HasColumnName("userpassword");

                entity.Property(e => e.Usertype)
                    .HasMaxLength(50)
                    .HasColumnName("usertype");
            });

            modelBuilder.Entity<SProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_products", "Site");

                entity.Property(e => e.SOldClaimCode).HasColumnName("s_old_claim_code");

                entity.Property(e => e.SProductCreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("s_product_created_By");

                entity.Property(e => e.SProductCreatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_product_created_on");

                entity.Property(e => e.SProductDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_product_desc");

                entity.Property(e => e.SProductType)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("s_product_type");
            });

            modelBuilder.Entity<SReportInsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_report_insp", "Site");

                entity.Property(e => e.DeliveryAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Inscompany)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inscompany");

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredTitle)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SBackup).HasColumnName("s_backup");

                entity.Property(e => e.SBackupComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_backup_comments");

                entity.Property(e => e.SBackupDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_date");

                entity.Property(e => e.SBackupDetails)
                    .HasMaxLength(200)
                    .HasColumnName("s_backup_details");

                entity.Property(e => e.SBackupRequestOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_request_on");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SClaimorderid).HasColumnName("s_claimorderid");

                entity.Property(e => e.SCondition)
                    .HasMaxLength(100)
                    .HasColumnName("s_condition");

                entity.Property(e => e.SCreatedon)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_createdon");

                entity.Property(e => e.SDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("s_damage_details");

                entity.Property(e => e.SDelAccDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_acc_desc");

                entity.Property(e => e.SDelAccId).HasColumnName("s_del_acc_id");

                entity.Property(e => e.SDelDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_del_date");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(50)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SEngineer)
                    .HasMaxLength(100)
                    .HasColumnName("s_engineer");

                entity.Property(e => e.SFAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address1");

                entity.Property(e => e.SFAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address2");

                entity.Property(e => e.SFAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address3");

                entity.Property(e => e.SFAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_address4");

                entity.Property(e => e.SFContact)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_contact");

                entity.Property(e => e.SFFirstname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_firstname");

                entity.Property(e => e.SFLastname)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_lastname");

                entity.Property(e => e.SFPhone)
                    .HasMaxLength(100)
                    .HasColumnName("s_f_phone");

                entity.Property(e => e.SFPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_postcode");

                entity.Property(e => e.SFTitle)
                    .HasMaxLength(50)
                    .HasColumnName("s_f_title");

                entity.Property(e => e.SFaultType).HasColumnName("s_fault_type");

                entity.Property(e => e.SInspCo).HasColumnName("s_insp_co");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspectionItem).HasColumnName("s_inspection_item");

                entity.Property(e => e.SInsuranceclaimid).HasColumnName("s_insuranceclaimid");

                entity.Property(e => e.SItemtypeid).HasColumnName("s_itemtypeid");

                entity.Property(e => e.SLastUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_last_updated");

                entity.Property(e => e.SMake)
                    .HasMaxLength(100)
                    .HasColumnName("s_make");

                entity.Property(e => e.SModel)
                    .HasMaxLength(100)
                    .HasColumnName("s_model");

                entity.Property(e => e.SOutcome)
                    .HasMaxLength(50)
                    .HasColumnName("s_outcome");

                entity.Property(e => e.SOutcomeId).HasColumnName("s_outcome_id");

                entity.Property(e => e.SPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("s_printed");

                entity.Property(e => e.SProductid).HasColumnName("s_productid");

                entity.Property(e => e.SQuarantine).HasColumnName("s_quarantine");

                entity.Property(e => e.SQuarantineFrom)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_from");

                entity.Property(e => e.SQuarantineTime).HasColumnName("s_quarantine_time");

                entity.Property(e => e.SQuarantineTo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_to");

                entity.Property(e => e.SSlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_sl_desc");

                entity.Property(e => e.SSlId).HasColumnName("s_sl_id");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_status_comments");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");

                entity.Property(e => e.STlDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_tl_desc");

                entity.Property(e => e.STlId).HasColumnName("s_tl_id");

                entity.Property(e => e.SrPrinted)
                    .HasMaxLength(10)
                    .HasColumnName("sr_printed");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SStatTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_stat_trans", "Site");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInsuranceClaim).HasColumnName("s_insurance_claim");

                entity.Property(e => e.SStatusBy)
                    .HasMaxLength(20)
                    .HasColumnName("s_status_by");

                entity.Property(e => e.SStatusFrom).HasColumnName("s_status_from");

                entity.Property(e => e.SStatusOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_status_on");

                entity.Property(e => e.SStatusTo).HasColumnName("s_status_to");

                entity.Property(e => e.STrackerId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("S_Tracker_ID");
            });

            modelBuilder.Entity<SStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s_status", "Site");

                entity.Property(e => e.NewId).HasColumnName("NewID");

                entity.Property(e => e.SOrder).HasColumnName("s_order");

                entity.Property(e => e.SSbs).HasColumnName("s_sbs");

                entity.Property(e => e.SStatus1).HasColumnName("s_Status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");
            });

            modelBuilder.Entity<SStatusCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S_Status_count", "Site");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.SSupplierid).HasColumnName("s_supplierid");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SStatusT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_status_t", "Site");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspCompany).HasColumnName("s_insp_company");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspType).HasColumnName("s_insp_type");

                entity.Property(e => e.SInsuranceClaim).HasColumnName("s_insurance_claim");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.SStatusOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_status_on");

                entity.Property(e => e.SStatusTo).HasColumnName("s_status_to");

                entity.Property(e => e.STrackerId).HasColumnName("S_Tracker_ID");
            });

            modelBuilder.Entity<STimeToReportByInsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_time_to_report_byInsp", "Site");

                entity.Property(e => e.Astaton)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("astaton");

                entity.Property(e => e.Repstaton)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("repstaton");

                entity.Property(e => e.SInspCo).HasColumnName("s_insp_co");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.Timetoreport).HasColumnName("timetoreport");
            });

            modelBuilder.Entity<STimesAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_times_all", "Site");

                entity.Property(e => e.Astaton)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("astaton");

                entity.Property(e => e.Repstaton)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("repstaton");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.Timetoreport).HasColumnName("timetoreport");
            });

            modelBuilder.Entity<STopstat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S_Topstats", "Site");

                entity.Property(e => e.SOutcome)
                    .HasMaxLength(50)
                    .HasColumnName("s_outcome");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STypestat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S_typestats", "Site");

                entity.Property(e => e.SStatus).HasColumnName("s_Status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SV1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S_v1", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_1");

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CarrGross).HasColumnName("CARR_GROSS");

                entity.Property(e => e.CarrNet).HasColumnName("CARR_NET");

                entity.Property(e => e.CarrTax).HasColumnName("CARR_TAX");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GrossAmount).HasColumnName("GROSS_AMOUNT");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceGross).HasColumnName("INVOICE_GROSS");

                entity.Property(e => e.InvoiceNet).HasColumnName("INVOICE_NET");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceTax).HasColumnName("INVOICE_TAX");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");

                entity.Property(e => e.Tclid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TCLID");
            });

            modelBuilder.Entity<SViewInspection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("s_view_inspection", "Site");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_address1");

                entity.Property(e => e.SAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_address2");

                entity.Property(e => e.SAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_address3");

                entity.Property(e => e.SAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_address4");

                entity.Property(e => e.SBackup).HasColumnName("s_backup");

                entity.Property(e => e.SBackupComments)
                    .HasColumnType("ntext")
                    .HasColumnName("s_backup_comments");

                entity.Property(e => e.SBackupDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_date");

                entity.Property(e => e.SBackupDetails)
                    .HasMaxLength(200)
                    .HasColumnName("s_backup_details");

                entity.Property(e => e.SBackupRequestOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_backup_request_on");

                entity.Property(e => e.SClaimId).HasColumnName("s_claim_id");

                entity.Property(e => e.SClaimItemId).HasColumnName("s_claim_item_id");

                entity.Property(e => e.SCondition)
                    .HasMaxLength(100)
                    .HasColumnName("s_condition");

                entity.Property(e => e.SContact)
                    .HasMaxLength(50)
                    .HasColumnName("s_contact");

                entity.Property(e => e.SCreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("s_created_by");

                entity.Property(e => e.SCreatedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_created_on");

                entity.Property(e => e.SDAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address1");

                entity.Property(e => e.SDAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address2");

                entity.Property(e => e.SDAddress3)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address3");

                entity.Property(e => e.SDAddress4)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_address4");

                entity.Property(e => e.SDName)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_name");

                entity.Property(e => e.SDPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("s_d_postcode");

                entity.Property(e => e.SDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("s_damage_details");

                entity.Property(e => e.SDelAccId).HasColumnName("s_del_acc_id");

                entity.Property(e => e.SDelRef)
                    .HasMaxLength(12)
                    .HasColumnName("s_del_ref");

                entity.Property(e => e.SEngineer)
                    .HasMaxLength(100)
                    .HasColumnName("s_engineer");

                entity.Property(e => e.SFaultType).HasColumnName("s_fault_type");

                entity.Property(e => e.SFirstname)
                    .HasMaxLength(20)
                    .HasColumnName("s_firstname");

                entity.Property(e => e.SInsCompany).HasColumnName("s_ins_company");

                entity.Property(e => e.SInsDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("s_ins_desc");

                entity.Property(e => e.SInspCoDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_insp_co_Desc");

                entity.Property(e => e.SInspCompany).HasColumnName("s_insp_company");

                entity.Property(e => e.SInspDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("s_insp_desc");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SInspType).HasColumnName("s_insp_type");

                entity.Property(e => e.SInspectionId).HasColumnName("s_inspection_id");

                entity.Property(e => e.SItemDesc)
                    .HasMaxLength(200)
                    .HasColumnName("s_Item_Desc");

                entity.Property(e => e.SLastname)
                    .HasMaxLength(30)
                    .HasColumnName("s_lastname");

                entity.Property(e => e.SMake)
                    .HasMaxLength(100)
                    .HasColumnName("s_make");

                entity.Property(e => e.SModel)
                    .HasMaxLength(100)
                    .HasColumnName("s_model");

                entity.Property(e => e.SPhonehome)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonehome");

                entity.Property(e => e.SPhonemobile)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonemobile");

                entity.Property(e => e.SPhonework)
                    .HasMaxLength(20)
                    .HasColumnName("s_phonework");

                entity.Property(e => e.SPostcode)
                    .HasMaxLength(10)
                    .HasColumnName("s_postcode");

                entity.Property(e => e.SProductType).HasColumnName("s_product_type");

                entity.Property(e => e.SQuarantine).HasColumnName("s_quarantine");

                entity.Property(e => e.SQuarantineFrom)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_from");

                entity.Property(e => e.SQuarantineTime).HasColumnName("s_quarantine_time");

                entity.Property(e => e.SQuarantineTo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("s_quarantine_to");

                entity.Property(e => e.SSpecInstr)
                    .HasColumnType("ntext")
                    .HasColumnName("s_spec_instr");

                entity.Property(e => e.SStatus).HasColumnName("s_status");

                entity.Property(e => e.SStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("s_Status_desc");

                entity.Property(e => e.STitle)
                    .HasMaxLength(10)
                    .HasColumnName("s_title");
            });

            modelBuilder.Entity<SageCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SAGE_Codes", "MI");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Desc");

                entity.Property(e => e.SageId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Sage_Id");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(50)
                    .HasColumnName("STOCK_CODE");
            });

            modelBuilder.Entity<SageDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sage_Data", "MI");

                entity.Property(e => e.Acc).HasMaxLength(255);

                entity.Property(e => e.AccName)
                    .HasMaxLength(255)
                    .HasColumnName("Acc_Name");

                entity.Property(e => e.Calc1).HasColumnName("calc1");

                entity.Property(e => e.Calc2).HasColumnName("calc2");

                entity.Property(e => e.Calc3).HasColumnName("calc3");

                entity.Property(e => e.CarriageGross).HasColumnName("carriageGross");

                entity.Property(e => e.Carriagenet).HasColumnName("carriagenet");

                entity.Property(e => e.Carriagetax).HasColumnName("carriagetax");

                entity.Property(e => e.Details)
                    .HasMaxLength(255)
                    .HasColumnName("details");

                entity.Property(e => e.Gross).HasColumnName("gross");

                entity.Property(e => e.InvDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("inv_date");

                entity.Property(e => e.InvGross).HasColumnName("inv_gross");

                entity.Property(e => e.InvNet).HasColumnName("inv_net");

                entity.Property(e => e.InvNo).HasColumnName("Inv_no");

                entity.Property(e => e.InvTax).HasColumnName("inv_tax");

                entity.Property(e => e.Net).HasColumnName("net");

                entity.Property(e => e.Qty)
                    .HasMaxLength(255)
                    .HasColumnName("qty");

                entity.Property(e => e.RecType)
                    .HasMaxLength(255)
                    .HasColumnName("rec_type");

                entity.Property(e => e.SbsRef).HasColumnName("sbs_ref");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(255)
                    .HasColumnName("Stock_Code");

                entity.Property(e => e.Tax)
                    .HasMaxLength(255)
                    .HasColumnName("tax");
            });

            modelBuilder.Entity<SagePi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sage_PI", "Accounts");

                entity.Property(e => e.SpiAccountingPeriod).HasColumnName("spi_accounting_period");

                entity.Property(e => e.SpiCarriage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("spi_carriage");

                entity.Property(e => e.SpiCreatedBy).HasColumnName("spi_created_by");

                entity.Property(e => e.SpiCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("spi_created_on");

                entity.Property(e => e.SpiDate)
                    .HasColumnType("datetime")
                    .HasColumnName("spi_date");

                entity.Property(e => e.SpiEditedBy).HasColumnName("spi_edited_by");

                entity.Property(e => e.SpiEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("spi_edited_on");

                entity.Property(e => e.SpiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("spi_id");

                entity.Property(e => e.SpiNetGoods)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("spi_net_goods");

                entity.Property(e => e.SpiPoNumber).HasColumnName("spi_po_number");

                entity.Property(e => e.SpiPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("spi_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.SpiSupplierId).HasColumnName("spi_supplier_id");

                entity.Property(e => e.SpiTransPeriod).HasColumnName("spi_trans_period");

                entity.Property(e => e.SpiTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("spi_trans_ref");
            });

            modelBuilder.Entity<SagePo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sage_PO", "Accounts");

                entity.Property(e => e.SpoCarriage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("spo_carriage");

                entity.Property(e => e.SpoClaimId).HasColumnName("spo_claim_id");

                entity.Property(e => e.SpoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("spo_date");

                entity.Property(e => e.SpoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("spo_id");

                entity.Property(e => e.SpoNetGoods)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("spo_net_goods");

                entity.Property(e => e.SpoPoNumber).HasColumnName("spo_po_number");

                entity.Property(e => e.SpoSupplierId).HasColumnName("spo_supplier_id");
            });

            modelBuilder.Entity<Sagetest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("sagetest", "Site");

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.CarriageBuy).HasColumnType("money");

                entity.Property(e => e.CarriageSell).HasColumnType("money");

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CreditRaised).HasColumnName("Credit_Raised");

                entity.Property(e => e.CreditRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Raised_Date");

                entity.Property(e => e.CreditReq).HasColumnName("Credit_Req");

                entity.Property(e => e.CreditReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Req_Date");

                entity.Property(e => e.CreditSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Sage");

                entity.Property(e => e.CreditSync).HasColumnName("Credit_Sync");

                entity.Property(e => e.CreditSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Sync_Date");

                entity.Property(e => e.CreditVat).HasColumnName("Credit_VAT");

                entity.Property(e => e.DateCancelled).HasColumnType("datetime");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Expr1).HasColumnType("datetime");

                entity.Property(e => e.Expr2)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Expr4).HasColumnType("datetime");

                entity.Property(e => e.Expr5)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.InitiatingInspectionId).HasColumnName("InitiatingInspectionID");

                entity.Property(e => e.InvRaised).HasColumnName("Inv_Raised");

                entity.Property(e => e.InvRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Raised_Date");

                entity.Property(e => e.InvReq).HasColumnName("Inv_Req");

                entity.Property(e => e.InvReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Req_Date");

                entity.Property(e => e.InvReqRaisedBy).HasColumnName("Inv_Req_RaisedBy");

                entity.Property(e => e.InvSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Sage");

                entity.Property(e => e.InvSync).HasColumnName("Inv_Sync");

                entity.Property(e => e.InvSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Sync_Date");

                entity.Property(e => e.InvVat).HasColumnName("Inv_VAT");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.LinkedConumber).HasColumnName("LinkedCONumber");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalClaimItemId).HasColumnName("OriginalClaimItemID");

                entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

                entity.Property(e => e.PoRaised).HasColumnName("PO_Raised");

                entity.Property(e => e.PoRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Raised_Date");

                entity.Property(e => e.PoReq).HasColumnName("PO_Req");

                entity.Property(e => e.PoReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Req_Date");

                entity.Property(e => e.PoReqRaisedBy).HasColumnName("PO_Req_RaisedBy");

                entity.Property(e => e.PoSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_Sage");

                entity.Property(e => e.PoSync).HasColumnName("PO_Sync");

                entity.Property(e => e.PoSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Sync_Date");

                entity.Property(e => e.PoVat).HasColumnName("PO_VAT");

                entity.Property(e => e.SageInvoiceNumber)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SagePonumber)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SagePONumber");

                entity.Property(e => e.SalapprovalNote).HasColumnName("SALapprovalNote");

                entity.Property(e => e.Salapproved).HasColumnName("SALapproved");

                entity.Property(e => e.SalapprovedBy)
                    .HasMaxLength(50)
                    .HasColumnName("SALapprovedBy");

                entity.Property(e => e.SalapprovedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALapprovedDate");

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierProductReference).HasMaxLength(200);

                entity.Property(e => e.SupplierServiceId).HasColumnName("SupplierServiceID");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesInvoiceDetail>(entity =>
            {
                entity.HasKey(e => e.SidId);

                entity.ToTable("SalesInvoiceDetail", "Accounts");

                entity.HasIndex(e => e.SidClaimOrderId, "IXNC_SalesInvoiceDetail_sid_ClaimOrderId_7E57F");

                entity.HasIndex(e => e.SidItemCode, "IXNC_SalesInvoiceDetail_sid_item_code_FF248");

                entity.HasIndex(e => e.SidSimId, "IXNC_SalesInvoiceDetail_sid_sim_id_06170");

                entity.HasIndex(e => new { e.SidSimId, e.SidId }, "_dta_index_SalesInvoiceDetail_9_1723153184__K2_K1_3_6");

                entity.HasIndex(e => new { e.SidSimId, e.SidId }, "_dta_index_SalesInvoiceDetail_9_1723153184__K2_K1_7_8");

                entity.HasIndex(e => new { e.SidSimId, e.SidId }, "_dta_index_SalesInvoiceDetail_9_1723153184__K2_K1_8");

                entity.HasIndex(e => new { e.SidSimId, e.SidId, e.SidClaimOrderId }, "_dta_index_SalesInvoiceDetail_9_1723153184__K2_K1_K3_8_15");

                entity.Property(e => e.SidId).HasColumnName("sid_id");

                entity.Property(e => e.SidBcId).HasColumnName("sid_bc_id");

                entity.Property(e => e.SidClaimOrderId).HasColumnName("sid_ClaimOrderId");

                entity.Property(e => e.SidCostEach)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sid_cost_each");

                entity.Property(e => e.SidHideItem).HasColumnName("sid_hide_item");

                entity.Property(e => e.SidItemCode).HasColumnName("sid_item_code");

                entity.Property(e => e.SidItemName)
                    .HasMaxLength(400)
                    .HasColumnName("sid_item_name");

                entity.Property(e => e.SidItemtypeId).HasColumnName("sid_itemtypeID");

                entity.Property(e => e.SidNlaId).HasColumnName("sid_nla_id");

                entity.Property(e => e.SidPriceEach)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sid_price_each");

                entity.Property(e => e.SidQuantity).HasColumnName("sid_quantity");

                entity.Property(e => e.SidSieId).HasColumnName("sid_sie_id");

                entity.Property(e => e.SidSimId).HasColumnName("sid_sim_id");

                entity.Property(e => e.SidVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sid_vat");

                entity.Property(e => e.SidVrId).HasColumnName("sid_vr_id");
            });

            modelBuilder.Entity<SalesInvoiceExtra>(entity =>
            {
                entity.HasKey(e => e.SieId);

                entity.ToTable("SalesInvoiceExtras", "Accounts");

                entity.Property(e => e.SieId).HasColumnName("sie_id");

                entity.Property(e => e.SieAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sie_Amount");

                entity.Property(e => e.SieDescription)
                    .HasMaxLength(50)
                    .HasColumnName("sie_Description");

                entity.Property(e => e.SieLossAdjusterFlag).HasColumnName("sie_LossAdjusterFlag");

                entity.Property(e => e.SieNlaId).HasColumnName("sie_nla_id");

                entity.Property(e => e.SieVrId).HasColumnName("sie_vr_id");

                entity.Property(e => e.SieVtId).HasColumnName("sie_vt_id");
            });

            modelBuilder.Entity<SalesInvoiceMaster>(entity =>
            {
                entity.HasKey(e => e.SimId);

                entity.ToTable("SalesInvoiceMaster", "Accounts");

                entity.HasIndex(e => e.SimBetterment, "IXNC_SalesInvoiceMaster_sim_betterment_F3C96");

                entity.HasIndex(e => new { e.SimClaimId, e.SimDocType, e.SimInvoiceNo }, "IXNC_SalesInvoiceMaster_sim_claim_id_sim_doc_type_sim_invoice_no_369CE");

                entity.HasIndex(e => e.SimCustomerId, "IXNC_SalesInvoiceMaster_sim_customer_id_A865B");

                entity.HasIndex(e => e.SimExcess, "IXNC_SalesInvoiceMaster_sim_excess_949AC");

                entity.HasIndex(e => new { e.SimInsCoId, e.SimInvType, e.SimDocType }, "IXNC_SalesInvoiceMaster_sim_ins_co_id_sim_inv_type_sim_doc_type_58E8B");

                entity.HasIndex(e => new { e.SimPosted, e.SimCustomerId }, "IXNC_SalesInvoiceMaster_sim_posted_sim_customer_id_1B98B");

                entity.HasIndex(e => new { e.SimPosted, e.SimDate }, "IXNC_SalesInvoiceMaster_sim_posted_sim_date_AED42");

                entity.HasIndex(e => new { e.SimPosted, e.SimInvoiceNo, e.SimDate }, "IXNC_SalesInvoiceMaster_sim_posted_sim_invoice_no_sim_date_D967C");

                entity.HasIndex(e => new { e.SimAccountingPeriod, e.SimClaimId }, "Sim_AccountingPeriod_ClaimID");

                entity.HasIndex(e => new { e.SimClaimId, e.SimId, e.SimDate }, "_dta_index_SalesInvoiceMaster_16_1787153412__K6_K1_K4");

                entity.HasIndex(e => new { e.SimPosted, e.SimInsCoId, e.SimInvType, e.SimId }, "_dta_index_SalesInvoiceMaster_9_1787153412__K16_K3_K9_K1");

                entity.HasIndex(e => e.SimId, "_dta_index_SalesInvoiceMaster_9_1787153412__K1_6");

                entity.HasIndex(e => new { e.SimId, e.SimClaimId }, "_dta_index_SalesInvoiceMaster_9_1787153412__K1_K6");

                entity.HasIndex(e => new { e.SimClaimId, e.SimId }, "_dta_index_SalesInvoiceMaster_9_1787153412__K6_K1");

                entity.HasIndex(e => new { e.SimClaimId, e.SimId }, "_dta_index_SalesInvoiceMaster_9_1787153412__K6_K1_9_12_13_15");

                entity.Property(e => e.SimId).HasColumnName("sim_id");

                entity.Property(e => e.SimAccountingPeriod).HasColumnName("sim_accounting_period");

                entity.Property(e => e.SimAddVat).HasColumnName("sim_add_VAT");

                entity.Property(e => e.SimAutoVatCalc).HasColumnName("sim_auto_VAT_calc");

                entity.Property(e => e.SimBetterment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sim_betterment");

                entity.Property(e => e.SimBettermentVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sim_betterment_vat");

                entity.Property(e => e.SimBettermentVrId).HasColumnName("sim_betterment_vr_id");

                entity.Property(e => e.SimCarriage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sim_carriage");

                entity.Property(e => e.SimCarriageVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sim_carriage_vat");

                entity.Property(e => e.SimCarriageVrId).HasColumnName("sim_carriage_vr_id");

                entity.Property(e => e.SimClaimId).HasColumnName("sim_claim_id");

                entity.Property(e => e.SimClaimInvInstance).HasColumnName("sim_claim_inv_instance");

                entity.Property(e => e.SimComment)
                    .HasColumnType("ntext")
                    .HasColumnName("sim_comment");

                entity.Property(e => e.SimCommentInternal)
                    .HasColumnType("ntext")
                    .HasColumnName("sim_comment_internal");

                entity.Property(e => e.SimCreatedBy).HasColumnName("sim_created_by");

                entity.Property(e => e.SimCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("sim_created_on");

                entity.Property(e => e.SimCustomerId).HasColumnName("sim_customer_id");

                entity.Property(e => e.SimDate)
                    .HasColumnType("datetime")
                    .HasColumnName("sim_date");

                entity.Property(e => e.SimDocType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("sim_doc_type")
                    .IsFixedLength();

                entity.Property(e => e.SimEditedBy).HasColumnName("sim_edited_by");

                entity.Property(e => e.SimEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("sim_edited_on");

                entity.Property(e => e.SimExcess)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sim_excess");

                entity.Property(e => e.SimHideBetterment).HasColumnName("sim_hide_betterment");

                entity.Property(e => e.SimHideCarriage).HasColumnName("sim_hide_carriage");

                entity.Property(e => e.SimHideExcess).HasColumnName("sim_hide_excess");

                entity.Property(e => e.SimInsCoId).HasColumnName("sim_ins_co_id");

                entity.Property(e => e.SimInvType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("sim_inv_type")
                    .IsFixedLength();

                entity.Property(e => e.SimInvoiceNo)
                    .HasMaxLength(50)
                    .HasColumnName("sim_invoice_no");

                entity.Property(e => e.SimLareference)
                    .HasMaxLength(50)
                    .HasColumnName("sim_LAReference");

                entity.Property(e => e.SimLvBType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("sim_LV_b_type")
                    .IsFixedLength();

                entity.Property(e => e.SimPolicyNumber)
                    .HasMaxLength(50)
                    .HasColumnName("sim_policy_number");

                entity.Property(e => e.SimPosted).HasColumnName("sim_posted");

                entity.Property(e => e.SimVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sim_VAT");

                entity.Property(e => e.SimWarning)
                    .HasMaxLength(2000)
                    .HasColumnName("sim_warning");
            });

            modelBuilder.Entity<SalesInvoicesPending>(entity =>
            {
                entity.HasKey(e => e.SipId);

                entity.ToTable("Sales_Invoices_Pending", "Accounts");

                entity.Property(e => e.SipId).HasColumnName("sip_id");

                entity.Property(e => e.SipClaimDetail)
                    .HasColumnName("sip_Claim_Detail")
                    .HasComment("Ready to invoice detail items");

                entity.Property(e => e.SipClaimId).HasColumnName("sip_Claim_ID");

                entity.Property(e => e.SipClaimMaster)
                    .HasColumnName("sip_Claim_Master")
                    .HasComment("Ready to invoice master file items");
            });

            modelBuilder.Entity<Sbebdx>(entity =>
            {
                entity.HasKey(e => e.BdxId);

                entity.ToTable("SBEBDX", "Claim");

                entity.Property(e => e.BdxId).HasColumnName("BDX_ID");

                entity.Property(e => e.ClaimId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Claim_ID");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Imeiout)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("IMEIOut");

                entity.Property(e => e.NetTotal).HasColumnName("Net_Total");

                entity.Property(e => e.RepairStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Repair_Status");

                entity.Property(e => e.RepairType)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Repair_Type");

                entity.Property(e => e.Vat).HasColumnName("VAT");
            });

            modelBuilder.Entity<Sbsftp2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SBSFTP_2020", "nCompass");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EAN");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mpncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MPNCode");

                entity.Property(e => e.Price)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Stock)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Scenario>(entity =>
            {
                entity.ToTable("Scenario", "BI");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommodityId).HasColumnName("CommodityID");

                entity.Property(e => e.PerilId).HasColumnName("PerilID");

                entity.Property(e => e.RedScore).HasDefaultValueSql("((100))");

                entity.Property(e => e.YellowScore).HasDefaultValueSql("((50))");
            });

            modelBuilder.Entity<Sector>(entity =>
            {
                entity.ToTable("Sector", "Product");

                entity.Property(e => e.SectorId).HasColumnName("SectorID");

                entity.Property(e => e.GfksectorId).HasColumnName("GFKSectorID");

                entity.Property(e => e.OldCategoryName).HasMaxLength(200);

                entity.Property(e => e.SectorName).HasMaxLength(200);
            });

            modelBuilder.Entity<SelectedInstruction>(entity =>
            {
                entity.ToTable("SelectedInstruction", "Site");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EmailId).HasColumnName("EmailID");

                entity.Property(e => e.SelectionDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.ToTable("Service", "Supplier");

                entity.Property(e => e.AddDpd).HasColumnName("AddDPD");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.OldProductId).HasColumnName("OldProductID");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.HasOne(d => d.OldProduct)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.OldProductId)
                    .HasConstraintName("FK_Service_Product");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Service_Type");
            });

            modelBuilder.Entity<ServiceAttributeValue>(entity =>
            {
                entity.ToTable("Service_AttributeValue", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OperationId).HasColumnName("OperationID");

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.Value).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceAttributeValues)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_AttributeValue_Service");
            });

            modelBuilder.Entity<ServiceDay>(entity =>
            {
                entity.ToTable("Service_Days", "Supplier");

                entity.HasIndex(e => new { e.ServiceId, e.SupplierId, e.PostCode }, "IXNC_Service_Days_ServiceID_SupplierID_PostCode_DB561");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DayOfWeek).HasComment("0 is Sunday.");

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceDays)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Days_Service");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.ServiceDays)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Days_Supplier");
            });

            modelBuilder.Entity<ServiceFnolvalue>(entity =>
            {
                entity.ToTable("Service_FNOLValue", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<ServiceInsuranceCompany>(entity =>
            {
                entity.ToTable("Service_InsuranceCompany", "Supplier");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            });

            modelBuilder.Entity<ServiceProductType>(entity =>
            {
                entity.ToTable("Service_ProductType", "Supplier");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.ServiceProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_ProductType_Value");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceProductTypes)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_ProductType_Service");
            });

            modelBuilder.Entity<ServiceType>(entity =>
            {
                entity.ToTable("Service_Type", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Settings", "nCompass");

                entity.Property(e => e.AssignmentBusyCoeff).HasDefaultValueSql("((1))");

                entity.Property(e => e.AssignmentCommodityCoeff).HasDefaultValueSql("((1))");

                entity.Property(e => e.BrandWeighting).HasDefaultValueSql("((100))");
            });

            modelBuilder.Entity<Setting1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Settings", "Validation");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.ClaimIdformat)
                    .HasMaxLength(200)
                    .HasColumnName("ClaimIDFormat");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
            });

            modelBuilder.Entity<SimpleBrand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SimpleBrand", "Product");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.BrandName).HasMaxLength(200);

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            });

            modelBuilder.Entity<SlDebtor>(entity =>
            {
                entity.HasKey(e => e.SldId);

                entity.ToTable("SL_Debtors", "Accounts");

                entity.HasIndex(e => new { e.SldCustomerId, e.SldTransPeriod, e.SldPostingType }, "IXNC_SL_Debtors_sld_customer_id_sld_trans_period_sld_posting_type_CCA5D");

                entity.Property(e => e.SldId).HasColumnName("sld_id");

                entity.Property(e => e.SldAccountingPeriod).HasColumnName("sld_accounting_period");

                entity.Property(e => e.SldAllocRef).HasColumnName("sld_alloc_ref");

                entity.Property(e => e.SldBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sld_balance");

                entity.Property(e => e.SldCustomerId).HasColumnName("sld_customer_id");

                entity.Property(e => e.SldDate)
                    .HasColumnType("datetime")
                    .HasColumnName("sld_date");

                entity.Property(e => e.SldGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sld_gross");

                entity.Property(e => e.SldInsCoId).HasColumnName("sld_ins_co_id");

                entity.Property(e => e.SldNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("sld_notes");

                entity.Property(e => e.SldPemId).HasColumnName("sld_pem_id");

                entity.Property(e => e.SldPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("sld_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.SldTransPeriod).HasColumnName("sld_trans_period");

                entity.Property(e => e.SldTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("sld_trans_ref");
            });

            modelBuilder.Entity<SlPaid>(entity =>
            {
                entity.HasKey(e => e.SlpId);

                entity.ToTable("SL_Paids", "Accounts");

                entity.HasIndex(e => e.SlpAllocRef, "IXNC_SL_Paids_slp_alloc_ref_811E8");

                entity.HasIndex(e => new { e.SlpCustomerId, e.SlpPostingType }, "IXNC_SL_Paids_slp_customer_id_slp_posting_type_1E484");

                entity.HasIndex(e => e.SlpPemId, "IXNC_SL_Paids_slp_pem_id_1CD1D");

                entity.HasIndex(e => new { e.SlpAllocRef, e.SlpPostingType, e.SlpInsCoId, e.SlpPemId }, "_dta_index_SL_Paids_9_1851153640__K11_K9_K5_K3_2");

                entity.HasIndex(e => new { e.SlpPemId, e.SlpAllocRef, e.SlpInsCoId, e.SlpPostingType }, "_dta_index_SL_Paids_9_1851153640__K3_K11_K5_K9_2");

                entity.HasIndex(e => new { e.SlpInsCoId, e.SlpAllocRef, e.SlpPemId }, "_dta_index_SL_Paids_9_1851153640__K5_K11_K3_2");

                entity.HasIndex(e => e.SlpPostingType, "_dta_index_SL_Paids_9_1851153640__K9_11");

                entity.Property(e => e.SlpId).HasColumnName("slp_id");

                entity.Property(e => e.SlpAccountingPeriod).HasColumnName("slp_accounting_period");

                entity.Property(e => e.SlpAllocRef).HasColumnName("slp_alloc_ref");

                entity.Property(e => e.SlpAllocated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slp_allocated");

                entity.Property(e => e.SlpCustomerId).HasColumnName("slp_customer_id");

                entity.Property(e => e.SlpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("slp_date");

                entity.Property(e => e.SlpDisputed).HasColumnName("slp_disputed");

                entity.Property(e => e.SlpGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slp_gross");

                entity.Property(e => e.SlpInsCoId).HasColumnName("slp_ins_co_id");

                entity.Property(e => e.SlpNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("slp_notes");

                entity.Property(e => e.SlpPemId).HasColumnName("slp_pem_id");

                entity.Property(e => e.SlpPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("slp_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.SlpSimId).HasColumnName("slp_sim_id");

                entity.Property(e => e.SlpTransPeriod).HasColumnName("slp_trans_period");

                entity.Property(e => e.SlpTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("slp_trans_ref");
            });

            modelBuilder.Entity<SlPaidsBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SL_Paids_backup", "Accounts");

                entity.Property(e => e.SlpAccountingPeriod).HasColumnName("slp_accounting_period");

                entity.Property(e => e.SlpAllocRef).HasColumnName("slp_alloc_ref");

                entity.Property(e => e.SlpAllocated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slp_allocated");

                entity.Property(e => e.SlpCustomerId).HasColumnName("slp_customer_id");

                entity.Property(e => e.SlpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("slp_date");

                entity.Property(e => e.SlpDisputed).HasColumnName("slp_disputed");

                entity.Property(e => e.SlpGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slp_gross");

                entity.Property(e => e.SlpId).HasColumnName("slp_id");

                entity.Property(e => e.SlpInsCoId).HasColumnName("slp_ins_co_id");

                entity.Property(e => e.SlpNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("slp_notes");

                entity.Property(e => e.SlpPemId).HasColumnName("slp_pem_id");

                entity.Property(e => e.SlpPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("slp_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.SlpSimId).HasColumnName("slp_sim_id");

                entity.Property(e => e.SlpTransPeriod).HasColumnName("slp_trans_period");

                entity.Property(e => e.SlpTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("slp_trans_ref");
            });

            modelBuilder.Entity<SlUnpaid>(entity =>
            {
                entity.HasKey(e => e.SluId);

                entity.ToTable("SL_Unpaids", "Accounts");

                entity.HasIndex(e => new { e.SluAllocRef, e.SluBalance }, "IXNC_SL_Unpaids_slu_alloc_ref_slu_balance_084BA");

                entity.HasIndex(e => new { e.SluCustomerId, e.SluInsCoId, e.SluTransPeriod, e.SluPostingType }, "IXNC_SL_Unpaids_slu_customer_id_slu_ins_co_id_slu_trans_period_slu_posting_type_8E7CC");

                entity.HasIndex(e => new { e.SluCustomerId, e.SluPostingType }, "IXNC_SL_Unpaids_slu_customer_id_slu_posting_type_EB81E");

                entity.HasIndex(e => new { e.SluCustomerId, e.SluTransPeriod, e.SluPostingType }, "IXNC_SL_Unpaids_slu_customer_id_slu_trans_period_slu_posting_type_08D4F");

                entity.HasIndex(e => new { e.SluInsCoId, e.SluCustomerId, e.SluTransPeriod, e.SluPostingType }, "IXNC_SL_Unpaids_slu_ins_co_id_slu_customer_id_slu_trans_period_slu_posting_type_D4B17");

                entity.HasIndex(e => new { e.SluInsCoId, e.SluPostingType, e.SluCustomerId }, "IXNC_SL_Unpaids_slu_ins_co_id_slu_posting_type_slu_customer_id_236C0");

                entity.HasIndex(e => new { e.SluInsCoId, e.SluPostingType, e.SluCustomerId }, "IXNC_SL_Unpaids_slu_ins_co_id_slu_posting_type_slu_customer_id_68C72");

                entity.HasIndex(e => e.SluPemId, "IXNC_SL_Unpaids_slu_pem_id_29A33");

                entity.HasIndex(e => e.SluSimId, "IXNC_SL_Unpaids_slu_sim_id_99FCC");

                entity.HasIndex(e => new { e.SluTransRef, e.SluBalance }, "IXNC_SL_Unpaids_slu_trans_ref_slu_balance_3663F");

                entity.Property(e => e.SluId).HasColumnName("slu_id");

                entity.Property(e => e.SluAccountingPeriod).HasColumnName("slu_accounting_period");

                entity.Property(e => e.SluAllocRef).HasColumnName("slu_alloc_ref");

                entity.Property(e => e.SluAllocated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_allocated");

                entity.Property(e => e.SluBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_balance");

                entity.Property(e => e.SluCustomerId).HasColumnName("slu_customer_id");

                entity.Property(e => e.SluDate)
                    .HasColumnType("datetime")
                    .HasColumnName("slu_date");

                entity.Property(e => e.SluDisputed).HasColumnName("slu_disputed");

                entity.Property(e => e.SluGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_gross");

                entity.Property(e => e.SluInsCoId).HasColumnName("slu_ins_co_id");

                entity.Property(e => e.SluNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("slu_notes");

                entity.Property(e => e.SluPemId).HasColumnName("slu_pem_id");

                entity.Property(e => e.SluPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("slu_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.SluSimId).HasColumnName("slu_sim_id");

                entity.Property(e => e.SluTransPeriod).HasColumnName("slu_trans_period");

                entity.Property(e => e.SluTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("slu_trans_ref");
            });

            modelBuilder.Entity<SlUnpaids20170627>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SL_Unpaids_2017-06-27", "Accounts");

                entity.Property(e => e.SluAccountingPeriod).HasColumnName("slu_accounting_period");

                entity.Property(e => e.SluAllocRef).HasColumnName("slu_alloc_ref");

                entity.Property(e => e.SluAllocated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_allocated");

                entity.Property(e => e.SluBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_balance");

                entity.Property(e => e.SluCustomerId).HasColumnName("slu_customer_id");

                entity.Property(e => e.SluDate)
                    .HasColumnType("datetime")
                    .HasColumnName("slu_date");

                entity.Property(e => e.SluDisputed).HasColumnName("slu_disputed");

                entity.Property(e => e.SluGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_gross");

                entity.Property(e => e.SluId).HasColumnName("slu_id");

                entity.Property(e => e.SluInsCoId).HasColumnName("slu_ins_co_id");

                entity.Property(e => e.SluNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("slu_notes");

                entity.Property(e => e.SluPemId).HasColumnName("slu_pem_id");

                entity.Property(e => e.SluPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("slu_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.SluSimId).HasColumnName("slu_sim_id");

                entity.Property(e => e.SluTransPeriod).HasColumnName("slu_trans_period");

                entity.Property(e => e.SluTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("slu_trans_ref");
            });

            modelBuilder.Entity<SlUnpaidsBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SL_Unpaids_backup", "Accounts");

                entity.Property(e => e.SluAccountingPeriod).HasColumnName("slu_accounting_period");

                entity.Property(e => e.SluAllocRef).HasColumnName("slu_alloc_ref");

                entity.Property(e => e.SluAllocated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_allocated");

                entity.Property(e => e.SluBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_balance");

                entity.Property(e => e.SluCustomerId).HasColumnName("slu_customer_id");

                entity.Property(e => e.SluDate)
                    .HasColumnType("datetime")
                    .HasColumnName("slu_date");

                entity.Property(e => e.SluDisputed).HasColumnName("slu_disputed");

                entity.Property(e => e.SluGross)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("slu_gross");

                entity.Property(e => e.SluId).HasColumnName("slu_id");

                entity.Property(e => e.SluInsCoId).HasColumnName("slu_ins_co_id");

                entity.Property(e => e.SluNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("slu_notes");

                entity.Property(e => e.SluPemId).HasColumnName("slu_pem_id");

                entity.Property(e => e.SluPostingType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("slu_posting_type")
                    .IsFixedLength();

                entity.Property(e => e.SluSimId).HasColumnName("slu_sim_id");

                entity.Property(e => e.SluTransPeriod).HasColumnName("slu_trans_period");

                entity.Property(e => e.SluTransRef)
                    .HasMaxLength(50)
                    .HasColumnName("slu_trans_ref");
            });

            modelBuilder.Entity<StAttribVal>(entity =>
            {
                entity.HasKey(e => e.StAvId)
                    .HasName("PK_st_atrib_val");

                entity.ToTable("st_attrib_val", "Site");

                entity.Property(e => e.StAvId).HasColumnName("st_av_id");

                entity.Property(e => e.StAvAttribId).HasColumnName("st_av_attrib_id");

                entity.Property(e => e.StAvAttribVal)
                    .HasMaxLength(50)
                    .HasColumnName("st_av_attrib_val");

                entity.Property(e => e.StAvSiId).HasColumnName("st_av_si_id");

                entity.HasOne(d => d.StAvSi)
                    .WithMany(p => p.StAttribVals)
                    .HasForeignKey(d => d.StAvSiId)
                    .HasConstraintName("FK_st_attrib_val_st_stock_items");
            });

            modelBuilder.Entity<StItemSpecification>(entity =>
            {
                entity.HasKey(e => e.StIsId);

                entity.ToTable("st_item_specification", "Site");

                entity.Property(e => e.StIsId).HasColumnName("st_is_id");

                entity.Property(e => e.StIsSpec)
                    .HasMaxLength(50)
                    .HasColumnName("st_is_spec");
            });

            modelBuilder.Entity<StLinkSuppMan>(entity =>
            {
                entity.HasKey(e => e.StLinkId);

                entity.ToTable("st_link_supp_man", "Site");

                entity.Property(e => e.StLinkId).HasColumnName("st_link_id");

                entity.Property(e => e.StLinkManId).HasColumnName("st_link_man_id");

                entity.Property(e => e.StLinkSuppId).HasColumnName("st_link_supp_id");

                entity.HasOne(d => d.StLinkMan)
                    .WithMany(p => p.StLinkSuppMen)
                    .HasForeignKey(d => d.StLinkManId)
                    .HasConstraintName("FK_st_link_supp_man_st_manufacturers");

                entity.HasOne(d => d.StLinkSupp)
                    .WithMany(p => p.StLinkSuppMen)
                    .HasForeignKey(d => d.StLinkSuppId)
                    .HasConstraintName("FK_st_link_supp_man_st_suppliers");
            });

            modelBuilder.Entity<StManufacturer>(entity =>
            {
                entity.HasKey(e => e.StManId)
                    .HasName("PK_st_manufacturer");

                entity.ToTable("st_manufacturers", "Site");

                entity.Property(e => e.StManId).HasColumnName("st_man_id");

                entity.Property(e => e.StManAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_address1");

                entity.Property(e => e.StManAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_address2");

                entity.Property(e => e.StManContactName)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_contactName");

                entity.Property(e => e.StManContactName2)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_contactName2");

                entity.Property(e => e.StManContactName3)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_contactName3");

                entity.Property(e => e.StManEmail)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_email");

                entity.Property(e => e.StManEmail2)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_email2");

                entity.Property(e => e.StManEmail3)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_email3");

                entity.Property(e => e.StManFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_faxNumber");

                entity.Property(e => e.StManName)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_name");

                entity.Property(e => e.StManPhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_phoneNumber");

                entity.Property(e => e.StManPhoneNumber2)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_phoneNumber2");

                entity.Property(e => e.StManPhoneNumber3)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_phoneNumber3");

                entity.Property(e => e.StManPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("st_man_postCode");

                entity.Property(e => e.StManProductTypeId)
                    .HasColumnName("st_man_productTypeID")
                    .HasDefaultValueSql("((12))");

                entity.HasOne(d => d.StManProductType)
                    .WithMany(p => p.StManufacturers)
                    .HasForeignKey(d => d.StManProductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_manufacturers_s_l_tl");
            });

            modelBuilder.Entity<StMeetingsMan>(entity =>
            {
                entity.ToTable("st_meetings_man", "Site");

                entity.Property(e => e.StMeetingsManId).HasColumnName("st_meetings_man_id");

                entity.Property(e => e.StMeetingsManArchived).HasColumnName("st_meetings_man_archived");

                entity.Property(e => e.StMeetingsManDate)
                    .HasColumnType("datetime")
                    .HasColumnName("st_meetings_man_date");

                entity.Property(e => e.StMeetingsManManId).HasColumnName("st_meetings_man_man_id");

                entity.Property(e => e.StMeetingsManText)
                    .HasColumnType("ntext")
                    .HasColumnName("st_meetings_man_text");

                entity.HasOne(d => d.StMeetingsManMan)
                    .WithMany(p => p.StMeetingsMen)
                    .HasForeignKey(d => d.StMeetingsManManId)
                    .HasConstraintName("FK_st_meetings_man_st_manufacturers");
            });

            modelBuilder.Entity<StMeetingsSupp>(entity =>
            {
                entity.ToTable("st_meetings_supp", "Site");

                entity.Property(e => e.StMeetingsSuppId).HasColumnName("st_meetings_supp_id");

                entity.Property(e => e.StMeetingsSuppArchived).HasColumnName("st_meetings_supp_archived");

                entity.Property(e => e.StMeetingsSuppDate)
                    .HasColumnType("datetime")
                    .HasColumnName("st_meetings_supp_date");

                entity.Property(e => e.StMeetingsSuppSuppId).HasColumnName("st_meetings_supp_supp_id");

                entity.Property(e => e.StMeetingsSuppText)
                    .HasColumnType("ntext")
                    .HasColumnName("st_meetings_supp_text");
            });

            modelBuilder.Entity<StSrQuantity>(entity =>
            {
                entity.HasKey(e => e.StSqId)
                    .HasName("PK_st_record_quantity");

                entity.ToTable("st_sr_quantities", "Site");

                entity.Property(e => e.StSqId).HasColumnName("st_sq_id");

                entity.Property(e => e.StSqAvailable).HasColumnName("st_sq_available");

                entity.Property(e => e.StSqReserved).HasColumnName("st_sq_reserved");

                entity.Property(e => e.StSqSold).HasColumnName("st_sq_sold");

                entity.Property(e => e.StSqSrId).HasColumnName("st_sq_sr_id");

                entity.HasOne(d => d.StSqSr)
                    .WithMany(p => p.StSrQuantities)
                    .HasForeignKey(d => d.StSqSrId)
                    .HasConstraintName("FK_st_sr_quantities_st_stock_records");
            });

            modelBuilder.Entity<StStockItem>(entity =>
            {
                entity.HasKey(e => e.StSiId);

                entity.ToTable("st_stock_items", "Site");

                entity.Property(e => e.StSiId).HasColumnName("st_si_id");

                entity.Property(e => e.StSiExtraInfo)
                    .HasColumnType("ntext")
                    .HasColumnName("st_si_extra_info");

                entity.Property(e => e.StSiImage)
                    .HasMaxLength(50)
                    .HasColumnName("st_si_image");

                entity.Property(e => e.StSiManId).HasColumnName("st_si_man_id");

                entity.Property(e => e.StSiModelNo)
                    .HasMaxLength(50)
                    .HasColumnName("st_si_model_no");

                entity.Property(e => e.StSiSageCode).HasColumnName("st_si_sage_code");

                entity.Property(e => e.StSiSkuNo)
                    .HasMaxLength(50)
                    .HasColumnName("st_si_sku_no");

                entity.Property(e => e.StSiSlId).HasColumnName("st_si_sl_id");

                entity.Property(e => e.StSiSpecId)
                    .HasColumnName("st_si_spec_id")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.StSiMan)
                    .WithMany(p => p.StStockItems)
                    .HasForeignKey(d => d.StSiManId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_stock_items_st_manufacturers");

                entity.HasOne(d => d.StSiSpec)
                    .WithMany(p => p.StStockItems)
                    .HasForeignKey(d => d.StSiSpecId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_st_stock_items_st_item_specification");
            });

            modelBuilder.Entity<StStockRecord>(entity =>
            {
                entity.HasKey(e => e.StSrId);

                entity.ToTable("st_stock_records", "Site");

                entity.Property(e => e.StSrId).HasColumnName("st_sr_id");

                entity.Property(e => e.StSrAdditionalDiscount)
                    .HasColumnType("money")
                    .HasColumnName("st_sr_additional_discount");

                entity.Property(e => e.StSrClosed).HasColumnName("st_sr_closed");

                entity.Property(e => e.StSrDate)
                    .HasColumnType("datetime")
                    .HasColumnName("st_sr_date");

                entity.Property(e => e.StSrDiscountedPrice)
                    .HasColumnType("money")
                    .HasColumnName("st_sr_discounted_price");

                entity.Property(e => e.StSrQuantity).HasColumnName("st_sr_quantity");

                entity.Property(e => e.StSrStockItemId).HasColumnName("st_sr_stock_item_id");

                entity.Property(e => e.StSrSupplierId).HasColumnName("st_sr_supplier_id");

                entity.Property(e => e.StSrUnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("st_sr_unit_price");

                entity.Property(e => e.StSrValidPrice)
                    .HasColumnType("money")
                    .HasColumnName("st_sr_valid_price");

                entity.HasOne(d => d.StSrStockItem)
                    .WithMany(p => p.StStockRecords)
                    .HasForeignKey(d => d.StSrStockItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_stock_records_st_stock_items");

                entity.HasOne(d => d.StSrSupplier)
                    .WithMany(p => p.StStockRecords)
                    .HasForeignKey(d => d.StSrSupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_stock_records_st_suppliers");
            });

            modelBuilder.Entity<StStockTransaction>(entity =>
            {
                entity.HasKey(e => e.StStId)
                    .HasName("PK_st_stock_transaction");

                entity.ToTable("st_stock_transactions", "Site");

                entity.Property(e => e.StStId).HasColumnName("st_st_id");

                entity.Property(e => e.StStAmount)
                    .HasColumnName("st_st_amount")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StStClaimId).HasColumnName("st_st_claim_id");

                entity.Property(e => e.StStDate)
                    .HasColumnType("datetime")
                    .HasColumnName("st_st_date");

                entity.Property(e => e.StStSrId).HasColumnName("st_st_sr_id");

                entity.Property(e => e.StStTypeId).HasColumnName("st_st_type_id");

                entity.Property(e => e.StStUsrId).HasColumnName("st_st_usr_id");

                entity.HasOne(d => d.StStSr)
                    .WithMany(p => p.StStockTransactions)
                    .HasForeignKey(d => d.StStSrId)
                    .HasConstraintName("FK_st_stock_transactions_st_stock_records");

                entity.HasOne(d => d.StStType)
                    .WithMany(p => p.StStockTransactions)
                    .HasForeignKey(d => d.StStTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_st_stock_transactions_st_transaction_types");
            });

            modelBuilder.Entity<StSupplier>(entity =>
            {
                entity.HasKey(e => e.StSuppId);

                entity.ToTable("st_suppliers", "Site");

                entity.Property(e => e.StSuppId).HasColumnName("st_supp_id");

                entity.Property(e => e.StSuppAddress1)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_address1");

                entity.Property(e => e.StSuppAddress2)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_address2");

                entity.Property(e => e.StSuppContactName)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_contactName");

                entity.Property(e => e.StSuppContactName2)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_contactName2");

                entity.Property(e => e.StSuppContactName3)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_contactName3");

                entity.Property(e => e.StSuppEmail)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_email");

                entity.Property(e => e.StSuppEmail2)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_email2");

                entity.Property(e => e.StSuppEmail3)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_email3");

                entity.Property(e => e.StSuppFaxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_faxNumber");

                entity.Property(e => e.StSuppName)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_name");

                entity.Property(e => e.StSuppPhoneNumber)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_phoneNumber");

                entity.Property(e => e.StSuppPhoneNumber2)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_phoneNumber2");

                entity.Property(e => e.StSuppPhoneNumber3)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_phoneNumber3");

                entity.Property(e => e.StSuppPostCode)
                    .HasMaxLength(50)
                    .HasColumnName("st_supp_postCode");

                entity.Property(e => e.StSuppProductTypeId).HasColumnName("st_supp_productTypeID");

                entity.Property(e => e.StSuppSageCode).HasColumnName("st_supp_sage_code");
            });

            modelBuilder.Entity<StTransactionType>(entity =>
            {
                entity.HasKey(e => e.StStTypeId);

                entity.ToTable("st_transaction_types", "Site");

                entity.Property(e => e.StStTypeId).HasColumnName("st_st_type_id");

                entity.Property(e => e.StStTypeText)
                    .HasMaxLength(50)
                    .HasColumnName("st_st_type_text");
            });

            modelBuilder.Entity<StatusHistory>(entity =>
            {
                entity.ToTable("StatusHistory", "Inspection");

                entity.HasIndex(e => e.InspectionId, "IXNC_StatusHistory_InspectionID_8D65E");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.InspectionId).HasColumnName("InspectionID");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");
            });

            modelBuilder.Entity<SteveRvalidationView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SteveRValidationView", "Validation");

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.ChosenOutcomeName).HasMaxLength(100);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.DateSubmittedToSbs)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Submitted to SBS");

                entity.Property(e => e.Expr1).HasColumnType("money");

                entity.Property(e => e.IncidentDate).HasColumnType("datetime");

                entity.Property(e => e.InstructingOffice)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemType).HasMaxLength(4000);

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.Make)
                    .HasMaxLength(4000)
                    .HasColumnName("make");

                entity.Property(e => e.Model)
                    .HasMaxLength(4000)
                    .HasColumnName("model");

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.PolicyNumber).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.PurchasePrice).HasColumnName("Purchase Price");

                entity.Property(e => e.ReplacementCost).HasColumnType("money");

                entity.Property(e => e.ReplacementSell).HasColumnType("money");

                entity.Property(e => e.SbsclaimId).HasColumnName("SBSClaimID");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.SingleArticleLimit).HasColumnType("money");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Username).HasMaxLength(100);

                entity.Property(e => e.ValidationClaimCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("Validation Claim Created");
            });

            modelBuilder.Entity<StockCodeException>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StockCodeExceptions", "MI");

                entity.Property(e => e.FinanceTypeId).HasColumnName("FinanceTypeID");

                entity.Property(e => e.OldMidesc)
                    .HasMaxLength(50)
                    .HasColumnName("OldMIDesc");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(50)
                    .HasColumnName("STOCK_CODE");
            });

            modelBuilder.Entity<StockCondition>(entity =>
            {
                entity.ToTable("StockCondition", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SubCauseType>(entity =>
            {
                entity.ToTable("SubCauseType", "Site");

                entity.HasIndex(e => e.Description, "IX_SubCauseType")
                    .IsUnique();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");
            });

            modelBuilder.Entity<Summit2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("summit2", "MI");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.AccountRef1)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("AccountRef");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Consn)
                    .HasMaxLength(10)
                    .HasColumnName("consn");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.InvoiceType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_TYPE");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");
            });

            modelBuilder.Entity<SummitRepair>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Summit_repair", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCatDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cat_Desc");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SummitReplace>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Summit_replace", "MI");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.MiCat).HasColumnName("MI_Cat");

                entity.Property(e => e.MiCatDesc)
                    .HasMaxLength(50)
                    .HasColumnName("MI_Cat_Desc");

                entity.Property(e => e.MiId).HasColumnName("MI_Id");

                entity.Property(e => e.Openx)
                    .HasMaxLength(50)
                    .HasColumnName("openx");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Summitclaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("summitclaims", "MI");

                entity.Property(e => e.Consn)
                    .HasMaxLength(10)
                    .HasColumnName("consn");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.ToTable("Supplier", "nCompass");

                entity.Property(e => e.Agrade).HasColumnName("AGrade");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.OldSupplierId).HasColumnName("Old_Supplier_ID");

                entity.Property(e => e.ReplacementCapable)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Supplier1>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("Supplier", "Site");

                entity.HasIndex(e => new { e.DisplayOnWeb, e.Deleted }, "IXNC_Supplier_DisplayOnWeb_Deleted_6148B");

                entity.HasIndex(e => new { e.DisplayOnWeb, e.Deleted }, "IXNC_Supplier_DisplayOnWeb_Deleted_8F9CC");

                entity.HasIndex(e => e.SupplierId, "_dta_index_Supplier_9_777769828__K1_4");

                entity.Property(e => e.AccountHandler).HasDefaultValueSql("((9))");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.AccountsNotes).HasMaxLength(4000);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Agrade).HasColumnName("AGrade");

                entity.Property(e => e.AllowSms)
                    .IsRequired()
                    .HasColumnName("AllowSMS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoConfirmPo).HasColumnName("AutoConfirmPO");

                entity.Property(e => e.Carriage).HasColumnType("money");

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailCc)
                    .HasMaxLength(50)
                    .HasColumnName("Email_CC");

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NoPorequired).HasColumnName("NoPORequired");

                entity.Property(e => e.PostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VatregistrationNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VATRegistrationNo");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AAA')");

                entity.Property(e => e.VoucherDiscount).HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SupplierEmail>(entity =>
            {
                entity.HasKey(e => e.SeId);

                entity.ToTable("Supplier_Emails", "Accounts");

                entity.Property(e => e.SeId).HasColumnName("SE_ID");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<SupplierFamilyDetail>(entity =>
            {
                entity.ToTable("SupplierFamilyDetails", "nCompass");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            });

            modelBuilder.Entity<SupplierFee>(entity =>
            {
                entity.ToTable("Supplier_Fee", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Rrp)
                    .HasColumnType("money")
                    .HasColumnName("RRP");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.SupplierFees)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier_Fee_Fee");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierFees)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier_Fee_Supplier");
            });

            modelBuilder.Entity<SupplierProduct>(entity =>
            {
                entity.ToTable("SupplierProduct", "nCompass");

                entity.HasIndex(e => new { e.BrandId, e.Brand }, "IXNC_SupplierProduct_BrandID_Brand_95EBE");

                entity.HasIndex(e => e.SupplierProductCode, "IXNC_SupplierProduct_SupplierProductCode_3E68B");

                entity.HasIndex(e => e.Supplier, "IXNC_SupplierProduct_Supplier_F13A3");

                entity.HasIndex(e => e.Updating, "IXNC_SupplierProduct_Updating_0EE0F");

                entity.HasIndex(e => e.Updating, "IXNC_SupplierProduct_Updating_8E7C8");

                entity.HasIndex(e => e.Updating, "IXNC_SupplierProduct_Updating_B03F0");

                entity.HasIndex(e => new { e.Updating, e.Quantity, e.Price }, "IXNC_SupplierProduct_Updating_Quantity_Price_63330");

                entity.HasIndex(e => new { e.SupplierProductId, e.SupplierId }, "_dta_index_SupplierProduct_16_560721050__K1_K12_6");

                entity.HasIndex(e => new { e.SupplierProductId, e.DateCreated, e.SupplierId }, "_dta_index_SupplierProduct_16_560721050__K1_K16_K12_15");

                entity.HasIndex(e => new { e.SupplierProductId, e.Quantity, e.SupplierId }, "_dta_index_SupplierProduct_16_560721050__K1_K5_K12_3_6_8_9_10_14");

                entity.HasIndex(e => new { e.Quantity, e.SupplierId }, "_dta_index_SupplierProduct_16_560721050__K5_K12_1_3_6_8_9_10_14");

                entity.HasIndex(e => new { e.Quantity, e.SupplierProductId, e.SupplierId, e.SupplierProductCodeAlt, e.BrandId }, "_dta_index_SupplierProduct_16_560721050__K5_K1_K12_K3_K9_6_8_10_14");

                entity.HasIndex(e => e.SupplierProductId, "_dta_index_SupplierProduct_9_560721050__K1_2_4_10");

                entity.HasIndex(e => new { e.SupplierProductId, e.SupplierId, e.DateCreated }, "_dta_index_SupplierProduct_9_560721050__K1_K12_K16_15");

                entity.HasIndex(e => new { e.SupplierProductId, e.Rrp }, "_dta_index_SupplierProduct_9_560721050__K1_K14");

                entity.Property(e => e.SupplierProductId).HasColumnName("SupplierProductID");

                entity.Property(e => e.Brand).HasMaxLength(50);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.Rrp)
                    .HasColumnType("money")
                    .HasColumnName("RRP");

                entity.Property(e => e.Supplier).HasMaxLength(50);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SupplierProductCode).HasMaxLength(255);

                entity.Property(e => e.SupplierProductCodeAlt).HasMaxLength(255);

                entity.Property(e => e.SupplierReference).HasMaxLength(500);

                entity.Property(e => e.Updating).HasComment("A flag for new partial updates, a product in this state is not yet linked.");

                entity.Property(e => e.Url).HasMaxLength(255);
            });

            modelBuilder.Entity<SupplierProductAltBrandNaming>(entity =>
            {
                entity.HasKey(e => e.OldBrandName);

                entity.ToTable("SupplierProduct.AltBrandNaming", "nCompass");

                entity.Property(e => e.OldBrandName).HasMaxLength(50);

                entity.Property(e => e.CorrectBrandName).HasMaxLength(50);
            });

            modelBuilder.Entity<SupplierProductLinkOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SupplierProductLinkOperations", "nCompass");

                entity.HasIndex(e => e.LinkOperation, "IXNC_SupplierProductLinkOperations_LinkOperation_872F3");

                entity.HasIndex(e => new { e.ProductItemId, e.SupplierProductCode, e.LinkOperation }, "IXNC_SupplierProductLinkOperations_ProductItemID_SupplierProductCode_LinkOperation_13C1F");

                entity.HasIndex(e => new { e.SupplierProductCode, e.LinkOperation }, "IXNC_SupplierProductLinkOperations_SupplierProductCode_LinkOperation_E7029");

                entity.Property(e => e.LinkOperation).HasMaxLength(50);

                entity.Property(e => e.ProductItemId).HasColumnName("ProductItemID");

                entity.Property(e => e.SupplierProductCode).HasMaxLength(255);
            });

            modelBuilder.Entity<SupplierProductProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SupplierProduct_Product", "nCompass");

                entity.HasIndex(e => e.ProductId, "IXNC_SupplierProduct_Product_ProductID_80A95");

                entity.HasIndex(e => e.SupplierProductId, "IXNC_SupplierProduct_Product_SupplierProductID_1DD48");

                entity.HasIndex(e => new { e.ProductId, e.SupplierProductId }, "_dta_index_SupplierProduct_Product_16_624721278__K1_K2");

                entity.HasIndex(e => new { e.SupplierProductId, e.ProductId }, "_dta_index_SupplierProduct_Product_16_624721278__K2_K1");

                entity.HasIndex(e => new { e.SupplierProductId, e.ProductId }, "_dta_index_SupplierProduct_Product_c_16_624721278__K2_K1")
                    .IsClustered();

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.SupplierProductId).HasColumnName("SupplierProductID");
            });

            modelBuilder.Entity<SupplierProductTemp>(entity =>
            {
                entity.HasKey(e => e.SupplierProductId);

                entity.ToTable("SupplierProductTemp", "nCompass");

                entity.Property(e => e.SupplierProductId).HasColumnName("SupplierProductID");

                entity.Property(e => e.Brand).HasMaxLength(50);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.Supplier).HasMaxLength(255);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SupplierProductCode).HasMaxLength(255);

                entity.Property(e => e.SupplierProductCodeAlt).HasMaxLength(255);

                entity.Property(e => e.SupplierReference).HasMaxLength(500);

                entity.Property(e => e.Url).HasMaxLength(255);
            });

            modelBuilder.Entity<SupplierService>(entity =>
            {
                entity.ToTable("Supplier_Service", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Rrp)
                    .HasColumnType("money")
                    .HasColumnName("RRP");

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.SupplierServices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier_Service_Service");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SupplierServices)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier_Service_Supplier");
            });

            modelBuilder.Entity<Suppliercheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("suppliercheck", "Site");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.SupplierId).ValueGeneratedOnAdd();

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SurveyMessageSent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SurveyMessageSent", "Accounts");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<SurveyResult>(entity =>
            {
                entity.ToTable("SurveyResults", "Claim");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CommitmentAndProfessionalism).HasMaxLength(255);

                entity.Property(e => e.Complete)
                    .HasMaxLength(255)
                    .HasColumnName("complete");

                entity.Property(e => e.Consideration).HasMaxLength(255);

                entity.Property(e => e.Custom1)
                    .HasMaxLength(255)
                    .HasColumnName("custom1");

                entity.Property(e => e.Custom2)
                    .HasMaxLength(255)
                    .HasColumnName("custom2");

                entity.Property(e => e.Custom3)
                    .HasMaxLength(255)
                    .HasColumnName("custom3");

                entity.Property(e => e.Datetime)
                    .HasMaxLength(255)
                    .HasColumnName("datetime");

                entity.Property(e => e.Device)
                    .HasMaxLength(255)
                    .HasColumnName("device");

                entity.Property(e => e.Firstname)
                    .HasMaxLength(255)
                    .HasColumnName("firstname");

                entity.Property(e => e.Group)
                    .HasMaxLength(255)
                    .HasColumnName("group");

                entity.Property(e => e.Informed).HasMaxLength(255);

                entity.Property(e => e.Lastname)
                    .HasMaxLength(255)
                    .HasColumnName("lastname");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .HasColumnName("number");

                entity.Property(e => e.OverallExperience).HasMaxLength(255);

                entity.Property(e => e.PersonalInvolvement).HasMaxLength(255);

                entity.Property(e => e.Politeness).HasMaxLength(255);

                entity.Property(e => e.PostCode).HasMaxLength(255);

                entity.Property(e => e.Quality).HasMaxLength(255);

                entity.Property(e => e.Rating).HasMaxLength(255);

                entity.Property(e => e.SpeedOfResponse).HasMaxLength(255);
            });

            modelBuilder.Entity<SymbilityLog>(entity =>
            {
                entity.ToTable("SymbilityLog", "Supplier");

                entity.Property(e => e.SymbilityLogId).HasColumnName("SymbilityLogID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.MessageType).HasMaxLength(150);

                entity.Property(e => e.ReplyJson).HasColumnName("ReplyJSON");

                entity.Property(e => e.RequestJson).HasColumnName("RequestJSON");

                entity.Property(e => e.RequestSentOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Source).HasMaxLength(150);
            });

            modelBuilder.Entity<TaskAssignment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TaskAssignment", "Claim");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.TaskHistoryId).HasColumnName("TaskHistoryID");
            });

            modelBuilder.Entity<TaskHistory>(entity =>
            {
                entity.ToTable("TaskHistory", "Claim");

                entity.HasIndex(e => e.ActionId, "IXNC_TaskHistory_ActionID_572D5");

                entity.HasIndex(e => e.ActionId, "IXNC_TaskHistory_ActionID_C040E");

                entity.HasIndex(e => new { e.ActionId, e.Complete }, "IXNC_TaskHistory_ActionID_Complete_2547A");

                entity.HasIndex(e => new { e.ActionId, e.Complete, e.ItemTaskHistoryId }, "IXNC_TaskHistory_ActionID_Complete_ItemTaskHistoryID_CB021");

                entity.HasIndex(e => e.DateCreated, "IXNC_TaskHistory_DateCreated_CFAA2");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ActionId }, "IXNC_TaskHistory_InsuranceClaimID_ActionID_6F719");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ActionId, e.Complete }, "IXNC_TaskHistory_InsuranceClaimID_ActionID_Complete_C758C");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.Complete }, "IXNC_TaskHistory_InsuranceClaimID_Complete_4B0FB");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.Complete }, "IXNC_TaskHistory_InsuranceClaimID_Complete_4E909");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.Complete }, "IXNC_TaskHistory_InsuranceClaimID_Complete_9D7FD");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.Complete, e.ActionId, e.DateCompleted }, "IXNC_TaskHistory_InsuranceClaimID_Complete_ActionID_DateCompleted_7C7DF");

                entity.HasIndex(e => e.InsuranceClaimId, "IXNC_TaskHistory_InsuranceClaimID_DDF94");

                entity.HasIndex(e => new { e.Complete, e.DateCreated }, "TaskHistory_Action");

                entity.HasIndex(e => e.Id, "_dta_index_TaskHistory_12_711673583__K1_4_6_13");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ActionId, e.Id, e.User, e.UserId }, "_dta_index_TaskHistory_16_711673583__K2_K9_K1_K12_K17_6_11");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.UserId }, "_dta_index_TaskHistory_8_711673583__K2_K17");

                entity.HasIndex(e => new { e.Complete, e.InsuranceClaimId, e.Id, e.ActionId, e.DateCompleted }, "_dta_index_TaskHistory_9_711673583__K10_K2_K1_K9_K11_4_6_12_13");

                entity.HasIndex(e => new { e.Complete, e.InsuranceClaimId, e.Id, e.ActionId, e.ItemTaskHistoryId, e.DateCompleted }, "_dta_index_TaskHistory_9_711673583__K10_K2_K1_K9_K14_K11_12_18_19_20_21_22");

                entity.HasIndex(e => new { e.ItemTaskHistoryId, e.InsuranceClaimId }, "_dta_index_TaskHistory_9_711673583__K14_K2_1_3_4_5_6_7_8_9_10_11_12_13_15_16_17_18_19_20_21_22_23");

                entity.HasIndex(e => new { e.UserControlContextId, e.Id }, "_dta_index_TaskHistory_9_711673583__K16_K1_2_3_4_5_6_7_8_9_10_11_12_13_14_15_17_18_19_20_21_22_23");

                entity.HasIndex(e => new { e.Id, e.UserControlContextId }, "_dta_index_TaskHistory_9_711673583__K1_K16_4_6_13");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ActionId, e.Complete, e.Date, e.DateCreated }, "_dta_index_TaskHistory_9_711673583__K2_K9_K10_K4_K6");

                entity.HasIndex(e => new { e.ActionId, e.DateCompleted }, "_dta_index_TaskHistory_9_711673583__K9_K11_2_10_12");

                entity.HasIndex(e => new { e.ActionId, e.InsuranceClaimId, e.Id, e.Date, e.DateCreated, e.CreatedBy }, "_dta_index_TaskHistory_9_711673583__K9_K2_K1_K4_K6_K7_11");

                entity.HasIndex(e => new { e.ActionId, e.InsuranceClaimId, e.DateCreated, e.Id, e.Date }, "_dta_index_TaskHistory_9_711673583__K9_K2_K6_K1_K4_11");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionId)
                    .HasColumnName("ActionID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Allowedhours)
                    .HasColumnName("allowedhours")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AssignedTo).HasMaxLength(200);

                entity.Property(e => e.AssignedToId).HasColumnName("AssignedToID");

                entity.Property(e => e.AuthoriseRequestedBy).HasMaxLength(200);

                entity.Property(e => e.AuthoriseRequestedDate).HasColumnType("datetime");

                entity.Property(e => e.AuthorisedBy).HasMaxLength(200);

                entity.Property(e => e.AuthorisedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasComment("Due date - The date this task is due");

                entity.Property(e => e.DateCompleted).HasColumnType("datetime");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.ItemTaskHistoryId).HasColumnName("ItemTaskHistoryID");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.User).HasMaxLength(50);

                entity.Property(e => e.UserControlContextId)
                    .HasMaxLength(200)
                    .HasColumnName("UserControlContextID");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.TaskHistories)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskHistory_Action");

                entity.HasOne(d => d.InsuranceClaim)
                    .WithMany(p => p.TaskHistories)
                    .HasForeignKey(d => d.InsuranceClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskHistory_InsuranceClaim");

                entity.HasOne(d => d.ItemTaskHistory)
                    .WithMany(p => p.TaskHistories)
                    .HasForeignKey(d => d.ItemTaskHistoryId)
                    .HasConstraintName("FK_TaskHistory_ItemTaskHistory");

                entity.HasOne(d => d.OutcomeOptionsNavigation)
                    .WithMany(p => p.TaskHistories)
                    .HasForeignKey(d => d.OutcomeOptions)
                    .HasConstraintName("FK_TaskHistory_ClaimActionOutcomes");

                entity.HasOne(d => d.UserNavigation)
                    .WithMany(p => p.TaskHistories)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_TaskHistory_User");
            });

            modelBuilder.Entity<TblCauseType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TblCauseType", "MI");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblClaimOrder>(entity =>
            {
                entity.HasKey(e => e.ClaimOrderId);

                entity.ToTable("TblClaimOrder", "MI");

                entity.Property(e => e.ClaimOrderId).ValueGeneratedNever();

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.CarriageBuy).HasColumnType("money");

                entity.Property(e => e.CarriageSell).HasColumnType("money");

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CreditRaised).HasColumnName("Credit_Raised");

                entity.Property(e => e.CreditRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Raised_Date");

                entity.Property(e => e.CreditReq).HasColumnName("Credit_Req");

                entity.Property(e => e.CreditReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Req_Date");

                entity.Property(e => e.CreditSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Sage");

                entity.Property(e => e.CreditSync).HasColumnName("Credit_Sync");

                entity.Property(e => e.CreditSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Sync_Date");

                entity.Property(e => e.CreditVat).HasColumnName("Credit_VAT");

                entity.Property(e => e.DateCancelled).HasColumnType("datetime");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.InvRaised).HasColumnName("Inv_Raised");

                entity.Property(e => e.InvRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Raised_Date");

                entity.Property(e => e.InvReq).HasColumnName("Inv_Req");

                entity.Property(e => e.InvReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Req_Date");

                entity.Property(e => e.InvReqRaisedBy).HasColumnName("Inv_Req_RaisedBy");

                entity.Property(e => e.InvSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Sage");

                entity.Property(e => e.InvSync).HasColumnName("Inv_Sync");

                entity.Property(e => e.InvSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Sync_Date");

                entity.Property(e => e.InvVat).HasColumnName("Inv_VAT");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PoRaised).HasColumnName("PO_Raised");

                entity.Property(e => e.PoRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Raised_Date");

                entity.Property(e => e.PoReq).HasColumnName("PO_Req");

                entity.Property(e => e.PoReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Req_Date");

                entity.Property(e => e.PoReqRaisedBy).HasColumnName("PO_Req_RaisedBy");

                entity.Property(e => e.PoSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PO_Sage");

                entity.Property(e => e.PoSync).HasColumnName("PO_Sync");

                entity.Property(e => e.PoSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_Sync_Date");

                entity.Property(e => e.PoVat).HasColumnName("PO_VAT");

                entity.Property(e => e.SageInvoiceNumber)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SagePonumber)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SagePONumber");

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblClaimStat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblClaimStats", "Claim");

                entity.HasIndex(e => e.Phonecontactwithpolicyholder, "IXNC_tblClaimStats_phonecontactwithpolicyholder_473C5");

                entity.HasIndex(e => new { e.InsuranceClaimId, e.ClaimItemId }, "Missing_IXNC_tblClaimStats_InsuranceClaimID_ClaimItemID_634C6");

                entity.Property(e => e.Additionalgoodsordered)
                    .HasColumnType("datetime")
                    .HasColumnName("additionalgoodsordered");

                entity.Property(e => e.Assignoutcome)
                    .HasColumnType("datetime")
                    .HasColumnName("assignoutcome");

                entity.Property(e => e.Awaitingcarpetsample)
                    .HasColumnType("datetime")
                    .HasColumnName("awaitingcarpetsample");

                entity.Property(e => e.Awaitingfittingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("awaitingfittingdate");

                entity.Property(e => e.Awaitingproofofpurchase)
                    .HasColumnType("datetime")
                    .HasColumnName("awaitingproofofpurchase");

                entity.Property(e => e.Berack)
                    .HasColumnType("datetime")
                    .HasColumnName("berack");

                entity.Property(e => e.Bettermentagreed)
                    .HasColumnType("datetime")
                    .HasColumnName("bettermentagreed");

                entity.Property(e => e.Bitoolused)
                    .HasColumnType("datetime")
                    .HasColumnName("bitoolused");

                entity.Property(e => e.Cancelledduringtransit)
                    .HasColumnType("datetime")
                    .HasColumnName("cancelledduringtransit");

                entity.Property(e => e.Carpetdryingcompleted)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetdryingcompleted");

                entity.Property(e => e.Carpetdryingstarted)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetdryingstarted");

                entity.Property(e => e.Carpetfitted)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetfitted");

                entity.Property(e => e.Carpetsample)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetsample");

                entity.Property(e => e.Carpetvoucherissued)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetvoucherissued");

                entity.Property(e => e.Carpetvoucherredeemed)
                    .HasColumnType("datetime")
                    .HasColumnName("carpetvoucherredeemed");

                entity.Property(e => e.Cashsettledbyinsurancecompany)
                    .HasColumnType("datetime")
                    .HasColumnName("cashsettledbyinsurancecompany");

                entity.Property(e => e.Cashsettledbysbs)
                    .HasColumnType("datetime")
                    .HasColumnName("cashsettledbysbs");

                entity.Property(e => e.ClaimItemId).HasColumnName("ClaimItemID");

                entity.Property(e => e.Claimitemrepudiated)
                    .HasColumnType("datetime")
                    .HasColumnName("claimitemrepudiated");

                entity.Property(e => e.Claimitemwithdrawnbyic)
                    .HasColumnType("datetime")
                    .HasColumnName("claimitemwithdrawnbyic");

                entity.Property(e => e.Claimitemwithdrawnbyph)
                    .HasColumnType("datetime")
                    .HasColumnName("claimitemwithdrawnbyph");

                entity.Property(e => e.Cleaninprogress)
                    .HasColumnType("datetime")
                    .HasColumnName("cleaninprogress");

                entity.Property(e => e.Closeclaim)
                    .HasColumnType("datetime")
                    .HasColumnName("closeclaim");

                entity.Property(e => e.Closeitem)
                    .HasColumnType("datetime")
                    .HasColumnName("closeitem");

                entity.Property(e => e.Customerrejectedsettlement)
                    .HasColumnType("datetime")
                    .HasColumnName("customerrejectedsettlement");

                entity.Property(e => e.Dateinspectionacknowledged)
                    .HasColumnType("datetime")
                    .HasColumnName("dateinspectionacknowledged");

                entity.Property(e => e.Daterepairread)
                    .HasColumnType("datetime")
                    .HasColumnName("daterepairread");

                entity.Property(e => e.Deadonarrival)
                    .HasColumnType("datetime")
                    .HasColumnName("deadonarrival");

                entity.Property(e => e.Engineerbooked)
                    .HasColumnType("datetime")
                    .HasColumnName("engineerbooked");

                entity.Property(e => e.Excesscollected)
                    .HasColumnType("datetime")
                    .HasColumnName("excesscollected");

                entity.Property(e => e.Failedrepair)
                    .HasColumnType("datetime")
                    .HasColumnName("failedrepair");

                entity.Property(e => e.Firstcontactletter)
                    .HasColumnType("datetime")
                    .HasColumnName("firstcontactletter");

                entity.Property(e => e.Goodsrecivedcalloutbooked)
                    .HasColumnType("datetime")
                    .HasColumnName("goodsrecivedcalloutbooked");

                entity.Property(e => e.Handlerreadprintedreport)
                    .HasColumnType("datetime")
                    .HasColumnName("handlerreadprintedreport");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Incorrectitemsupplied)
                    .HasColumnType("datetime")
                    .HasColumnName("incorrectitemsupplied");

                entity.Property(e => e.Inspcancelled)
                    .HasColumnType("datetime")
                    .HasColumnName("inspcancelled");

                entity.Property(e => e.Inspectionarranged)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectionarranged");

                entity.Property(e => e.Inspectioncreated)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectioncreated");

                entity.Property(e => e.Inspectionreadbyengineer)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectionreadbyengineer");

                entity.Property(e => e.Inspectionreported)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectionreported");

                entity.Property(e => e.Inspectionreportto)
                    .HasColumnType("datetime")
                    .HasColumnName("inspectionreportto");

                entity.Property(e => e.Instructionbookedonfnol)
                    .HasColumnType("datetime")
                    .HasColumnName("instructionbookedonfnol");

                entity.Property(e => e.Instructionbookedonip)
                    .HasColumnType("datetime")
                    .HasColumnName("instructionbookedonip");

                entity.Property(e => e.Instructionbookedonipautomaticly)
                    .HasColumnType("datetime")
                    .HasColumnName("instructionbookedonipautomaticly");

                entity.Property(e => e.Instructionpickedup)
                    .HasColumnType("datetime")
                    .HasColumnName("instructionpickedup");

                entity.Property(e => e.Instructiontonotrepair)
                    .HasColumnType("datetime")
                    .HasColumnName("instructiontonotrepair");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.Invoicefinal)
                    .HasColumnType("datetime")
                    .HasColumnName("invoicefinal");

                entity.Property(e => e.Invoiceinterim)
                    .HasColumnType("datetime")
                    .HasColumnName("invoiceinterim");

                entity.Property(e => e.Itemreadytobeinvoiced)
                    .HasColumnType("datetime")
                    .HasColumnName("itemreadytobeinvoiced");

                entity.Property(e => e.Lastitemdeldate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastitemdeldate");

                entity.Property(e => e.Mandatesent)
                    .HasColumnType("datetime")
                    .HasColumnName("mandatesent");

                entity.Property(e => e.Nondelivery)
                    .HasColumnType("datetime")
                    .HasColumnName("nondelivery");

                entity.Property(e => e.Phonecontactwithpolicyholder)
                    .HasColumnType("datetime")
                    .HasColumnName("phonecontactwithpolicyholder");

                entity.Property(e => e.Purchaseorderraised)
                    .HasColumnType("datetime")
                    .HasColumnName("purchaseorderraised");

                entity.Property(e => e.Quotetoinsurance)
                    .HasColumnType("datetime")
                    .HasColumnName("quotetoinsurance");

                entity.Property(e => e.Recommendrepudiation)
                    .HasColumnType("datetime")
                    .HasColumnName("recommendrepudiation");

                entity.Property(e => e.Repairauth)
                    .HasColumnType("datetime")
                    .HasColumnName("repairauth");

                entity.Property(e => e.Repaircomplete)
                    .HasColumnType("datetime")
                    .HasColumnName("repaircomplete");

                entity.Property(e => e.Repaircompletedate)
                    .HasColumnType("datetime")
                    .HasColumnName("repaircompletedate");

                entity.Property(e => e.Repaireditemreturned)
                    .HasColumnType("datetime")
                    .HasColumnName("repaireditemreturned");

                entity.Property(e => e.Repairfailed)
                    .HasColumnType("datetime")
                    .HasColumnName("repairfailed");

                entity.Property(e => e.Repairoffered)
                    .HasColumnType("datetime")
                    .HasColumnName("repairoffered");

                entity.Property(e => e.Repairreqsent)
                    .HasColumnType("datetime")
                    .HasColumnName("repairreqsent");

                entity.Property(e => e.Repairtobecarriedout)
                    .HasColumnType("datetime")
                    .HasColumnName("repairtobecarriedout");

                entity.Property(e => e.Repairtobecarriedoutgiftware)
                    .HasColumnType("datetime")
                    .HasColumnName("repairtobecarriedoutgiftware");

                entity.Property(e => e.Repairtobecarriedoutjewellry)
                    .HasColumnType("datetime")
                    .HasColumnName("repairtobecarriedoutjewellry");

                entity.Property(e => e.Repairtobecarriedoutwatch)
                    .HasColumnType("datetime")
                    .HasColumnName("repairtobecarriedoutwatch");

                entity.Property(e => e.Replaceddate)
                    .HasColumnType("datetime")
                    .HasColumnName("replaceddate");

                entity.Property(e => e.Replacementflooroffered)
                    .HasColumnType("datetime")
                    .HasColumnName("replacementflooroffered");

                entity.Property(e => e.Replacementgoodsordered)
                    .HasColumnType("datetime")
                    .HasColumnName("replacementgoodsordered");

                entity.Property(e => e.Secondcontactletter)
                    .HasColumnType("datetime")
                    .HasColumnName("secondcontactletter");

                entity.Property(e => e.Secondphonecontactwithpolicyholder)
                    .HasColumnType("datetime")
                    .HasColumnName("secondphonecontactwithpolicyholder");

                entity.Property(e => e.Smsemailtoph)
                    .HasColumnType("datetime")
                    .HasColumnName("smsemailtoph");

                entity.Property(e => e.Sourcingpartsforrepair)
                    .HasColumnType("datetime")
                    .HasColumnName("sourcingpartsforrepair");

                entity.Property(e => e.Sourcingpartsforrepairjewellry)
                    .HasColumnType("datetime")
                    .HasColumnName("sourcingpartsforrepairjewellry");

                entity.Property(e => e.Sourcingpartsormaterialforrepair)
                    .HasColumnType("datetime")
                    .HasColumnName("sourcingpartsormaterialforrepair");

                entity.Property(e => e.Telesale)
                    .HasColumnType("datetime")
                    .HasColumnName("telesale");

                entity.Property(e => e.Thirdcontactletter)
                    .HasColumnType("datetime")
                    .HasColumnName("thirdcontactletter");

                entity.Property(e => e.Validationtool)
                    .HasColumnType("datetime")
                    .HasColumnName("validationtool");

                entity.Property(e => e.Variationtoinstructionic)
                    .HasColumnType("datetime")
                    .HasColumnName("variationtoinstructionic");

                entity.Property(e => e.Variationtoinstructionii)
                    .HasColumnType("datetime")
                    .HasColumnName("variationtoinstructionii");

                entity.Property(e => e.Variationtoinstructionph)
                    .HasColumnType("datetime")
                    .HasColumnName("variationtoinstructionph");

                entity.Property(e => e.Voucherissued)
                    .HasColumnType("datetime")
                    .HasColumnName("voucherissued");

                entity.Property(e => e.Voucheroffered)
                    .HasColumnType("datetime")
                    .HasColumnName("voucheroffered");
            });

            modelBuilder.Entity<TblClaimType>(entity =>
            {
                entity.HasKey(e => e.ClaimTypeId);

                entity.ToTable("TblClaimType", "MI");

                entity.Property(e => e.ClaimTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimTypeDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<TblInsuranceClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TblInsuranceClaim", "MI");

                entity.Property(e => e.AccidentComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AliasInsuranceClaimId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Betterment).HasColumnType("money");

                entity.Property(e => e.Carriage).HasColumnType("money");

                entity.Property(e => e.ClaimDetails)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimTypeId).HasColumnName("ClaimTypeID");

                entity.Property(e => e.ClaimValue).HasColumnType("money");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CreditPhRaised).HasColumnName("Credit_Ph_Raised");

                entity.Property(e => e.CreditPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Raised_Date");

                entity.Property(e => e.CreditPhReq).HasColumnName("Credit_Ph_Req");

                entity.Property(e => e.CreditPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Req_Date");

                entity.Property(e => e.CreditPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Ph_Sage");

                entity.Property(e => e.CreditPhSync).HasColumnName("Credit_Ph_Sync");

                entity.Property(e => e.CreditPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_Ph_Sync_Date");

                entity.Property(e => e.CreditPhVat).HasColumnName("Credit_Ph_VAT");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateInstructed).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DateXschanged)
                    .HasColumnType("datetime")
                    .HasColumnName("DateXSChanged");

                entity.Property(e => e.DeliveryAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FinaliseDate).HasColumnType("datetime");

                entity.Property(e => e.Fnolaccepted).HasColumnName("FNOLAccepted");

                entity.Property(e => e.Handler)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HomeTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionComments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionReference)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Insured2Title)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredCompanyName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredContactPerson)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredFirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuredTitle)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InvPhRaised).HasColumnName("Inv_Ph_Raised");

                entity.Property(e => e.InvPhRaisedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Raised_Date");

                entity.Property(e => e.InvPhReq).HasColumnName("Inv_Ph_Req");

                entity.Property(e => e.InvPhReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Req_Date");

                entity.Property(e => e.InvPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Ph_Sage");

                entity.Property(e => e.InvPhSync).HasColumnName("Inv_Ph_Sync");

                entity.Property(e => e.InvPhSyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Inv_Ph_Sync_Date");

                entity.Property(e => e.InvPhVat).HasColumnName("Inv_Ph_VAT");

                entity.Property(e => e.InvVatPhSage)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Inv_VAT_Ph_Sage");

                entity.Property(e => e.InvoiceCarriage).HasColumnType("money");

                entity.Property(e => e.InvoiceValue).HasColumnType("money");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.IsInsuredAcompany).HasColumnName("IsInsuredACompany");

                entity.Property(e => e.IsVatregistered).HasColumnName("IsVATRegistered");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LAReference");

                entity.Property(e => e.LastActionDate).HasColumnType("datetime");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Pocarriage)
                    .HasColumnType("money")
                    .HasColumnName("POCarriage");

                entity.Property(e => e.PolicyExcess).HasColumnType("money");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Povalue)
                    .HasColumnType("money")
                    .HasColumnName("POValue");

                entity.Property(e => e.Profit).HasColumnType("money");

                entity.Property(e => e.QuoteComments)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.SingleArticleLimit).HasColumnType("money");

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VatregistrationNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("VATRegistrationNumber");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkTelephone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.XschangedBy)
                    .HasMaxLength(50)
                    .HasColumnName("XSChangedBy");

                entity.Property(e => e.Xspaid).HasColumnName("XSPaid");
            });

            modelBuilder.Entity<TblInsuranceClaimCommentsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TblInsuranceClaimCommentsHistory", "MI");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblItemType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TblItemType", "MI");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblLossAdjuster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TblLossAdjuster", "MI");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AccountsNotes).HasMaxLength(4000);

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InsCompanyId).HasColumnName("InsCompanyID");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.MinimumValueToQuote).HasColumnType("money");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Tag)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TblProduct", "MI");

                entity.Property(e => e.AliasProductId)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BuyRate).HasColumnType("money");

                entity.Property(e => e.Category)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateSynchronized).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DetailedDescription9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastSynchronized).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Make)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.SageProductCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesNominalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SellRate).HasColumnType("money");

                entity.Property(e => e.SuperceededBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededComments)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SuperceededDate).HasColumnType("datetime");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblSubCauseType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TblSubCauseType", "MI");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FnolvalueId).HasColumnName("FNOLValueID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TblUser", "MI");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ntlogon)
                    .HasMaxLength(50)
                    .HasColumnName("NTLogon");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TitleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempAgeasCarriage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_ageas_carriage", "Accounts");

                entity.Property(e => e.CarriageOvercharge).HasColumnName("CARRIAGE_OVERCHARGE");

                entity.Property(e => e.ClaimRef).HasColumnName("CLAIM_REF");

                entity.Property(e => e.DateClaimInvoiced)
                    .HasMaxLength(255)
                    .HasColumnName("DATE_CLAIM_INVOICED");

                entity.Property(e => e.Handler)
                    .HasMaxLength(255)
                    .HasColumnName("HANDLER");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .HasColumnName("NOTES");
            });

            modelBuilder.Entity<TempAgeasClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_ageas_claims", "Accounts");

                entity.Property(e => e.ClaimRef).HasColumnName("CLAIM_REF");
            });

            modelBuilder.Entity<TempBracelet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempBracelets");

                entity.Property(e => e.BirthStone)
                    .HasMaxLength(255)
                    .HasColumnName("Birth stone ");

                entity.Property(e => e.BraceletStyle)
                    .HasMaxLength(255)
                    .HasColumnName("Bracelet style ");

                entity.Property(e => e.CostPrice).HasColumnName("Cost price ");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("Description ");

                entity.Property(e => e.DiamondCarat).HasColumnName("Diamond Carat");

                entity.Property(e => e.DiamondClarity)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond clarity ");

                entity.Property(e => e.DiamondColour)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond colour ");

                entity.Property(e => e.GemStone)
                    .HasMaxLength(255)
                    .HasColumnName("Gem stone ");

                entity.Property(e => e.GoldCarat).HasColumnName("Gold carat ");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("Image ");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(255)
                    .HasColumnName("Manufacturer ");

                entity.Property(e => e.Material)
                    .HasMaxLength(255)
                    .HasColumnName("material ");

                entity.Property(e => e.ProductCode).HasColumnName("Product code ");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(255)
                    .HasColumnName("product type ");

                entity.Property(e => e.Recipent)
                    .HasMaxLength(255)
                    .HasColumnName("Recipent ");

                entity.Property(e => e.Rrp).HasColumnName("RRP");
            });

            modelBuilder.Entity<TempCreditor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_Creditors", "Accounts");

                entity.Property(e => e.CrBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cr_balance");

                entity.Property(e => e.CrDate)
                    .HasColumnType("datetime")
                    .HasColumnName("cr_date");

                entity.Property(e => e.CrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("cr_id");

                entity.Property(e => e.CrInvNo)
                    .HasMaxLength(50)
                    .HasColumnName("cr_inv_no");

                entity.Property(e => e.CrName)
                    .HasMaxLength(50)
                    .HasColumnName("cr_name");

                entity.Property(e => e.CrOhsId).HasColumnName("cr_ohs_id");

                entity.Property(e => e.CrSupplierId).HasColumnName("cr_supplier_id");

                entity.Property(e => e.CrTranType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cr_tran_type")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TempDebtor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_Debtors", "Accounts");

                entity.Property(e => e.DrBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("dr_balance");

                entity.Property(e => e.DrClaimId).HasColumnName("dr_claim_id");

                entity.Property(e => e.DrDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dr_date");

                entity.Property(e => e.DrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("dr_id");

                entity.Property(e => e.DrInsCoId).HasColumnName("dr_ins_co_id");

                entity.Property(e => e.DrInvNo)
                    .HasMaxLength(50)
                    .HasColumnName("dr_inv_no");

                entity.Property(e => e.DrLaId).HasColumnName("dr_la_id");

                entity.Property(e => e.DrName)
                    .HasMaxLength(60)
                    .HasColumnName("dr_name");

                entity.Property(e => e.DrTranType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("dr_tran_type")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TempEarring>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempEarrings");

                entity.Property(e => e.BirthStone)
                    .HasMaxLength(255)
                    .HasColumnName("Birth Stone");

                entity.Property(e => e.CostPrice).HasColumnName("Cost price ");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("Description ");

                entity.Property(e => e.DiamondCarat).HasColumnName("Diamond Carat");

                entity.Property(e => e.DiamondClarity)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond Clarity");

                entity.Property(e => e.DiamondColour)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond Colour");

                entity.Property(e => e.EarringStyle)
                    .HasMaxLength(255)
                    .HasColumnName("Earring Style ");

                entity.Property(e => e.GoldCarat).HasColumnName("Gold carat ");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("Image ");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(255)
                    .HasColumnName("Manufacturer ");

                entity.Property(e => e.Material)
                    .HasMaxLength(255)
                    .HasColumnName("material ");

                entity.Property(e => e.ProductCode).HasColumnName("Product code ");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(255)
                    .HasColumnName("product type ");

                entity.Property(e => e.Recipent)
                    .HasMaxLength(255)
                    .HasColumnName("Recipent ");

                entity.Property(e => e.Rrp).HasColumnName("RRP");
            });

            modelBuilder.Entity<TempMiChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_mi_changes", "MI");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NewCat).HasColumnName("new-cat");

                entity.Property(e => e.NewCattext)
                    .HasMaxLength(50)
                    .HasColumnName("new-cattext");
            });

            modelBuilder.Entity<TempNecklace>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempNecklaces");

                entity.Property(e => e.BirthStone)
                    .HasMaxLength(255)
                    .HasColumnName("Birth stone ");

                entity.Property(e => e.CostPrice).HasColumnName("Cost price ");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("Description ");

                entity.Property(e => e.DiamondCarat)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond Carat");

                entity.Property(e => e.DiamondClarity)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond clarity ");

                entity.Property(e => e.DiamondColour)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond colour ");

                entity.Property(e => e.GemStone)
                    .HasMaxLength(255)
                    .HasColumnName("Gem stone ");

                entity.Property(e => e.GoldCarat).HasColumnName("Gold carat ");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("Image ");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(255)
                    .HasColumnName("Manufacturer ");

                entity.Property(e => e.Material)
                    .HasMaxLength(255)
                    .HasColumnName("material ");

                entity.Property(e => e.NecklaceStyle)
                    .HasMaxLength(255)
                    .HasColumnName("Necklace style ");

                entity.Property(e => e.ProductCode).HasColumnName("Product code ");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(255)
                    .HasColumnName("product type ");

                entity.Property(e => e.Recipent)
                    .HasMaxLength(255)
                    .HasColumnName("Recipent ");

                entity.Property(e => e.Rrp).HasColumnName("RRP");
            });

            modelBuilder.Entity<TempNlJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_NL_Journals", "Accounts");

                entity.Property(e => e.NljAccountingPeriod).HasColumnName("nlj_accounting_period");

                entity.Property(e => e.NljAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nlj_amount");

                entity.Property(e => e.NljCCode).HasColumnName("nlj_c_code");

                entity.Property(e => e.NljDCode).HasColumnName("nlj_d_code");

                entity.Property(e => e.NljDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nlj_date");

                entity.Property(e => e.NljId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("nlj_id");

                entity.Property(e => e.NljNarrative)
                    .HasMaxLength(50)
                    .HasColumnName("nlj_narrative");

                entity.Property(e => e.NljTransPeriod).HasColumnName("nlj_trans_period");
            });

            modelBuilder.Entity<TempProductId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempProductID", "nCompass");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewProductId).HasColumnName("NewProductID");

                entity.Property(e => e.OldProductId).HasColumnName("OldProductID");
            });

            modelBuilder.Entity<TempRevisedGpDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_revised_gp_dates");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.Handler).HasMaxLength(255);

                entity.Property(e => e.ProfitDate).HasColumnType("date");

                entity.Property(e => e.RevisedDate).HasColumnType("date");
            });

            modelBuilder.Entity<TempRing>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempRings");

                entity.Property(e => e.BirthStone)
                    .HasMaxLength(255)
                    .HasColumnName("Birth stone ");

                entity.Property(e => e.CostPrice).HasColumnName("Cost price ");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("Description ");

                entity.Property(e => e.DiamondCarat).HasColumnName("Diamond Carat");

                entity.Property(e => e.DiamondClarity)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond clarity ");

                entity.Property(e => e.DiamondColour)
                    .HasMaxLength(255)
                    .HasColumnName("Diamond colour ");

                entity.Property(e => e.GemStone)
                    .HasMaxLength(255)
                    .HasColumnName("Gem stone ");

                entity.Property(e => e.GoldCarat).HasColumnName("Gold carat ");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("Image ");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(255)
                    .HasColumnName("Manufacturer ");

                entity.Property(e => e.Material)
                    .HasMaxLength(255)
                    .HasColumnName("material ");

                entity.Property(e => e.ProductCode).HasColumnName("Product code ");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(255)
                    .HasColumnName("product type ");

                entity.Property(e => e.Recipent)
                    .HasMaxLength(255)
                    .HasColumnName("Recipent ");

                entity.Property(e => e.RingStyle)
                    .HasMaxLength(255)
                    .HasColumnName("Ring style ");

                entity.Property(e => e.Rrp).HasColumnName("RRP");
            });

            modelBuilder.Entity<TempWatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempWatches");

                entity.Property(e => e.CaseDiameter)
                    .HasMaxLength(255)
                    .HasColumnName("Case diameter ");

                entity.Property(e => e.CaseMaterial)
                    .HasMaxLength(255)
                    .HasColumnName("Case material ");

                entity.Property(e => e.CostPrice).HasColumnName("Cost price ");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("Description ");

                entity.Property(e => e.DialColour)
                    .HasMaxLength(255)
                    .HasColumnName("Dial Colour ");

                entity.Property(e => e.Image)
                    .HasMaxLength(255)
                    .HasColumnName("Image ");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(255)
                    .HasColumnName("Manufacturer ");

                entity.Property(e => e.MovementType)
                    .HasMaxLength(255)
                    .HasColumnName("Movement Type ");

                entity.Property(e => e.ProductCode).HasColumnName("Product code ");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(255)
                    .HasColumnName("product type ");

                entity.Property(e => e.Recipent)
                    .HasMaxLength(255)
                    .HasColumnName("Recipent ");

                entity.Property(e => e.Rrp).HasColumnName("RRP");

                entity.Property(e => e.StrapMaterial)
                    .HasMaxLength(255)
                    .HasColumnName("Strap Material ");

                entity.Property(e => e.WatchMarkers)
                    .HasMaxLength(255)
                    .HasColumnName("Watch markers");
            });

            modelBuilder.Entity<TemporaryParameter>(entity =>
            {
                entity.ToTable("TemporaryParameter", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ParentParameterId).HasColumnName("ParentParameterID");
            });

            modelBuilder.Entity<TemporaryValue>(entity =>
            {
                entity.ToTable("TemporaryValue", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CauseTypeId).HasColumnName("CauseTypeID");

                entity.Property(e => e.GfkfamilyId).HasColumnName("GFKFamilyID");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(200)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ParentValueId).HasColumnName("ParentValueID");

                entity.Property(e => e.SubcauseTypeId).HasColumnName("SubcauseTypeID");

                entity.HasOne(d => d.Parameter)
                    .WithMany(p => p.TemporaryValues)
                    .HasForeignKey(d => d.ParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemporaryValue_TemporaryParameter");

                entity.HasOne(d => d.ParentValue)
                    .WithMany(p => p.InverseParentValue)
                    .HasForeignKey(d => d.ParentValueId)
                    .HasConstraintName("FK_TemporaryValue_TemporaryValue");
            });

            modelBuilder.Entity<TescoBordereau>(entity =>
            {
                entity.HasKey(e => e.AbId);

                entity.ToTable("Tesco_Bordereau", "Accounts");

                entity.Property(e => e.AbId).HasColumnName("ab_id");

                entity.Property(e => e.AbBcId).HasColumnName("ab_bc_id");

                entity.Property(e => e.AbGross)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("ab_gross");

                entity.Property(e => e.AbSidId).HasColumnName("ab_sid_id");

                entity.Property(e => e.AbSimId).HasColumnName("ab_sim_id");
            });

            modelBuilder.Entity<Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Times", "MI");

                entity.HasIndex(e => e.Insuranceclaimid, "IXNC_Times_insuranceclaimid_49665");

                entity.Property(e => e.BookedOn)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Booked_On");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.IncomingCallsIns).HasDefaultValueSql("((0))");

                entity.Property(e => e.IncomingCallsPh)
                    .HasColumnName("IncomingCallsPH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InstructionRecieved)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Instruction_Recieved");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.OutGoingCallsPh)
                    .HasColumnName("OutGoingCallsPH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OutgoingCallsIns).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sla58).HasColumnName("SLA_58");
            });

            modelBuilder.Entity<Title>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Titles", "Site");

                entity.Property(e => e.Title1)
                    .HasMaxLength(50)
                    .HasColumnName("Title");

                entity.Property(e => e.TitleId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Title_ID");
            });

            modelBuilder.Entity<TqInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TQ_Invoice", "MI");

                entity.Property(e => e.Bdate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("BDate")
                    .IsFixedLength();

                entity.Property(e => e.Bmonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Clstatus)
                    .HasMaxLength(50)
                    .HasColumnName("CLSTATUS");

                entity.Property(e => e.Tclid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TCLID");
            });

            modelBuilder.Entity<TransactionLog>(entity =>
            {
                entity.ToTable("TransactionLog", "RiverDynamics");

                entity.HasIndex(e => e.DateCreated, "_dta_index_TransactionLog_9_1328723786__K2D_1_3_4");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("dateCreated")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TransactionLog1>(entity =>
            {
                entity.ToTable("TransactionLog", "Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TriageCommodity>(entity =>
            {
                entity.ToTable("TriageCommodity", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Action).HasDefaultValueSql("((1))");

                entity.Property(e => e.CommodityValueId).HasColumnName("CommodityValueID");

                entity.Property(e => e.TriageValueId).HasColumnName("TriageValueID");
            });

            modelBuilder.Entity<TriageCommodity20191209>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TriageCommodity20191209", "FNOL");

                entity.Property(e => e.CommodityValueId).HasColumnName("CommodityValueID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TriageValueId).HasColumnName("TriageValueID");
            });

            modelBuilder.Entity<TriageOutcome>(entity =>
            {
                entity.ToTable("TriageOutcome", "FNOL");

                entity.Property(e => e.Action).HasMaxLength(64);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.HasOne(d => d.ValidationClaim)
                    .WithMany(p => p.TriageOutcomes)
                    .HasForeignKey(d => d.ValidationClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidationClaimId_ClaimId");
            });

            modelBuilder.Entity<TriggeredEvent>(entity =>
            {
                entity.HasKey(e => e.EventId);

                entity.ToTable("TriggeredEvents", "Site");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EventSource).HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");
            });

            modelBuilder.Entity<UnconfirmedInstruction>(entity =>
            {
                entity.HasKey(e => e.InstructionId)
                    .HasName("PK_FNOL.UnconfirmedInstruction");

                entity.ToTable("UnconfirmedInstruction", "FNOL");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.AccidentDetails).HasColumnType("ntext");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.Address4).HasMaxLength(50);

                entity.Property(e => e.AppMessageId).HasColumnName("AppMessageID");

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.ConfirmedBy).HasMaxLength(50);

                entity.Property(e => e.ConfirmedInstructionId).HasColumnName("ConfirmedInstructionID");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DelivAddress1).HasMaxLength(50);

                entity.Property(e => e.DelivAddress2).HasMaxLength(50);

                entity.Property(e => e.DelivAddress3).HasMaxLength(50);

                entity.Property(e => e.DelivAddress4).HasMaxLength(50);

                entity.Property(e => e.DelivPostCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FirstName2).HasMaxLength(50);

                entity.Property(e => e.Handler).HasMaxLength(50);

                entity.Property(e => e.HomePhone).HasMaxLength(50);

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.IsVatregistered).HasColumnName("IsVATRegistered");

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.LastName2).HasMaxLength(50);

                entity.Property(e => e.LossAdjusterId).HasColumnName("LossAdjusterID");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.PolicyNo).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(50);

                entity.Property(e => e.RefNo).HasMaxLength(50);

                entity.Property(e => e.Source).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.Title2).HasMaxLength(50);

                entity.Property(e => e.VatRegNo).HasMaxLength(50);

                entity.Property(e => e.WorkPhone).HasMaxLength(50);
            });

            modelBuilder.Entity<Upc>(entity =>
            {
                entity.ToTable("UPC", "Amazon");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Itemid).HasColumnName("itemid");

                entity.Property(e => e.Upc1)
                    .HasMaxLength(200)
                    .HasColumnName("upc");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Upcs)
                    .HasForeignKey(d => d.Itemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UPC_Item");
            });

            modelBuilder.Entity<UpdateParameter>(entity =>
            {
                entity.HasKey(e => e.UpId);

                entity.ToTable("UpdateParameters", "MI");

                entity.Property(e => e.UpId).HasColumnName("up_ID");

                entity.Property(e => e.LastSalesInvoice).HasColumnName("last_sales_invoice");
            });

            modelBuilder.Entity<Useage>(entity =>
            {
                entity.ToTable("Useage", "Validation");

                entity.HasIndex(e => e.Use, "IXNC_Useage_Use_4DF9E");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CommodityId).HasColumnName("CommodityID");

                entity.Property(e => e.CommodityName).HasMaxLength(50);

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FamilyName).HasMaxLength(50);

                entity.Property(e => e.SearchString).HasMaxLength(100);

                entity.Property(e => e.Use).HasMaxLength(200);

                entity.Property(e => e.ValidationClaimId).HasColumnName("ValidationClaimID");

                entity.Property(e => e.When)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Who).HasMaxLength(200);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.UsrId);

                entity.ToTable("Users", "Accounts");

                entity.Property(e => e.UsrId).HasColumnName("usr_id");

                entity.Property(e => e.UsrAccessAdmin).HasColumnName("usr_access_admin");

                entity.Property(e => e.UsrAccessBl).HasColumnName("usr_access_bl");

                entity.Property(e => e.UsrAccessMi).HasColumnName("usr_access_mi");

                entity.Property(e => e.UsrAccessNominal).HasColumnName("usr_access_nominal");

                entity.Property(e => e.UsrAccessPurchases).HasColumnName("usr_access_purchases");

                entity.Property(e => e.UsrAccessSales).HasColumnName("usr_access_sales");

                entity.Property(e => e.UsrAccessSl).HasColumnName("usr_access_sl");

                entity.Property(e => e.UsrEmail)
                    .HasMaxLength(100)
                    .HasColumnName("usr_email");

                entity.Property(e => e.UsrName)
                    .HasMaxLength(50)
                    .HasColumnName("usr_name");

                entity.Property(e => e.UsrWindowsLogin)
                    .HasMaxLength(50)
                    .HasColumnName("usr_windows_login");
            });

            modelBuilder.Entity<User1>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("Users", "nCompass");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<User2>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("User", "Role");

                entity.HasIndex(e => e.Ntlogon, "IXNC_User_NTLogon_5CA12");

                entity.HasIndex(e => new { e.UserType, e.LastActive }, "IXNC_User_UserType_LastActive_267D0");

                entity.HasIndex(e => new { e.UserName, e.UserId }, "_dta_index_User_16_1552724584__K3_K1");

                entity.HasIndex(e => e.UserId, "_dta_index_User_8_1552724584__K1");

                entity.HasIndex(e => new { e.UserId, e.IsClaimHandler, e.UserType }, "_dta_index_User_8_1552724584__K1_K21_K8");

                entity.HasIndex(e => new { e.IsClaimHandler, e.UserId, e.UserType }, "_dta_index_User_8_1552724584__K21_K1_K8");

                entity.HasIndex(e => new { e.Ntlogon, e.UserId }, "_dta_index_User_9_1552724584__K19_K1_3_6_7");

                entity.HasIndex(e => e.UserId, "_dta_index_User_9_1552724584__K1_3_6_7");

                entity.HasIndex(e => new { e.UserId, e.UserName }, "_dta_index_User_9_1552724584__K1_K3");

                entity.HasIndex(e => e.IsClaimHandler, "_dta_index_User_9_1552724584__K21_1_6_7_22_26");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DisplayPictureMime)
                    .HasMaxLength(50)
                    .HasColumnName("DisplayPictureMIME");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsClaimHandler)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastActive).HasColumnType("datetime");

                entity.Property(e => e.LastEmailImported).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ntlogon)
                    .HasMaxLength(50)
                    .HasColumnName("NTLogon");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TitleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.User2s)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_User_User_Status");
            });

            modelBuilder.Entity<User3>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK_Validation.User");

                entity.ToTable("User", "Validation");

                entity.HasIndex(e => e.UserId, "_dta_index_User_9_1769773362__K1_2");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.AccessLevel).HasDefaultValueSql("((1))");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.AgencyReference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress).HasMaxLength(500);

                entity.Property(e => e.Enabled)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HasMidashboard).HasColumnName("HasMIDashboard");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<UserAttendance>(entity =>
            {
                entity.ToTable("User_Attendance", "Role");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<UserCommodity>(entity =>
            {
                entity.ToTable("User_Commodity", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommodityId)
                    .HasColumnName("CommodityID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Commodity)
                    .WithMany(p => p.UserCommodities)
                    .HasForeignKey(d => d.CommodityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Commodity_Value");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserCommodities)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Commodity_User");
            });

            modelBuilder.Entity<UserComplaintCompensation>(entity =>
            {
                entity.ToTable("User_ComplaintCompensation", "Role");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Month).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserComplaintCompensations)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_ComplaintCompensation_User");
            });

            modelBuilder.Entity<UserCreditRec>(entity =>
            {
                entity.ToTable("User_CreditRecs", "Role");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Month).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserCreditRecs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_CreditRecs_User");
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserGroup", "MI");

                entity.Property(e => e.UgId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ug_ID");

                entity.Property(e => e.UgName)
                    .HasMaxLength(100)
                    .HasColumnName("ug_Name");
            });

            modelBuilder.Entity<UserGroup1>(entity =>
            {
                entity.ToTable("User_Group", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.UserGroup1s)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Group_Users_Group");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserGroup1s)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Group_Users_User");
            });

            modelBuilder.Entity<UserInsuranceCompany>(entity =>
            {
                entity.ToTable("User_InsuranceCompany", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.InsuranceCompany)
                    .WithMany(p => p.UserInsuranceCompanies)
                    .HasForeignKey(d => d.InsuranceCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_InsuranceCompany_InsuranceCompany");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserInsuranceCompanies)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InsuranceCompany_User");
            });

            modelBuilder.Entity<UserInvoiceError>(entity =>
            {
                entity.ToTable("User_InvoiceErrors", "Role");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Month).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserInvoiceErrors)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_InvoiceErrors_User");
            });

            modelBuilder.Entity<UserLog>(entity =>
            {
                entity.ToTable("UserLog", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.LoginTime).HasColumnType("datetime");

                entity.Property(e => e.LogoutTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SessionId)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserOnline>(entity =>
            {
                entity.ToTable("User_Online", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("User_Roles", "nCompass");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<UserRole1>(entity =>
            {
                entity.ToTable("User_Role", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRole1s)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Role_Users_Role");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRole1s)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Role_Users_User");
            });

            modelBuilder.Entity<UserScore>(entity =>
            {
                entity.ToTable("User_Score", "Role");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MonthStarting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserScores)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Score_User");
            });

            modelBuilder.Entity<UserSession>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserSessions", "Validation");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany()
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Validation.UserSessions_Validation.User");
            });

            modelBuilder.Entity<UserStatus>(entity =>
            {
                entity.ToTable("User_Status", "Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<UserTimekeeping>(entity =>
            {
                entity.ToTable("User_Timekeeping", "Role");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserTimekeepings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Timekeeping_User");
            });

            modelBuilder.Entity<UserUserGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("User_UserGroup", "MI");

                entity.Property(e => e.UugGroupId).HasColumnName("uug_GroupID");

                entity.Property(e => e.UugId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("uug_ID");

                entity.Property(e => e.UugUserId).HasColumnName("uug_UserID");
            });

            modelBuilder.Entity<UtopiaError>(entity =>
            {
                entity.HasKey(e => e.ErrorId);

                entity.ToTable("UtopiaError", "Claim");

                entity.Property(e => e.ErrorId).HasColumnName("Error_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.ErrorDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Error_Date");

                entity.Property(e => e.ErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("Error_Message");
            });

            modelBuilder.Entity<UtopiaResult>(entity =>
            {
                entity.HasKey(e => e.ResultId);

                entity.ToTable("UtopiaResult", "Claim");

                entity.Property(e => e.ResultId).HasColumnName("Result_ID");

                entity.Property(e => e.ClaimId).HasColumnName("Claim_ID");

                entity.Property(e => e.ResultDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Result_Date");
            });

            modelBuilder.Entity<ValidationClaimItemGemGroup>(entity =>
            {
                entity.ToTable("ValidationClaimItemGemGroups", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Carat).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ClarityId).HasColumnName("ClarityID");

                entity.Property(e => e.ColourId)
                    .HasColumnName("ColourID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HistoricalPriceGbp).HasColumnName("HistoricalPriceGBP");

                entity.Property(e => e.HistoricalRetailPriceGbp).HasColumnName("HistoricalRetailPriceGBP");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.PriceGbp).HasColumnName("PriceGBP");

                entity.Property(e => e.PriceLogged).HasColumnType("datetime");

                entity.Property(e => e.PriceRetailGbp).HasColumnName("PriceRetailGBP");

                entity.Property(e => e.PriceUsd).HasColumnName("PriceUSD");

                entity.Property(e => e.QualityId).HasColumnName("QualityID");

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.ShapeId).HasColumnName("ShapeID");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<ValidationClaimItemMetal>(entity =>
            {
                entity.ToTable("ValidationClaimItemMetals", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaratId).HasColumnName("CaratID");

                entity.Property(e => e.HistoricalPriceGbp).HasColumnName("HistoricalPriceGBP");

                entity.Property(e => e.HistoricalRetailPriceGbp).HasColumnName("HistoricalRetailPriceGBP");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.PriceGbp).HasColumnName("PriceGBP");

                entity.Property(e => e.PriceRetailGbp).HasColumnName("PriceRetailGBP");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<ValidationClaimItemValue>(entity =>
            {
                entity.ToTable("ValidationClaimItem_Values", "Validation");

                entity.HasIndex(e => new { e.ItemId, e.ParameterId }, "IXNC_ValidationClaimItem_Values_ItemID_ParameterID_A93BF");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ValidationClaimItemValues)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidationClaimItem_Values _ClaimItem");

                entity.HasOne(d => d.Parameter)
                    .WithMany(p => p.ValidationClaimItemValues)
                    .HasForeignKey(d => d.ParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidationClaimItem_Values _Parameter");

                entity.HasOne(d => d.ValueNavigation)
                    .WithMany(p => p.ValidationClaimItemValues)
                    .HasForeignKey(d => d.ValueId)
                    .HasConstraintName("FK_ValidationClaimItem_Values _Value");
            });

            modelBuilder.Entity<ValidationOutcome>(entity =>
            {
                entity.ToTable("ValidationOutcome", "Validation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.ParentOutcomeNavigation)
                    .WithMany(p => p.InverseParentOutcomeNavigation)
                    .HasForeignKey(d => d.ParentOutcome)
                    .HasConstraintName("FK_Outcome_ParentOutcome");
            });

            modelBuilder.Entity<ValidationSavedMatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ValidationSavedMatches", "nCompass");

                entity.Property(e => e.ClaimRef).HasMaxLength(50);

                entity.Property(e => e.DateSaved).HasColumnType("datetime");

                entity.Property(e => e.OriginalItemId).HasColumnName("OriginalItemID");

                entity.Property(e => e.OriginalProductId).HasColumnName("OriginalProductID");

                entity.Property(e => e.Postcode).HasMaxLength(50);

                entity.Property(e => e.ReplacementItemId).HasColumnName("ReplacementItemID");

                entity.Property(e => e.ReplacementProductId).HasColumnName("ReplacementProductID");

                entity.Property(e => e.Smid).HasColumnName("SMID");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ValidationToolMenu>(entity =>
            {
                entity.ToTable("ValidationToolMenu", "FNOL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(200)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.ParentValueId).HasColumnName("ParentValueID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<Value>(entity =>
            {
                entity.ToTable("Value", "Claim");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.HasOne(d => d.Parameter)
                    .WithMany(p => p.Values)
                    .HasForeignKey(d => d.ParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Value_Parameter");
            });

            modelBuilder.Entity<Value1>(entity =>
            {
                entity.ToTable("Value", "FNOL");

                entity.HasIndex(e => e.ParameterId, "IXNC_Value_ParameterID_E4EE4");

                entity.HasIndex(e => e.ParentValueId, "IXNC_Value_ParentValueID_4E93A");

                entity.HasIndex(e => e.Id, "_dta_index_Value_9_1127675065__K1_3");

                entity.HasIndex(e => new { e.Id, e.Lvalias }, "_dta_index_Value_9_1127675065__K1_K10");

                entity.HasIndex(e => new { e.Id, e.ParentValueId }, "_dta_index_Value_9_1127675065__K1_K4_3");

                entity.HasIndex(e => new { e.ParentValueId, e.Id, e.Lvalias }, "_dta_index_Value_9_1127675065__K4_K1_K10_3");

                entity.HasIndex(e => new { e.ParentValueId, e.Id }, "_dta_index_Value_9_718677658__K4_K1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdmiralAlias).HasMaxLength(200);

                entity.Property(e => e.AgeasName).HasMaxLength(500);

                entity.Property(e => e.AllianzAlias).HasMaxLength(200);

                entity.Property(e => e.CauseTypeId).HasColumnName("CauseTypeID");

                entity.Property(e => e.GfkfamilyId).HasColumnName("GFKFamilyID");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(200)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Lvalias)
                    .HasMaxLength(200)
                    .HasColumnName("LVAlias");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ParentValueId).HasColumnName("ParentValueID");

                entity.Property(e => e.SubcauseTypeId).HasColumnName("SubcauseTypeID");

                entity.HasOne(d => d.Gfkfamily)
                    .WithMany(p => p.Value1s)
                    .HasForeignKey(d => d.GfkfamilyId)
                    .HasConstraintName("FK_Value_Family");
            });

            modelBuilder.Entity<Value2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values", "MI");

                entity.HasIndex(e => e.ItemTypeId, "IXNC_Values_Item_type_id_2CCF4");

                entity.HasIndex(e => e.LossadjusterId, "IXNC_Values_LossadjusterID_2C9B5");

                entity.HasIndex(e => e.Consignment, "IXNC_Values_consignment_F3BD1");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<Value20191209>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Value20191209", "FNOL");

                entity.Property(e => e.AdmiralAlias).HasMaxLength(200);

                entity.Property(e => e.AllianzAlias).HasMaxLength(200);

                entity.Property(e => e.CauseTypeId).HasColumnName("CauseTypeID");

                entity.Property(e => e.GfkfamilyId).HasColumnName("GFKFamilyID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(200)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Lvalias)
                    .HasMaxLength(200)
                    .HasColumnName("LVAlias");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ParentValueId).HasColumnName("ParentValueID");

                entity.Property(e => e.SubcauseTypeId).HasColumnName("SubcauseTypeID");
            });

            modelBuilder.Entity<ValueTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Value_Temp", "FNOL");

                entity.Property(e => e.AdmiralAlias).HasMaxLength(200);

                entity.Property(e => e.CauseTypeId).HasColumnName("CauseTypeID");

                entity.Property(e => e.GfkfamilyId).HasColumnName("GFKFamilyID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(200)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");

                entity.Property(e => e.Lvalias)
                    .HasMaxLength(200)
                    .HasColumnName("LVAlias");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.ParameterId).HasColumnName("ParameterID");

                entity.Property(e => e.ParentValueId).HasColumnName("ParentValueID");

                entity.Property(e => e.SubcauseTypeId).HasColumnName("SubcauseTypeID");
            });

            modelBuilder.Entity<Values20140406Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_20140406_err", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<Values20140510Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_20140510_err", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<Values20141702>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_20141702", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<ValuesAcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_Acc", "MI");

                entity.HasIndex(e => e.Consignment, "IXNC_Values_Acc_consignment_D0071");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<ValuesAcc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_Acc1", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<ValuesAcc20140406Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_Acc_20140406_err", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<ValuesAcc20140510Err>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_Acc_20140510_err", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<ValuesAcc20141702>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_Acc_20141702", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<ValuesAccPdh>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_Acc_pdh", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<ValuesOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_old", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");
            });

            modelBuilder.Entity<ValuesPdh>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Values_pdh", "MI");

                entity.Property(e => e.AccountRef).HasMaxLength(50);

                entity.Property(e => e.Better01)
                    .HasColumnType("money")
                    .HasColumnName("better_01");

                entity.Property(e => e.Better02)
                    .HasColumnType("money")
                    .HasColumnName("better_02");

                entity.Property(e => e.Better03)
                    .HasColumnType("money")
                    .HasColumnName("better_03");

                entity.Property(e => e.Better04)
                    .HasColumnType("money")
                    .HasColumnName("better_04");

                entity.Property(e => e.Better05)
                    .HasColumnType("money")
                    .HasColumnName("better_05");

                entity.Property(e => e.Better06)
                    .HasColumnType("money")
                    .HasColumnName("better_06");

                entity.Property(e => e.Better07)
                    .HasColumnType("money")
                    .HasColumnName("better_07");

                entity.Property(e => e.Better08)
                    .HasColumnType("money")
                    .HasColumnName("better_08");

                entity.Property(e => e.Better09)
                    .HasColumnType("money")
                    .HasColumnName("better_09");

                entity.Property(e => e.Better10)
                    .HasColumnType("money")
                    .HasColumnName("better_10");

                entity.Property(e => e.Better11)
                    .HasColumnType("money")
                    .HasColumnName("better_11");

                entity.Property(e => e.Better12)
                    .HasColumnType("money")
                    .HasColumnName("better_12");

                entity.Property(e => e.Carriage01)
                    .HasColumnType("money")
                    .HasColumnName("carriage_01");

                entity.Property(e => e.Carriage02)
                    .HasColumnType("money")
                    .HasColumnName("carriage_02");

                entity.Property(e => e.Carriage03)
                    .HasColumnType("money")
                    .HasColumnName("carriage_03");

                entity.Property(e => e.Carriage04)
                    .HasColumnType("money")
                    .HasColumnName("carriage_04");

                entity.Property(e => e.Carriage05)
                    .HasColumnType("money")
                    .HasColumnName("carriage_05");

                entity.Property(e => e.Carriage06)
                    .HasColumnType("money")
                    .HasColumnName("carriage_06");

                entity.Property(e => e.Carriage07)
                    .HasColumnType("money")
                    .HasColumnName("carriage_07");

                entity.Property(e => e.Carriage08)
                    .HasColumnType("money")
                    .HasColumnName("carriage_08");

                entity.Property(e => e.Carriage09)
                    .HasColumnType("money")
                    .HasColumnName("carriage_09");

                entity.Property(e => e.Carriage10)
                    .HasColumnType("money")
                    .HasColumnName("carriage_10");

                entity.Property(e => e.Carriage11)
                    .HasColumnType("money")
                    .HasColumnName("carriage_11");

                entity.Property(e => e.Carriage12)
                    .HasColumnType("money")
                    .HasColumnName("carriage_12");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(50)
                    .HasColumnName("consignment");

                entity.Property(e => e.Credit01)
                    .HasColumnType("money")
                    .HasColumnName("credit_01");

                entity.Property(e => e.Credit02)
                    .HasColumnType("money")
                    .HasColumnName("credit_02");

                entity.Property(e => e.Credit03)
                    .HasColumnType("money")
                    .HasColumnName("credit_03");

                entity.Property(e => e.Credit04)
                    .HasColumnType("money")
                    .HasColumnName("credit_04");

                entity.Property(e => e.Credit05)
                    .HasColumnType("money")
                    .HasColumnName("credit_05");

                entity.Property(e => e.Credit06)
                    .HasColumnType("money")
                    .HasColumnName("credit_06");

                entity.Property(e => e.Credit07)
                    .HasColumnType("money")
                    .HasColumnName("credit_07");

                entity.Property(e => e.Credit08)
                    .HasColumnType("money")
                    .HasColumnName("credit_08");

                entity.Property(e => e.Credit09)
                    .HasColumnType("money")
                    .HasColumnName("credit_09");

                entity.Property(e => e.Credit10)
                    .HasColumnType("money")
                    .HasColumnName("credit_10");

                entity.Property(e => e.Credit11)
                    .HasColumnType("money")
                    .HasColumnName("credit_11");

                entity.Property(e => e.Credit12)
                    .HasColumnType("money")
                    .HasColumnName("credit_12");

                entity.Property(e => e.Excess01)
                    .HasColumnType("money")
                    .HasColumnName("excess_01");

                entity.Property(e => e.Excess02)
                    .HasColumnType("money")
                    .HasColumnName("excess_02");

                entity.Property(e => e.Excess03)
                    .HasColumnType("money")
                    .HasColumnName("excess_03");

                entity.Property(e => e.Excess04)
                    .HasColumnType("money")
                    .HasColumnName("excess_04");

                entity.Property(e => e.Excess05)
                    .HasColumnType("money")
                    .HasColumnName("excess_05");

                entity.Property(e => e.Excess06)
                    .HasColumnType("money")
                    .HasColumnName("excess_06");

                entity.Property(e => e.Excess07)
                    .HasColumnType("money")
                    .HasColumnName("excess_07");

                entity.Property(e => e.Excess08)
                    .HasColumnType("money")
                    .HasColumnName("excess_08");

                entity.Property(e => e.Excess09)
                    .HasColumnType("money")
                    .HasColumnName("excess_09");

                entity.Property(e => e.Excess10)
                    .HasColumnType("money")
                    .HasColumnName("excess_10");

                entity.Property(e => e.Excess11)
                    .HasColumnType("money")
                    .HasColumnName("excess_11");

                entity.Property(e => e.Excess12)
                    .HasColumnType("money")
                    .HasColumnName("excess_12");

                entity.Property(e => e.Inspect01)
                    .HasColumnType("money")
                    .HasColumnName("inspect_01");

                entity.Property(e => e.Inspect02)
                    .HasColumnType("money")
                    .HasColumnName("inspect_02");

                entity.Property(e => e.Inspect03)
                    .HasColumnType("money")
                    .HasColumnName("inspect_03");

                entity.Property(e => e.Inspect04)
                    .HasColumnType("money")
                    .HasColumnName("inspect_04");

                entity.Property(e => e.Inspect05)
                    .HasColumnType("money")
                    .HasColumnName("inspect_05");

                entity.Property(e => e.Inspect06)
                    .HasColumnType("money")
                    .HasColumnName("inspect_06");

                entity.Property(e => e.Inspect07)
                    .HasColumnType("money")
                    .HasColumnName("inspect_07");

                entity.Property(e => e.Inspect08)
                    .HasColumnType("money")
                    .HasColumnName("inspect_08");

                entity.Property(e => e.Inspect09)
                    .HasColumnType("money")
                    .HasColumnName("inspect_09");

                entity.Property(e => e.Inspect10)
                    .HasColumnType("money")
                    .HasColumnName("inspect_10");

                entity.Property(e => e.Inspect11)
                    .HasColumnType("money")
                    .HasColumnName("inspect_11");

                entity.Property(e => e.Inspect12)
                    .HasColumnType("money")
                    .HasColumnName("inspect_12");

                entity.Property(e => e.Insuranceclaimid).HasColumnName("insuranceclaimid");

                entity.Property(e => e.ItemTypeId).HasColumnName("Item_type_id");

                entity.Property(e => e.LarefC)
                    .HasMaxLength(50)
                    .HasColumnName("laref_c");

                entity.Property(e => e.LarefS)
                    .HasMaxLength(50)
                    .HasColumnName("laref_s");

                entity.Property(e => e.LossadjusterId).HasColumnName("LossadjusterID");

                entity.Property(e => e.Repair01)
                    .HasColumnType("money")
                    .HasColumnName("repair_01");

                entity.Property(e => e.Repair02)
                    .HasColumnType("money")
                    .HasColumnName("repair_02");

                entity.Property(e => e.Repair03)
                    .HasColumnType("money")
                    .HasColumnName("repair_03");

                entity.Property(e => e.Repair04)
                    .HasColumnType("money")
                    .HasColumnName("repair_04");

                entity.Property(e => e.Repair05)
                    .HasColumnType("money")
                    .HasColumnName("repair_05");

                entity.Property(e => e.Repair06)
                    .HasColumnType("money")
                    .HasColumnName("repair_06");

                entity.Property(e => e.Repair07)
                    .HasColumnType("money")
                    .HasColumnName("repair_07");

                entity.Property(e => e.Repair08)
                    .HasColumnType("money")
                    .HasColumnName("repair_08");

                entity.Property(e => e.Repair09)
                    .HasColumnType("money")
                    .HasColumnName("repair_09");

                entity.Property(e => e.Repair10)
                    .HasColumnType("money")
                    .HasColumnName("repair_10");

                entity.Property(e => e.Repair11)
                    .HasColumnType("money")
                    .HasColumnName("repair_11");

                entity.Property(e => e.Repair12)
                    .HasColumnType("money")
                    .HasColumnName("repair_12");

                entity.Property(e => e.Replace01)
                    .HasColumnType("money")
                    .HasColumnName("replace_01");

                entity.Property(e => e.Replace02)
                    .HasColumnType("money")
                    .HasColumnName("replace_02");

                entity.Property(e => e.Replace03)
                    .HasColumnType("money")
                    .HasColumnName("replace_03");

                entity.Property(e => e.Replace04)
                    .HasColumnType("money")
                    .HasColumnName("replace_04");

                entity.Property(e => e.Replace05)
                    .HasColumnType("money")
                    .HasColumnName("replace_05");

                entity.Property(e => e.Replace06)
                    .HasColumnType("money")
                    .HasColumnName("replace_06");

                entity.Property(e => e.Replace07)
                    .HasColumnType("money")
                    .HasColumnName("replace_07");

                entity.Property(e => e.Replace08)
                    .HasColumnType("money")
                    .HasColumnName("replace_08");

                entity.Property(e => e.Replace09)
                    .HasColumnType("money")
                    .HasColumnName("replace_09");

                entity.Property(e => e.Replace10)
                    .HasColumnType("money")
                    .HasColumnName("replace_10");

                entity.Property(e => e.Replace11)
                    .HasColumnType("money")
                    .HasColumnName("replace_11");

                entity.Property(e => e.Replace12)
                    .HasColumnType("money")
                    .HasColumnName("replace_12");

                entity.Property(e => e.ReplaceItems01).HasColumnName("replace_items_01");

                entity.Property(e => e.ReplaceItems02).HasColumnName("replace_items_02");

                entity.Property(e => e.ReplaceItems03).HasColumnName("replace_items_03");

                entity.Property(e => e.ReplaceItems04).HasColumnName("replace_items_04");

                entity.Property(e => e.ReplaceItems05).HasColumnName("replace_items_05");

                entity.Property(e => e.ReplaceItems06).HasColumnName("replace_items_06");

                entity.Property(e => e.ReplaceItems07).HasColumnName("replace_items_07");

                entity.Property(e => e.ReplaceItems08).HasColumnName("replace_items_08");

                entity.Property(e => e.ReplaceItems09).HasColumnName("replace_items_09");

                entity.Property(e => e.ReplaceItems10).HasColumnName("replace_items_10");

                entity.Property(e => e.ReplaceItems11).HasColumnName("replace_items_11");

                entity.Property(e => e.ReplaceItems12).HasColumnName("replace_items_12");

                entity.Property(e => e.SageTotal01)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_01");

                entity.Property(e => e.SageTotal02)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_02");

                entity.Property(e => e.SageTotal03)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_03");

                entity.Property(e => e.SageTotal04)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_04");

                entity.Property(e => e.SageTotal05)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_05");

                entity.Property(e => e.SageTotal06)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_06");

                entity.Property(e => e.SageTotal07)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_07");

                entity.Property(e => e.SageTotal08)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_08");

                entity.Property(e => e.SageTotal09)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_09");

                entity.Property(e => e.SageTotal10)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_10");

                entity.Property(e => e.SageTotal11)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_11");

                entity.Property(e => e.SageTotal12)
                    .HasColumnType("money")
                    .HasColumnName("sage_total_12");

                entity.Property(e => e.Total01)
                    .HasColumnType("money")
                    .HasColumnName("total_01");

                entity.Property(e => e.Total02)
                    .HasColumnType("money")
                    .HasColumnName("total_02");

                entity.Property(e => e.Total03)
                    .HasColumnType("money")
                    .HasColumnName("total_03");

                entity.Property(e => e.Total04)
                    .HasColumnType("money")
                    .HasColumnName("total_04");

                entity.Property(e => e.Total05)
                    .HasColumnType("money")
                    .HasColumnName("total_05");

                entity.Property(e => e.Total06)
                    .HasColumnType("money")
                    .HasColumnName("total_06");

                entity.Property(e => e.Total07)
                    .HasColumnType("money")
                    .HasColumnName("total_07");

                entity.Property(e => e.Total08)
                    .HasColumnType("money")
                    .HasColumnName("total_08");

                entity.Property(e => e.Total09)
                    .HasColumnType("money")
                    .HasColumnName("total_09");

                entity.Property(e => e.Total10)
                    .HasColumnType("money")
                    .HasColumnName("total_10");

                entity.Property(e => e.Total11)
                    .HasColumnType("money")
                    .HasColumnName("total_11");

                entity.Property(e => e.Total12)
                    .HasColumnType("money")
                    .HasColumnName("total_12");
            });

            modelBuilder.Entity<VatRate>(entity =>
            {
                entity.HasKey(e => e.VrId);

                entity.ToTable("VAT_Rates", "Accounts");

                entity.Property(e => e.VrId).HasColumnName("vr_id");

                entity.Property(e => e.VrActive)
                    .HasColumnName("vr_active")
                    .HasComment("For old rates - don't allow further use");

                entity.Property(e => e.VrCode)
                    .HasMaxLength(5)
                    .HasColumnName("vr_code")
                    .HasComment("as per Sage, eg. T1 = Standard, T0 = Zero");

                entity.Property(e => e.VrCreatedBy).HasColumnName("vr_created_by");

                entity.Property(e => e.VrCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("vr_created_on");

                entity.Property(e => e.VrDefaultCode)
                    .HasColumnName("vr_default_code")
                    .HasComment("To flag the default standard rate code");

                entity.Property(e => e.VrEditedBy).HasColumnName("vr_edited_by");

                entity.Property(e => e.VrEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("vr_edited_on");

                entity.Property(e => e.VrName)
                    .HasMaxLength(30)
                    .HasColumnName("vr_name")
                    .HasComment("eg Standard, Zero, etc");

                entity.Property(e => e.VrRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("vr_rate")
                    .HasComment("Store as % (eg 17.5 not 0.175)");
            });

            modelBuilder.Entity<VatReturn>(entity =>
            {
                entity.HasKey(e => e.VatId);

                entity.ToTable("VAT_Return", "Accounts");

                entity.Property(e => e.VatId).HasColumnName("VAT_ID");

                entity.Property(e => e.Box1).HasColumnName("Box_1");

                entity.Property(e => e.Box2).HasColumnName("Box_2");

                entity.Property(e => e.Box3).HasColumnName("Box_3");

                entity.Property(e => e.Box4).HasColumnName("Box_4");

                entity.Property(e => e.Box5).HasColumnName("Box_5");

                entity.Property(e => e.Box6).HasColumnName("Box_6");

                entity.Property(e => e.Box7).HasColumnName("Box_7");

                entity.Property(e => e.Box8).HasColumnName("Box_8");

                entity.Property(e => e.Box9).HasColumnName("Box_9");

                entity.Property(e => e.ClosedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Closed_Date");

                entity.Property(e => e.ClosedUser).HasColumnName("Closed_User");

                entity.Property(e => e.MonthEnd).HasColumnName("Month_End");

                entity.Property(e => e.MonthStart).HasColumnName("Month_Start");

                entity.Property(e => e.PeriodYear).HasColumnName("Period_Year");

                entity.Property(e => e.VatDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VAT_Date");

                entity.Property(e => e.VatUser).HasColumnName("VAT_User");
            });

            modelBuilder.Entity<VatType>(entity =>
            {
                entity.HasKey(e => e.VtId);

                entity.ToTable("VAT_Types", "Accounts");

                entity.Property(e => e.VtId).HasColumnName("vt_id");

                entity.Property(e => e.VtCode)
                    .HasMaxLength(5)
                    .HasColumnName("vt_code")
                    .HasComment("V!, V2, V11, V12, etc");

                entity.Property(e => e.VtCreatedBy).HasColumnName("vt_created_by");

                entity.Property(e => e.VtCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("vt_created_on");

                entity.Property(e => e.VtEditedBy).HasColumnName("vt_edited_by");

                entity.Property(e => e.VtEditedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("vt_edited_on");

                entity.Property(e => e.VtName)
                    .HasMaxLength(30)
                    .HasColumnName("vt_name")
                    .HasComment("For VAT return reporting (net outputs, inputs, EU sales, etc.)");
            });

            modelBuilder.Entity<View1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW1", "MI");

                entity.Property(e => e.Clcount).HasColumnName("CLCount");
            });

            modelBuilder.Entity<View11>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW1", "Site");

                entity.Property(e => e.SInspItem).HasColumnName("s_insp_item");

                entity.Property(e => e.SStatus).HasColumnName("s_status");
            });

            modelBuilder.Entity<VoucherCode>(entity =>
            {
                entity.ToTable("VoucherCodes", "Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(50)
                    .HasColumnName("VoucherID");
            });

            modelBuilder.Entity<VwBiscore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBIScore", "nCompass");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");

                entity.Property(e => e.Score).HasColumnName("score");
            });

            modelBuilder.Entity<Vwdesccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwdesccount", "nCompass");

                entity.Property(e => e.BiDescription)
                    .HasMaxLength(200)
                    .HasColumnName("BI_Description");

                entity.Property(e => e.BiDescriptionId).HasColumnName("BI_Description_ID");

                entity.Property(e => e.InsuranceClaimId).HasColumnName("InsuranceClaimID");
            });

            modelBuilder.Entity<WClaim>(entity =>
            {
                entity.ToTable("w_claims", "Site");

                entity.Property(e => e.WClaimId).HasColumnName("w_claim_id");

                entity.Property(e => e.WClaimAdd1)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_add1");

                entity.Property(e => e.WClaimAdd2)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_add2");

                entity.Property(e => e.WClaimAdd3)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_add3");

                entity.Property(e => e.WClaimAltadd1)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_altadd1");

                entity.Property(e => e.WClaimAltadd2)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_altadd2");

                entity.Property(e => e.WClaimAltadd3)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_altadd3");

                entity.Property(e => e.WClaimAltpostcode)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_altpostcode");

                entity.Property(e => e.WClaimComments)
                    .HasColumnType("ntext")
                    .HasColumnName("w_claim_comments");

                entity.Property(e => e.WClaimCondition)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_condition");

                entity.Property(e => e.WClaimDamageDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("w_claim_damage_details");

                entity.Property(e => e.WClaimDate)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_date");

                entity.Property(e => e.WClaimDeliveryComp).HasColumnName("w_claim_delivery_comp");

                entity.Property(e => e.WClaimDeliveryRef)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_delivery_ref");

                entity.Property(e => e.WClaimDetails)
                    .HasColumnType("ntext")
                    .HasColumnName("w_claim_details");

                entity.Property(e => e.WClaimEngineer)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_engineer");

                entity.Property(e => e.WClaimExpDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_exp_delivery_date");

                entity.Property(e => e.WClaimFaultTypeId).HasColumnName("w_claim_fault_type_id");

                entity.Property(e => e.WClaimFax)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_fax");

                entity.Property(e => e.WClaimFromCompany).HasColumnName("w_claim_from_company");

                entity.Property(e => e.WClaimHandler).HasColumnName("w_claim_handler");

                entity.Property(e => e.WClaimInspectionResultId).HasColumnName("w_claim_inspection_result_id");

                entity.Property(e => e.WClaimItemCategory).HasColumnName("w_claim_item_category");

                entity.Property(e => e.WClaimItemType).HasColumnName("w_claim_item_type");

                entity.Property(e => e.WClaimMadeWithinInitialPeriod).HasColumnName("w_claim_made_within_initial_period");

                entity.Property(e => e.WClaimManufacturer)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_manufacturer");

                entity.Property(e => e.WClaimMobile)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_mobile");

                entity.Property(e => e.WClaimModel)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_model");

                entity.Property(e => e.WClaimName)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_name");

                entity.Property(e => e.WClaimOpen)
                    .IsRequired()
                    .HasColumnName("w_claim_open")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WClaimPhone)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_phone");

                entity.Property(e => e.WClaimPolicyExpires)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_policy_expires");

                entity.Property(e => e.WClaimPolicyId).HasColumnName("w_claim_policy_id");

                entity.Property(e => e.WClaimPolicyNum)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_policy_num");

                entity.Property(e => e.WClaimPolicyStart)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_policy_start");

                entity.Property(e => e.WClaimPostcode)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_postcode");

                entity.Property(e => e.WClaimRepairType)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_repair_type");

                entity.Property(e => e.WClaimRepairer).HasColumnName("w_claim_repairer");

                entity.Property(e => e.WClaimSerial)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_serial");

                entity.Property(e => e.WClaimStatus).HasColumnName("w_claim_status");
            });

            modelBuilder.Entity<WClaimAttrib>(entity =>
            {
                entity.HasKey(e => e.WCaId);

                entity.ToTable("w_claim_attribs", "Site");

                entity.Property(e => e.WCaId).HasColumnName("w_ca_id");

                entity.Property(e => e.WCaAttribId).HasColumnName("w_ca_attrib_id");

                entity.Property(e => e.WCaAttribVal)
                    .HasMaxLength(50)
                    .HasColumnName("w_ca_attrib_val");

                entity.Property(e => e.WCaClaimId).HasColumnName("w_ca_claim_id");
            });

            modelBuilder.Entity<WClaimStatus>(entity =>
            {
                entity.ToTable("w_claim_status", "Site");

                entity.Property(e => e.WClaimStatusId).HasColumnName("w_claim_status_id");

                entity.Property(e => e.WClaimStatusClose).HasColumnName("w_claim_status_close");

                entity.Property(e => e.WClaimStatusDesc)
                    .HasMaxLength(50)
                    .HasColumnName("w_claim_status_desc");
            });

            modelBuilder.Entity<WClaimStatusHistory>(entity =>
            {
                entity.HasKey(e => e.WClaimShId);

                entity.ToTable("w_claim_status_history", "Site");

                entity.Property(e => e.WClaimShId).HasColumnName("w_claim_sh_id");

                entity.Property(e => e.WClaimShClaimId).HasColumnName("w_claim_sh_claim_id");

                entity.Property(e => e.WClaimShComments)
                    .HasColumnType("ntext")
                    .HasColumnName("w_claim_sh_comments");

                entity.Property(e => e.WClaimShDate)
                    .HasColumnType("datetime")
                    .HasColumnName("w_claim_sh_date");

                entity.Property(e => e.WClaimShHandler).HasColumnName("w_claim_sh_handler");

                entity.Property(e => e.WClaimShNewStatus).HasColumnName("w_claim_sh_new_status");
            });

            modelBuilder.Entity<Warranty>(entity =>
            {
                entity.ToTable("Warranty", "Site");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnWeb)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ItemType)
                    .WithMany(p => p.Warranties)
                    .HasForeignKey(d => d.ItemTypeId)
                    .HasConstraintName("FK_Warranty_ItemType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Warranties)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Warranty_User");
            });

            modelBuilder.Entity<Weighting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Weightings", "nCompass");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.Weighting1).HasColumnName("Weighting");
            });

            modelBuilder.Entity<WheeliesAttributeValue>(entity =>
            {
                entity.ToTable("Wheelies_AttributeValue", "Product");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AttributeValueId).HasColumnName("AttributeValueID");

                entity.Property(e => e.WheeliesValue).HasMaxLength(255);
            });

            modelBuilder.Entity<WheeliesDelta>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bars).HasMaxLength(255);

                entity.Property(e => e.BottomBracket).HasMaxLength(255);

                entity.Property(e => e.BrakeLever).HasMaxLength(255);

                entity.Property(e => e.Cassette).HasMaxLength(255);

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.Chain).HasMaxLength(255);

                entity.Property(e => e.Chainset).HasMaxLength(255);

                entity.Property(e => e.Colour).HasMaxLength(255);

                entity.Property(e => e.Drivetrain).HasMaxLength(255);

                entity.Property(e => e.Fork).HasMaxLength(255);

                entity.Property(e => e.Frame).HasMaxLength(255);

                entity.Property(e => e.FrontBrake).HasMaxLength(255);

                entity.Property(e => e.FrontHub).HasMaxLength(255);

                entity.Property(e => e.FrontMech).HasMaxLength(255);

                entity.Property(e => e.FrontTyre).HasMaxLength(255);

                entity.Property(e => e.Headset).HasMaxLength(255);

                entity.Property(e => e.IsBike).HasMaxLength(255);

                entity.Property(e => e.Make).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.RearBrake).HasMaxLength(255);

                entity.Property(e => e.RearHub).HasMaxLength(255);

                entity.Property(e => e.RearMech).HasMaxLength(255);

                entity.Property(e => e.RearShock).HasMaxLength(255);

                entity.Property(e => e.RearTyre).HasMaxLength(255);

                entity.Property(e => e.Rims).HasMaxLength(255);

                entity.Property(e => e.Rrp).HasColumnName("RRP");

                entity.Property(e => e.Seatpost).HasMaxLength(255);

                entity.Property(e => e.Shifter).HasMaxLength(255);

                entity.Property(e => e.Size).HasMaxLength(255);

                entity.Property(e => e.Spokes).HasMaxLength(255);

                entity.Property(e => e.Stem).HasMaxLength(255);

                entity.Property(e => e.Wproductref)
                    .HasMaxLength(255)
                    .HasColumnName("wproductref");

                entity.Property(e => e.Year).HasMaxLength(255);
            });

            modelBuilder.Entity<WheeliesDeltas2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WheeliesDeltas2");

                entity.Property(e => e.Bars).HasMaxLength(255);

                entity.Property(e => e.BottomBracket).HasMaxLength(255);

                entity.Property(e => e.BrakeLever).HasMaxLength(255);

                entity.Property(e => e.Cassette).HasMaxLength(255);

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.Chain).HasMaxLength(255);

                entity.Property(e => e.Chainset).HasMaxLength(255);

                entity.Property(e => e.Colour).HasMaxLength(255);

                entity.Property(e => e.Drivetrain).HasMaxLength(255);

                entity.Property(e => e.Fork).HasMaxLength(255);

                entity.Property(e => e.Frame).HasMaxLength(255);

                entity.Property(e => e.FrontBrake).HasMaxLength(255);

                entity.Property(e => e.FrontHub).HasMaxLength(255);

                entity.Property(e => e.FrontMech).HasMaxLength(255);

                entity.Property(e => e.FrontTyre).HasMaxLength(255);

                entity.Property(e => e.Headset).HasMaxLength(255);

                entity.Property(e => e.IsBike).HasMaxLength(255);

                entity.Property(e => e.Make).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.RearBrake).HasMaxLength(255);

                entity.Property(e => e.RearHub).HasMaxLength(255);

                entity.Property(e => e.RearMech).HasMaxLength(255);

                entity.Property(e => e.RearShock).HasMaxLength(255);

                entity.Property(e => e.RearTyre).HasMaxLength(255);

                entity.Property(e => e.Rims).HasMaxLength(255);

                entity.Property(e => e.Rrp).HasColumnName("RRP");

                entity.Property(e => e.Seatpost).HasMaxLength(255);

                entity.Property(e => e.Shifter).HasMaxLength(255);

                entity.Property(e => e.Size).HasMaxLength(255);

                entity.Property(e => e.Speed).HasMaxLength(255);

                entity.Property(e => e.Spokes).HasMaxLength(255);

                entity.Property(e => e.Stem).HasMaxLength(255);

                entity.Property(e => e.Wproductref)
                    .HasMaxLength(255)
                    .HasColumnName("wproductref");

                entity.Property(e => e.Year).HasMaxLength(255);
            });

            modelBuilder.Entity<WheeliesExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WheeliesExport");

                entity.Property(e => e.Bars).HasMaxLength(255);

                entity.Property(e => e.BottomBracket).HasMaxLength(255);

                entity.Property(e => e.BrakeLever).HasMaxLength(255);

                entity.Property(e => e.Cassette).HasMaxLength(255);

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.Chain).HasMaxLength(255);

                entity.Property(e => e.Chainset).HasMaxLength(255);

                entity.Property(e => e.Colour).HasMaxLength(255);

                entity.Property(e => e.DriveTrain).HasMaxLength(255);

                entity.Property(e => e.Fork).HasMaxLength(255);

                entity.Property(e => e.Frame).HasMaxLength(255);

                entity.Property(e => e.FrontBrake).HasMaxLength(255);

                entity.Property(e => e.FrontHub).HasMaxLength(255);

                entity.Property(e => e.FrontMech).HasMaxLength(255);

                entity.Property(e => e.FrontTyre).HasMaxLength(255);

                entity.Property(e => e.Headset).HasMaxLength(255);

                entity.Property(e => e.IsBike).HasMaxLength(255);

                entity.Property(e => e.Make).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.RearBrake).HasMaxLength(255);

                entity.Property(e => e.RearHub).HasMaxLength(255);

                entity.Property(e => e.RearMech).HasMaxLength(255);

                entity.Property(e => e.RearShock).HasMaxLength(255);

                entity.Property(e => e.RearTyre).HasMaxLength(255);

                entity.Property(e => e.Rims).HasMaxLength(255);

                entity.Property(e => e.Rrp).HasColumnName("RRP");

                entity.Property(e => e.SeatPost).HasMaxLength(255);

                entity.Property(e => e.Shifter).HasMaxLength(255);

                entity.Property(e => e.Size).HasMaxLength(255);

                entity.Property(e => e.Speed).HasMaxLength(255);

                entity.Property(e => e.Spokes).HasMaxLength(255);

                entity.Property(e => e.Stem).HasMaxLength(255);

                entity.Property(e => e.Wdprice).HasColumnName("WDPrice");

                entity.Property(e => e.WproductRef).HasMaxLength(255);

                entity.Property(e => e.Year).HasMaxLength(255);
            });

            modelBuilder.Entity<Wheely>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Wheelies", "Product");

                entity.Property(e => e.BottomBracket).HasMaxLength(255);

                entity.Property(e => e.BrakeLevers).HasMaxLength(255);

                entity.Property(e => e.Cassette).HasMaxLength(255);

                entity.Property(e => e.Chain).HasMaxLength(255);

                entity.Property(e => e.Chainset).HasMaxLength(255);

                entity.Property(e => e.Colour).HasMaxLength(255);

                entity.Property(e => e.Drivetrain).HasMaxLength(255);

                entity.Property(e => e.Features).HasMaxLength(255);

                entity.Property(e => e.Fork).HasMaxLength(255);

                entity.Property(e => e.FrameFork).HasMaxLength(255);

                entity.Property(e => e.FrontBrake).HasMaxLength(255);

                entity.Property(e => e.FrontHub).HasMaxLength(255);

                entity.Property(e => e.FrontMech)
                    .HasMaxLength(255)
                    .HasColumnName("Front Mech");

                entity.Property(e => e.FrontTyre)
                    .HasMaxLength(255)
                    .HasColumnName("FRontTyre");

                entity.Property(e => e.HandleBars).HasMaxLength(255);

                entity.Property(e => e.Headset).HasMaxLength(255);

                entity.Property(e => e.Make).HasMaxLength(255);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Pedals).HasMaxLength(255);

                entity.Property(e => e.RearBrake).HasMaxLength(255);

                entity.Property(e => e.RearHub).HasMaxLength(255);

                entity.Property(e => e.RearMech)
                    .HasMaxLength(255)
                    .HasColumnName("Rear Mech");

                entity.Property(e => e.RearShock).HasMaxLength(255);

                entity.Property(e => e.RearTyre).HasMaxLength(255);

                entity.Property(e => e.Rims).HasMaxLength(255);

                entity.Property(e => e.SeatPost).HasMaxLength(255);

                entity.Property(e => e.Shifters).HasMaxLength(255);

                entity.Property(e => e.SizesAvailable)
                    .HasMaxLength(255)
                    .HasColumnName("Sizes Available");

                entity.Property(e => e.Spokes).HasMaxLength(255);

                entity.Property(e => e.Stem).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.Property(e => e.Weight)
                    .HasMaxLength(255)
                    .HasColumnName("weight");
            });

            modelBuilder.Entity<Wip>(entity =>
            {
                entity.ToTable("WIP", "MI");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountName).HasMaxLength(255);

                entity.Property(e => e.Commodity).HasMaxLength(255);

                entity.Property(e => e.DateClosed)
                    .HasColumnType("datetime")
                    .HasColumnName("Date closed");

                entity.Property(e => e.DeliverypostCode).HasMaxLength(255);

                entity.Property(e => e.ForTheMonth)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("For_The_Month");

                entity.Property(e => e.ForTheYear).HasColumnName("For_The_Year");

                entity.Property(e => e.InstructionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Instruction date");

                entity.Property(e => e.Laid).HasColumnName("LAid");

                entity.Property(e => e.Lareference)
                    .HasMaxLength(255)
                    .HasColumnName("LAReference");

                entity.Property(e => e.PolicyNumber).HasMaxLength(255);

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .HasColumnName("status");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UserName).HasMaxLength(255);
            });

            modelBuilder.Entity<ZStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("PK_Status");

                entity.ToTable("zStatus", "Inspection");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.StatusName).HasMaxLength(50);
            });

            modelBuilder.Entity<Zz01Issue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ZZ01_Issue", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.NetAmount).HasColumnName("NET_AMOUNT");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");
            });

            modelBuilder.Entity<Zzcv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ZZCV1", "MI");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_REF");

                entity.Property(e => e.Consignment)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CONSIGNMENT");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("INVOICE_DATE");

                entity.Property(e => e.InvoiceNumber).HasColumnName("INVOICE_NUMBER");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_CODE");
            });

            modelBuilder.Entity<_200119product>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("200119Product", "Product");

                entity.Property(e => e.AltType).HasMaxLength(100);

                entity.Property(e => e.AltType2).HasMaxLength(100);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.Colour).HasMaxLength(50);

                entity.Property(e => e.DcPavcount).HasColumnName("DC_PAVCount");

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.EncodexStart).HasColumnType("datetime");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.InformationUrl)
                    .HasMaxLength(200)
                    .HasColumnName("InformationURL");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Nfumdescription)
                    .HasMaxLength(200)
                    .HasColumnName("NFUMDescription");

                entity.Property(e => e.OldProductId).HasColumnName("Old_Product_Id");

                entity.Property(e => e.PictureUrl)
                    .HasMaxLength(200)
                    .HasColumnName("PictureURL");

                entity.Property(e => e.PreviousProductId).HasColumnName("PreviousProductID");

                entity.Property(e => e.PriceLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Type).HasMaxLength(100);
            });

            modelBuilder.Entity<_200119supplierProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("200119SupplierProduct", "nCompass");

                entity.Property(e => e.Brand).HasMaxLength(50);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.Rrp)
                    .HasColumnType("money")
                    .HasColumnName("RRP");

                entity.Property(e => e.Supplier).HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierProductCode).HasMaxLength(255);

                entity.Property(e => e.SupplierProductCodeAlt).HasMaxLength(255);

                entity.Property(e => e.SupplierProductId).HasColumnName("SupplierProductID");

                entity.Property(e => e.SupplierReference).HasMaxLength(500);

                entity.Property(e => e.Url).HasMaxLength(255);
            });

            modelBuilder.Entity<_200119supplierProductProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("200119SupplierProduct_Product", "nCompass");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.SupplierProductId).HasColumnName("SupplierProductID");
            });

            modelBuilder.Entity<_22012020attribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("22012020Attribute", "Product");

                entity.Property(e => e.AlternateAttributeName).HasMaxLength(50);

                entity.Property(e => e.AttributeCategoryId).HasColumnName("AttributeCategoryID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AttributeName).HasMaxLength(50);

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.DefaultValueId).HasColumnName("DefaultValueID");

                entity.Property(e => e.Explanation).HasMaxLength(300);

                entity.Property(e => e.FeatureId).HasColumnName("FeatureID");

                entity.Property(e => e.Linkedattributeid).HasColumnName("linkedattributeid");

                entity.Property(e => e.Note).HasMaxLength(200);
            });

            modelBuilder.Entity<_22012020attributeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("22012020AttributeValue", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.Cnetsufx)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETSUFX");

                entity.Property(e => e.VId).HasColumnName("vID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<_22012020brand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("22012020Brand", "Product");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.BrandName).HasMaxLength(200);
            });

            modelBuilder.Entity<_22012020familyAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("22012020FamilyAttribute", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FilterType).HasMaxLength(10);

                entity.Property(e => e.FilterTypeId).HasColumnName("FilterTypeID");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<_22012020supplierProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("22012020SupplierProduct", "nCompass");

                entity.Property(e => e.Brand).HasMaxLength(50);

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Ean)
                    .HasMaxLength(50)
                    .HasColumnName("EAN");

                entity.Property(e => e.Rrp)
                    .HasColumnType("money")
                    .HasColumnName("RRP");

                entity.Property(e => e.Supplier).HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.SupplierProductCode).HasMaxLength(255);

                entity.Property(e => e.SupplierProductCodeAlt).HasMaxLength(255);

                entity.Property(e => e.SupplierProductId).HasColumnName("SupplierProductID");

                entity.Property(e => e.SupplierReference).HasMaxLength(500);

                entity.Property(e => e.Url).HasMaxLength(255);
            });

            modelBuilder.Entity<_22012020supplierProductProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("22012020SupplierProduct_Product", "nCompass");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.SupplierProductId).HasColumnName("SupplierProductID");
            });

            modelBuilder.Entity<_28012020productAttributeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("28012020ProductAttributeValue", "Product");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");
            });

            modelBuilder.Entity<_29012020family>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("29012020Family", "Product");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.Cnetid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CNETID");

                entity.Property(e => e.FamilyId).HasColumnName("FamilyID");

                entity.Property(e => e.FamilyName).HasMaxLength(200);

                entity.Property(e => e.LinkedFamilyId).HasColumnName("LinkedFamilyID");

                entity.Property(e => e.PgId).HasColumnName("pgID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
