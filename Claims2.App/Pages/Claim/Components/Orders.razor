@implements IDisposable
@inject ClaimDataContainer _claimDataContainer


<MudPaper Class="pa-2 mt-2" Elevation="3">

    <MudStack AlignItems="AlignItems.Stretch">
        @foreach (var order in Data.ClaimOrderServices)
        {
            <MudPaper Class="pa-3 orderRow" Elevation="3">
                        <MudGrid Spacing="2" Justify="Justify.Center" Class="ml-4 mr-4">
                            <MudItem lg="1">
                                @if (IsOrderCancelled(order))
                                {
                                    <MudBadge Content="Quantity(order)"
                                      Color="Color.Error" Overlap="true" Class="mx-2">
                                        <MudIconButton Icon="@Data.GetIcon(order.Category)" Size="Size.Large" Color="Color.Error" />
                                    </MudBadge>
                                }
                                else
                                {
                                    <MudBadge Content="Quantity(order)"
                                      Color="Color.Primary" Overlap="true" Class="mx-2">
                                        <MudIconButton Icon="@Data.GetIcon(order.Category)" Size="Size.Large" Color="Color.Default" />
                                    </MudBadge>
                                }

                            </MudItem>
                            <MudItem xl="4" lg="4" md="5" sm="5" xs="4">
                                <MudChip Label="true" Color="Color.Primary" Class="mr-3 claimOrderDescription" data-toggle="tooltip" data-placement="top" title="@order.ClaimOrder.ShortDescription">@order.ClaimOrder.ShortDescription</MudChip>
                            </MudItem>
                            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                                <MudItem lg="2" md="2" sm="2" xs="2" xl="1">
                                    <MudChip Color="Color.Secondary" Style="width: 100%;">Buy: @order.ClaimOrder.BuyRate.ToString("c2")</MudChip>
                                </MudItem>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                                <MudItem lg="2" md="2" sm="2" xs="2" xl="1">
                                    <MudChip Color="Color.Info" Style="width: 100%;">Sell: @order.ClaimOrder.SellRate.ToString("c2")</MudChip>
                                </MudItem>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.LgAndDown">
                                <MudItem lg="2" xl="2">
                                    <MudChip Label="true" Color="Color.Default" Class="ml-3 mr-8 claimOrderDescription">Status Placeholder</MudChip>
                                </MudItem>
                            </MudHidden>
                            <MudItem lg="3" xs="5" xl="3" md="5" Class="">
                                <MudIconButton Icon="@Icons.Material.Outlined.Search" Color="Color.Inherit" Size="Size.Medium" Class="ml-16" />
                                <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" Size="Size.Medium" />
                            </MudItem>
                        </MudGrid>

            </MudPaper>

        }
    </MudStack>

</MudPaper>


<MudPaper Class="pa-2 mt-8" Elevation="3" Height="800px">

    <MudText Typo="Typo.h4" Class="pl-8 mt-2">Edit Order</MudText>


    <MudPaper Class="mx-8 mt-4" Elevation="3" Height="700px" Width="60%">
    <EditOrder />
    </MudPaper>

</MudPaper>
@code {

    private ClaimViewData Data => _claimDataContainer.Property;

    protected override void OnInitialized()
    {
        _claimDataContainer.OnChange += StateHasChanged;
    }


    public void Dispose()
    {
        _claimDataContainer.OnChange -= StateHasChanged;
    }

    public bool IsOrderCancelled(ClaimOrderService co)
    {
        return Quantity(co) == 0;
    }

    public int Quantity(ClaimOrderService co)
    {
        return co.ClaimOrder.OrderedQuantity - co.ClaimOrder.CancelledQuantity;
    }


}
